<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpatialSlur</name>
    </assembly>
    <members>
        <member name="T:SpatialSlur.ArrayViewExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayViewExtensions.Convert``2(SpatialSlur.Collections.ArrayView{``0},System.Func{``0,``1},SpatialSlur.Collections.ArrayView{``1},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="source"></param>
            <param name="converter"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.ReadOnlyArrayViewExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ReadOnlyArrayViewExtensions.Convert``2(SpatialSlur.Collections.ReadOnlyArrayView{``0},System.Func{``0,``1},SpatialSlur.Collections.ArrayView{``1},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="source"></param>
            <param name="converter"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Collections.Proximity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getPosition"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},System.Collections.Generic.HashSet{SpatialSlur.Vector2i},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getPosition"></param>
            <param name="hash"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getPosition"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},System.Collections.Generic.HashSet{SpatialSlur.Vector3i},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getPosition"></param>
            <param name="hash"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},SpatialSlur.Collections.HashGrid2d{SpatialSlur.Vector2d},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},SpatialSlur.Collections.HashGrid3d{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},System.Collections.Generic.List{System.Int32}@,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="indexMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},SpatialSlur.Collections.HashGrid2d{System.Int32},System.Collections.Generic.List{System.Int32}@,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="grid"></param>
            <param name="indexMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},System.Collections.Generic.List{System.Int32}@,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="indexMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.RemoveCoincident``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},SpatialSlur.Collections.HashGrid3d{System.Int32},System.Collections.Generic.List{System.Int32}@,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="getPosition"></param>
            <param name="grid"></param>
            <param name="indexMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Double)">
            <summary>
            For each point, returns the index of the first coincident point within the same collection. If no coincident item is found, -1 is returned.
            </summary>
            <param name="points"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},SpatialSlur.Collections.HashGrid2d{System.ValueTuple{SpatialSlur.Vector2d,System.Int32}},System.Double)">
            <summary>
            For each point, returns the index of the first coincident point within the same collection. If no coincident item is found, -1 is returned.
            </summary>
            <param name="points"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Double)">
            <summary>
            For each point, returns the index of the first coincident point within the same collection. If no coincident item is found, -1 is returned.
            </summary>
            <param name="points"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Collections.HashGrid3d{System.ValueTuple{SpatialSlur.Vector3d,System.Int32}},System.Double)">
            <summary>
            For each point, returns the index of the first coincident point within the same collection. If no coincident item is found, -1 is returned.
            </summary>
            <param name="points"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Double)">
            <summary>
            For each point in A, returns the index of the first coincident point in B. If no coincident item is found, -1 is returned.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},SpatialSlur.Collections.HashGrid2d{System.ValueTuple{SpatialSlur.Vector2d,System.Int32}},System.Double)">
            <summary>
            For each point in A, returns the index of the first coincident point in B. If no coincident item is found, -1 is returned.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Double)">
            <summary>
            For each point in A, returns the index of the first coincident point in B. If no coincident item is found, -1 is returned.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetFirstCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Collections.HashGrid3d{System.ValueTuple{SpatialSlur.Vector3d,System.Int32}},System.Double)">
            <summary>
            For each point in A, returns the index of the first coincident point in B. If no coincident item is found, -1 is returned.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetAllCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Double)">
            <summary>
            For each point in A, returns the index of all coincident points in B.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetAllCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},SpatialSlur.Collections.HashGrid2d{System.ValueTuple{SpatialSlur.Vector2d,System.Int32}},System.Double)">
            <summary>
            For each point in A, returns the index of all coincident points in B.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetAllCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Double)">
            <summary>
            For each point in A, returns the index of all coincident points in B.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.GetAllCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Collections.HashGrid3d{System.ValueTuple{SpatialSlur.Vector3d,System.Int32}},System.Double)">
            <summary>
            For each point in A, returns the index of all coincident points in B.
            </summary>
            <param name="pointsA"></param>
            <param name="pointsB"></param>
            <param name="grid"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.Consolidate(System.Collections.Generic.IList{SpatialSlur.Vector2d},System.Double,System.Double,System.Int32)">
            <summary>
            Consolidates points within a given search radius.
            Returns true if the solution converged within the given maximum number of steps.
            </summary>
            <param name="points"></param>
            <param name="radius"></param>
            <param name="tolerance"></param>
            <param name="maxSteps"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Proximity.Consolidate(System.Collections.Generic.IList{SpatialSlur.Vector3d},System.Double,System.Double,System.Int32)">
            <summary>
            Consolidates points within a given search radius.
            Returns true if the solution converged within the given maximum number of steps.
            </summary>
            <param name="points"></param>
            <param name="radius"></param>
            <param name="tolerance"></param>
            <param name="maxSteps"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.QueueSet`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.QueueSet`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.Enqueue(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.Dequeue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.QueueSet`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ReadOnlySet`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlySet`1.op_Implicit(System.Collections.Generic.HashSet{`0})~SpatialSlur.Collections.ReadOnlySet{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlySet`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlySet`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlySet`1.HasSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlySet`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlySet`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.StackSet`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.StackSet`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.StackSet`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.IListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Set``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Set``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Set``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Assumes the length of the array is less than or equal to the number of elements in the given sequence.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetRange``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetRange``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Assumes the specified range is less than or equal to the number of elements in the given sequence.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetSelection``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.SetSelection``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps a pair of elements.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles a list of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shift``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shifts a list of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Shift``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts a subset of a list of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Reverses a list of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Reverse``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Reverses the order of the items within the specified range in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Equivalent of List.FindIndex for IList
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Equivalent of List.FindIndex for IList
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Swim``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Moves true elements to the front of the list.
            Returns the index after the last true element.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns the nth smallest item in linear amortized time.
            Partially sorts the array with respect to the nth item such that items to the left are less than or equal and items to the right are greater than or equal.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Partition``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``1(System.Collections.Generic.IList{``0},System.Int32,System.Comparison{``0})">
            <summary>
            Returns the nth smallest item in linear amortized time.
            Partially sorts the array with respect to the nth item such that items to the left are less than or equal and items to the right are greater than or equal.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Partition``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Int32)">
            <summary>
            Returns the nth smallest key in linear amortized time.
            Partially sorts the keys with respect to the nth item such that items to the left are less than or equal and items to the right are greater than or equal.
            Also partially sorts a list of corresponding values.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.QuickSelect``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IListExtensions.Partition``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Collections.RefList`1">
            <summary>
            List implementation that supports indexing with ref returns.
            Placeholder until .NET framework List implementation supports the same.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="P:SpatialSlur.Collections.RefList`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Collections.RefList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.RefList`1.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.RefList`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.TrimExcess">
            <summary>
            Reduces the capacity to twice the count.
            If the capacity is already less than twice the count, then this function does nothing.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.AsView">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.AsView(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.RefList`1.AsView(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.Sequences">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.Sequences.CountFrom(System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Sequences.CountFrom(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="stride"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Sequences.Fibonacci">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.Sequences.CountInBase(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="digits"></param>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ArrayView">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView.Create``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ArrayView`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.op_Implicit(`0[])~SpatialSlur.Collections.ArrayView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:SpatialSlur.Collections.ArrayView`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Enumerator.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="P:SpatialSlur.Collections.ArrayView`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ArrayView`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ArrayView`1.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ArrayView`1.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ArrayView`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ArrayView`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the given index with respect to this view.
            Note that this does not perform an additional bounds check.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Subview(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Set(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Set(SpatialSlur.Collections.ArrayView{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.Action(System.Action{`0},System.Boolean)">
            <summary>
            Performs an action over this view.
            </summary>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.AsReadOnly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ArrayView`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.HashGrid2d`1">
            <summary>
            Infinite uniform grid for broad phase collision detection between dynamic objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SpatialSlur.Collections.HashGrid2d`1.Bin">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid2d`1.Bin.Version">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Bin.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:SpatialSlur.Collections.HashGrid2d`1.BinKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid2d`1.BinKey.I">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid2d`1.BinKey.J">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.BinKey.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.BinKey.Equals(SpatialSlur.Collections.HashGrid2d{`0}.BinKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.BinKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.BinKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.HashGrid2d`1.Count">
            <summary>
            Returns the number of objects currently in the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.HashGrid2d`1.Scale">
            <summary>
            Gets or sets the scale of the implicit grid used to discretize coordinates.
            Note that setting this property also clears the grid.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.ResetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.ToKey(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.GetBin(SpatialSlur.Collections.HashGrid2d{`0}.BinKey)">
            <summary>
            Returns the bin associated with the given key if one exists.
            If not, creates a new bin, assigns it to the given key, and returns it.
            Used for insertion.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Insert(SpatialSlur.Vector2d,`0)">
            <summary>
            Inserts the given value into the intersecting bin.
            </summary>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Insert(SpatialSlur.Interval2d,`0)">
            <summary>
            Inserts the given value into each intersecting bin.
            </summary>
            <param name="box"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Search(SpatialSlur.Vector2d)">
            <summary>
            Returns the contents of the intersecting bin.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Search(SpatialSlur.Interval2d)">
            <summary>
            Returns the contents of all intersecting bins.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.SearchImpl(SpatialSlur.Vector2d,SpatialSlur.Collections.HashGrid2d{`0}.Bin@)">
            <summary>
            Returns the intersecting bin if one exists.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.SearchImpl(SpatialSlur.Interval2d)">
            <summary>
            Returns each intersecting bin.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Search(SpatialSlur.Vector2d,System.Collections.Generic.List{`0})">
            <summary>
            Returns the contents of the intersecting bin.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid2d`1.Search(SpatialSlur.Interval2d,System.Collections.Generic.List{`0})">
            <summary>
            Returns the contents of all intersecting bin.
            </summary>
        </member>
        <member name="T:SpatialSlur.Collections.HashGrid3d`1">
            <summary>
            Infinite uniform grid for broad phase collision detection between dynamic objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SpatialSlur.Collections.HashGrid3d`1.Bin">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid3d`1.Bin.Version">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Bin.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:SpatialSlur.Collections.HashGrid3d`1.BinKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid3d`1.BinKey.I">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid3d`1.BinKey.J">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Collections.HashGrid3d`1.BinKey.K">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.BinKey.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="k"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.BinKey.Equals(SpatialSlur.Collections.HashGrid3d{`0}.BinKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.BinKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.BinKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:SpatialSlur.Collections.HashGrid3d`1.Count">
            <summary>
            Returns the number of objects currently in the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.HashGrid3d`1.Scale">
            <summary>
            Gets or sets the scale of the implicit grid used to discretize coordinates.
            Note that setting this property also clears the grid.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.ResetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.ToKey(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.GetBin(SpatialSlur.Collections.HashGrid3d{`0}.BinKey)">
            <summary>
            Returns the bin associated with the given key if one exists.
            If not, creates a new bin, assigns it to the given key, and returns it.
            Used for insertion.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Insert(SpatialSlur.Vector3d,`0)">
            <summary>
            Inserts the given value into the intersecting bin.
            </summary>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Insert(SpatialSlur.Interval3d,`0)">
            <summary>
            Inserts the given value into each intersecting bin.
            </summary>
            <param name="box"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Search(SpatialSlur.Vector3d)">
            <summary>
            Returns the contents of the intersecting bin.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Search(SpatialSlur.Interval3d)">
            <summary>
            Returns the contents of all intersecting bins.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.SearchImpl(SpatialSlur.Vector3d,SpatialSlur.Collections.HashGrid3d{`0}.Bin@)">
            <summary>
            Returns the intersecting bin if one exists.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.SearchImpl(SpatialSlur.Interval3d)">
            <summary>
            Returns each intersecting bin.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Search(SpatialSlur.Vector3d,System.Collections.Generic.List{`0})">
            <summary>
            Returns the contents of the intersecting bin.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.HashGrid3d`1.Search(SpatialSlur.Interval3d,System.Collections.Generic.List{`0})">
            <summary>
            Returns the contents of all intersecting bins.
            </summary>
        </member>
        <member name="T:SpatialSlur.Collections.KdTree">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree.CreateBalanced``1(System.Collections.Generic.IEnumerable{System.Double[]},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts point value pairs in a way that produces a balanced tree.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree.CreateBalanced``1(System.Double[][],``0[])">
            <summary>
            Inserts point value pairs in a way that produces a balanced tree.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree.CreateBalanced(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Inserts point value pairs in a way that produces a balanced tree.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree.CreateBalanced(System.Double[][])">
            <summary>
            Inserts point value pairs in a way that produces a balanced tree.
            </summary>
        </member>
        <member name="T:SpatialSlur.Collections.KdTree`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Collections.KdTree`1.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Collections.KdTree`1.Node.Left">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Collections.KdTree`1.Node.Right">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Collections.KdTree`1.Node.Point">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Collections.KdTree`1.Node.Value">
            <summary></summary>
        </member>
        <member name="P:SpatialSlur.Collections.KdTree`1.Node.IsLeaf">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Node.#ctor(System.Double[],`0)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="T:SpatialSlur.Collections.KdTree`1.Pair`2">
            <summary>
            
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.CreateBalanced(System.Collections.Generic.IEnumerable{System.Double[]},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts point value pairs in a way that produces a balanced tree.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.CreateBalanced(System.Double[][],`0[])">
            <summary>
            Inserts point value pairs in a way that produces a balanced tree.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Min(SpatialSlur.Collections.KdTree{`0}.Node,SpatialSlur.Collections.KdTree{`0}.Node,System.Int32)">
            <summary>
            Returns the node with the smallest value in the given dimension.
            If equal, n0 is returned.
            </summary>
            <param name="n0"></param>
            <param name="n1"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="P:SpatialSlur.Collections.KdTree`1.Dimension">
            <summary>
            Returns the number of dimensions used by the tree (i.e. K)
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.KdTree`1.Count">
            <summary>
            Returns the number of nodes in the tree.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.KdTree`1.Tolerance">
            <summary>
            Sets the tolerance used for finding equal points in the tree.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.KdTree`1.IsEmpty">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NextIndex(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Duplicate">
            <summary>
            Creates a shallow copy of the tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Duplicate(SpatialSlur.Collections.KdTree{`0}.Node)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.GetMaxDepth">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.GetMaxDepth(SpatialSlur.Collections.KdTree{`0}.Node,System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.GetMinDepth">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Contains(System.Double[])">
            <summary>
            Returns true if the tree contains the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Contains(System.Double[],`0@)">
            <summary>
            Returns true if the tree contains the given point.
            The value associated with the given point is also returned in the out parameter on success.
            </summary>
            <param name="point"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Find(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[])">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Insert(System.Double[],`0)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Insert(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],`0)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.InsertBalanced(SpatialSlur.Collections.KdTree{`0}.Node[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Remove(System.Double[])">
            <summary> 
            Removes the first point in the tree which is equal to the given point.
            Note that repeated node removal can result in unbalanced trees which degrades search performance.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.Remove(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.FindReplacement(SpatialSlur.Collections.KdTree{`0}.Node,System.Int32)">
            <summary>
            Searches the sub-tree of the given node for a valid replacement node.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.FindMin(SpatialSlur.Collections.KdTree{`0}.Node,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.BoxSearch(System.Double[],System.Double[],System.Func{`0,System.Boolean})">
            <summary>
            Calls the given delegate on each found value.
            The search can be aborted by returning false from the given callback. 
            If aborted, this function will also return false.
            </summary>
            <param name="point"></param>
            <param name="range"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.BoxSearch(System.Double[],System.Double[],System.Collections.Generic.List{`0})">
            <summary>
            Returns all found values by appending them to the given list.
            </summary>
            <param name="point"></param>
            <param name="range"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.BoxSearchImpl(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Double[],System.Func{`0,System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="range"></param>
            <param name="callback"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.RangeSearchL2(System.Double[],System.Double,System.Func{`0,System.Boolean})">
            <summary>
            Calls the given delegate on each found value.
            The search can be aborted by returning false from the given callback. 
            If aborted, this function will also return false.
            </summary>
            <param name="point"></param>
            <param name="range"></param>
            <param name="callback"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.RangeSearchL2(System.Double[],System.Double,System.Collections.Generic.List{`0})">
            <summary>
            Returns all found values by appending them to the given list.
            </summary>
            <param name="point"></param>
            <param name="range"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.RangeSearchL2Impl(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Double,System.Func{`0,System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="rangeSqr"></param>
            <param name="callback"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.RangeSearchL1(System.Double[],System.Double,System.Func{`0,System.Boolean})">
            <summary>
            Calls the given delegate on each found value.
            The search can be aborted by returning false from the given callback. 
            If aborted, this function will also return false.
            </summary>
            <param name="point"></param>
            <param name="range"></param>
            <param name="callback"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.RangeSearchL1(System.Double[],System.Double,System.Collections.Generic.List{`0})">
            <summary>
            Returns all found values by appending them to the given list.
            </summary>
            <param name="point"></param>
            <param name="range"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.RangeSearchL1Impl(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Double,System.Func{`0,System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="range"></param>
            <param name="callback"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NearestL2(System.Double[])">
            <summary>
            Returns the nearest value in the tree using a Euclidean distance metric.
            If the tree is empty the default value of T is returned.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NearestL2(System.Double[],System.Double@)">
            <summary>
            Returns the nearest value in the tree using a Euclidean distance metric.
            If the tree is empty the default value of T is returned.
            Also returns the square distance to the nearest value as an out parameter.
            </summary>
            <param name="point"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NearestL2(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Int32,SpatialSlur.Collections.KdTree{`0}.Pair{`0,System.Double})">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="i"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NearestL1(System.Double[])">
            <summary>
            Returns the nearest value in the tree using a Manhattan distance metric.
            If the tree is empty the default value of T is returned.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NearestL1(System.Double[],System.Double@)">
            <summary>
            Returns the nearest value in the tree using a Manhattan distance metric.
            If the tree is empty the default value of T is returned.
            Also returns the distance to the nearest value as an out parameter.
            </summary>
            <param name="point"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.NearestL1(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Int32,SpatialSlur.Collections.KdTree{`0}.Pair{`0,System.Double})">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="i"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.KNearestL2(System.Double[],System.Int32)">
            <summary>
            Returns the nearest k values and their squared Euclidean distances.
            Note distances will be negative as the search uses a max priority queue.
            </summary>
            <param name="point"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.KNearestL2(System.Double[],System.Int32,SpatialSlur.Collections.PriorityQueue{System.Double,`0})">
            <summary>
            Returns the nearest k values and their squared Euclidean distances.
            Note distances will be negative as the search uses a max priority queue.
            </summary>
            <param name="point"></param>
            <param name="k"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.KNearestL2(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Int32,System.Int32,SpatialSlur.Collections.PriorityQueue{System.Double,`0})">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="k"></param>
            <param name="i"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.KNearestL1(System.Double[],System.Int32)">
            <summary>
            Returns the nearest k values and their Manhattan distances.
            Note distances will be negative as the search uses a max priority queue.
            </summary>
            <param name="point"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.KNearestL1(System.Double[],System.Int32,SpatialSlur.Collections.PriorityQueue{System.Double,`0})">
            <summary>
            Returns the nearest k values and their Manhattan distances.
            Note distances will be negative as the search uses a max priority queue.
            </summary>
            <param name="point"></param>
            <param name="k"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KdTree`1.KNearestL1(SpatialSlur.Collections.KdTree{`0}.Node,System.Double[],System.Int32,System.Int32,SpatialSlur.Collections.PriorityQueue{System.Double,`0})">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="point"></param>
            <param name="k"></param>
            <param name="i"></param>
            <param name="result"></param>
        </member>
        <member name="T:SpatialSlur.Collections.KMeans">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.#ctor(System.Collections.Generic.IEnumerable{System.Double[]},System.Int32,System.Int32)">
            <summary>
            K cluster centers are randomly selected from the given set of data points.
            </summary>
            <param name="points"></param>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.#ctor(System.Double[][],System.Int32,System.Int32)">
            <summary>
            K cluster centers are randomly selected from the given set of data points.
            </summary>
            <param name="points"></param>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.#ctor(System.Collections.Generic.IEnumerable{System.Double[]},System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initial cluster centers are given.
            </summary>
            <param name="points"></param>
            <param name="clusterCenters"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.#ctor(System.Double[][],System.Double[][])">
            <summary>
            Initial cluster centers are given.
            </summary>
            <param name="points"></param>
            <param name="clusterCenters"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.InitClusters(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <param name="seed"></param>
        </member>
        <member name="P:SpatialSlur.Collections.KMeans.K">
            <summary>
            Returns the number of clusters.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.KMeans.ClusterCount">
            <summary>
            Returns the number of clusters (i.e. K)
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.KMeans.PointCount">
            <summary>
            Returns the number of points being clustered
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.GetNearestCluster(System.Int32)">
            <summary>
            
            </summary>
            <param name="pointIndex"></param>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.GetClusterCenter(System.Int32)">
            <summary>
            
            </summary>
            <param name="clusterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.GetClusterSize(System.Int32)">
            <summary>
            
            </summary>
            <param name="clusterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.Cluster(System.Int32,System.Boolean)">
            <summary>
            Returns the number of steps taken to converge.
            Returns -1 if convergence was not reached in the maximum number of steps.
            </summary>
            <param name="maxSteps"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.UpdateNearest">
            <summary>
            Returns the number of data points that changed clusters.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.UpdateNearestParallel">
            <summary>
            Returns the number of data points that changed clusters.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.KMeans.UpdateClusterCenters">
             <summary>
            
             </summary>
        </member>
        <member name="T:SpatialSlur.Collections.ListView">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ListView.Create``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ListView`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.op_Implicit(System.Collections.Generic.List{`0})~SpatialSlur.Collections.ListView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:SpatialSlur.Collections.ListView`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.Enumerator.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the given index with respect to this view.
            Note that this does not perform an additional bounds check.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Collections.ListView`1.IsValid">
            <summary>
            Returns true if the view is still valid.
            Changes to the underlying list might invalidate a view.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.Subview(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.AsReadOnly">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ListView`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.PriorityQueue`2">
            <summary>
            Simple heap-based implementation of a min priority queue.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.GetChildren(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.GetParent(System.Int32)">
            <summary>
            
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:SpatialSlur.Collections.PriorityQueue`2.Count">
            <summary>
            Returns the number of elements in the queue.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.PriorityQueue`2.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.PriorityQueue`2.IsEmpty">
            <summary>
            Returns true if no elements in the queue.
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.PriorityQueue`2.Min">
            <summary>
            Returns the minimum element in the queue.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.Duplicate">
            <summary>
            Note that this perfoms a shallow copy elements in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.RemoveMin">
            <summary>
            Removes the minimum element from the queue and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.ReplaceMin(`0,`1)">
            <summary>
            Removes the minimum element from the queue by replacing it with the given item.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.Sink(System.Int32)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.Insert(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.Swim(System.Int32)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.HasPriority(System.Int32,System.Int32)">
            <summary>
            Returns true if item i has priority over item j.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.PriorityQueue`2.TrimExcess">
            <summary>
            Reduces the size of the internal array.
            </summary>
        </member>
        <member name="T:SpatialSlur.Collections.ProbabilitySelector">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ProbabilitySelector.BinarySearch(System.Double[],System.Double)">
            <summary>
            Returns the index of the first element larger than the given value.
            If all elements are smaller than the given value, returns the length of the array.
            </summary>
            <param name="values"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ProbabilitySelector.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Random)">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <param name="random"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ProbabilitySelector.#ctor(System.Double[],System.Random)">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <param name="random"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ProbabilitySelector.SetWeights(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            
            </summary>
            <param name="weights"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ProbabilitySelector.NormalizeWeights">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ProbabilitySelector.Next">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ReadOnlyArrayView">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView.Create``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ReadOnlyArrayView`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView`1.op_Implicit(`0[])~SpatialSlur.Collections.ReadOnlyArrayView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView`1.op_Implicit(SpatialSlur.Collections.ArrayView{`0})~SpatialSlur.Collections.ReadOnlyArrayView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyArrayView`1.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyArrayView`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyArrayView`1.Item(System.Int32)">
            <summary>
            Gets the element at the given index with respect to this view.
            Note that this does not perform an additional bounds check.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyArrayView`1.HasSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView`1.Action(System.Action{`0},System.Boolean)">
            <summary>
            Performs an action over this view.
            </summary>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView`1.Subview(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyArrayView`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ReadOnlyListView">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyListView.Create``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.ReadOnlyListView`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyListView`1.op_Implicit(System.Collections.Generic.List{`0})~SpatialSlur.Collections.ReadOnlyListView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyListView`1.op_Implicit(SpatialSlur.Collections.ListView{`0})~SpatialSlur.Collections.ReadOnlyListView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyListView`1.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyListView`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyListView`1.Item(System.Int32)">
            <summary>
            Gets the element at the given index with respect to this view.
            Note that this does not perform an additional bounds check.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyListView`1.HasSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Collections.ReadOnlyListView`1.IsValid">
            <summary>
            Returns true if the view is still valid.
            Changes to the underlying list might invalidate a view.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyListView`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyListView`1.Subview(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.ReadOnlyListView`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.UniformPartitioner">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.UniformPartitioner.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:SpatialSlur.Collections.UniformPartitioner.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="count"></param>
        </member>
        <member name="P:SpatialSlur.Collections.UniformPartitioner.Item(System.Int32)">
            <summary>
            Returns the partition at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Collections.UniformPartitioner.Count">
            <summary>
            Returns the number of partitions.
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.UniformPartitioner.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Collections.IEnumerableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Collections.IEnumerableExtensions.Mean(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <param name="vectors"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.IEnumerableExtensions.Mean(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.IEnumerableExtensions.ToHeGraph(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Double,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="tolerance"></param>
            <param name="allowMultiEdges"></param>
            <param name="allowLoops"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Collections.IEnumerableExtensions.ToHeMesh(System.Collections.Generic.IEnumerable{Rhino.Geometry.Polyline},System.Double)">
            <summary>
            
            </summary>
            <param name="polylines"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Matrix">
            <summary>
            
            </summary>
            <summary>
            Contains common operations for n-dimensional matrices
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetCovariance(System.Collections.Generic.IEnumerable{System.Double[]},System.Double[])">
            <summary>
            Returns the entries of the covariance matrix in row-major order.
            </summary>
            <param name="vectors"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Matrix.GetCovariance(System.Collections.Generic.IEnumerable{System.Double[]},System.Double[],System.Double[])">
            <summary>
            Returns the entries of the covariance matrix in row-major order.
            </summary>
            <param name="vectors"></param>
            <param name="mean"></param>
            <param name="result"></param>
        </member>
        <member name="T:SpatialSlur.Matrix.Parallel">
            <summary>
            Contains parallel implementations
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Abs(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Max(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Min(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Divide(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + m1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + m1 * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 * t0 + m1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 * t0 + m1 * t1
            Note that t0 and t1 are assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + (m1 - m2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + (m1 - m2) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.LerpColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + (m1 - m0) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.UnitizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.NormalizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.EvaluateColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.RemapColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Interval2d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Abs(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Max(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Min(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Divide(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + m1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + m1 * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 * t0 + m1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 * t0 + m1 * t1
            Note that t0 and t1 are assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + (m1 - m2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + (m1 - m2) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.LerpColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + (m1 - m0) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.UnitizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.NormalizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.EvaluateColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Parallel.RemapColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Interval3d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnMax(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnMin(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnSum(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnMean(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ApproxEquals(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Abs(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Max(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Min(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Divide(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + m1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + m1 * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 * t0 + m1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 * t0 + m1 * t1
            Note that t0 and t1 are assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + (m1 - m2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + (m1 - m2) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.LerpColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            result = m0 + (m1 - m0) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.UnitizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.NormalizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.EvaluateColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.RemapColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Interval2d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector2d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnMax(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnMin(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnSum(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ColumnMean(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.ApproxEquals(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Abs(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Max(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Min(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Add(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Divide(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            Note that the given vector is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + m1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + m1 * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 * t0 + m1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 * t0 + m1 * t1
            Note that t0 and t1 are assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + (m1 - m2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + (m1 - m2) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},System.Double,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.LerpColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            result = m0 + (m1 - m0) * t
            Note that t is assumed to represent the diagonal elements of a square matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.UnitizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.NormalizeColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.EvaluateColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.RemapColumns(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Interval3d,SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetVertexIncidence``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Double[])">
            <summary>
            Returns the entries of the incidence matrix in row-major order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix.GetVertexAdjacency``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Double[])">
            <summary>
            Returns the entries of the adjacency matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix.GetVertexLaplacian``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Double[])">
            <summary>
            Returns the entries of the Laplacian matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetVertexLaplacian``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Func{``1,System.Double},System.Double[])">
            <summary>
            Returns the entries of the Laplacian matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetVertexLaplacian``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Func{``1,System.Double},System.Func{``0,System.Double},System.Double[])">
            <summary>
            Returns the entries of the Laplacian matrix in row-major order.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetVertexLaplacianSymmetric``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Func{``1,System.Double},System.Func{``0,System.Double},System.Double[])">
            <summary>
            Returns the entries of the Laplacian matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetFaceIncidence``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Double[])">
            <summary>
            Returns the entries of the incidence matrix in row-major order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix.GetFaceAdjacency``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Double[])">
            <summary>
            Returns the entries of the adjacency matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix.GetFaceLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Double[])">
            <summary>
            Returns the entries of the Laplacian matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix.GetFaceLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Func{``1,System.Double},System.Double[])">
            <summary>
            Returns the entries of the Laplacian matrix.
            </summary>
        </member>
        <member name="T:SpatialSlur.Vector">
            <summary>
            Contains common operations for n-dimensional vectors
            </summary>
        </member>
        <member name="T:SpatialSlur.Vector.Parallel">
            <summary>
            Contains parallel implementations
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Max(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Min(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Abs(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Sqrt(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Normalize(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Intervald,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Evaluate(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Intervald,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Remap(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Intervald,SpatialSlur.Intervald,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Project(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Reject(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Reflect(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Unitize(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Max(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Min(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Abs(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Sqrt(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Normalize(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Intervalf,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Evaluate(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Intervalf,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Remap(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Intervalf,SpatialSlur.Intervalf,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Project(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Reject(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Reflect(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Parallel.Unitize(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Max(SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Min(SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Sum(SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Sum(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Mean(SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Mean(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.ApproxEquals(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.ApproxEquals(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Max(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Min(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Abs(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Sqrt(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + (v1 - x) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},System.Double,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Normalize(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Intervald,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Evaluate(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Intervald,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Remap(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Intervald,SpatialSlur.Intervald,SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Dot(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AbsDot(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Project(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Reject(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Reflect(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.NormL1(SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            Returns the L1 or Manhattan length of the given vector.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.NormL2(SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            Returns the L2 or Euclidean length of the given vector.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.DistanceL1(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.DistanceL2(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.SquareDistanceL2(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Unitize(SpatialSlur.Collections.ReadOnlyArrayView{System.Double},SpatialSlur.Collections.ArrayView{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Max(SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Min(SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Sum(SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Sum(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Mean(SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Mean(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.ApproxEquals(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.ApproxEquals(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Max(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Min(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Abs(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Sqrt(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Add(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Subtract(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Multiply(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.MultiplyPointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.DividePointwise(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + v1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaled(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 * t0 + v1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + (v1 - x) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AddScaledDelta(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            result = v0 + (v1 - v2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},System.Single,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Lerp(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Normalize(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Intervalf,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Evaluate(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Intervalf,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Remap(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Intervalf,SpatialSlur.Intervalf,SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Dot(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.AbsDot(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Project(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Reject(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Reflect(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.MatchProjection(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.NormL1(SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            Returns the L1 or Manhattan length of the given vector.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.NormL2(SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            Returns the L2 or Euclidean length of the given vector.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.DistanceL1(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.DistanceL2(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.SquareDistanceL2(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ReadOnlyArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector.Unitize(SpatialSlur.Collections.ReadOnlyArrayView{System.Single},SpatialSlur.Collections.ArrayView{System.Single})">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Vector3f">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Vector3f.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3f.UnitX">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3f.UnitY">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3f.UnitZ">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(SpatialSlur.Vector3f)~System.String">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(SpatialSlur.Vector3i)~SpatialSlur.Vector3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Addition(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Subtraction(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_UnaryNegation(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Multiply(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Multiply(System.Single,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Multiply(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Component-wise multiplication.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Division(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Division(System.Single,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Division(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Component-wise division.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Max(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Max(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Min(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Min(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Abs(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Floor(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Ceiling(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Round(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Fract(SpatialSlur.Vector3f,SpatialSlur.Vector3i@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="whole"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Dot(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.AbsDot(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Cross(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.ScalarTriple(SpatialSlur.Vector3f,SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the box product or scalar triple product of the given vectors (i.e. u x v . w)
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.VectorTriple(SpatialSlur.Vector3f,SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the vector triple product of the given vectors (i.e. u x v x w)
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Angle(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the minimum angle between two vectors.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.SignedAngle(SpatialSlur.Vector3f,SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the signed angle between two vectors.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Cotangent(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the cotangent of the angle between 2 vectors as per http://www.cs.columbia.edu/~keenan/Projects/Other/TriangleAreasCheatSheet.pdf.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Project(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the projection of v0 onto v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Reject(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the rejection of v0 onto v1.
            This is the perpendicular component of v0 with respect to v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Reflect(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns the reflection of v0 about v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.MatchProjection(SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns a vector parallel to v0 whos projection onto v1 equals v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.MatchProjection(SpatialSlur.Vector3f,SpatialSlur.Vector3f,SpatialSlur.Vector3f)">
            <summary>
            Returns a vector parallel to v0 whose projection onto v2 equals the projection of v1 onto v2
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Lerp(SpatialSlur.Vector3f,SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Slerp(SpatialSlur.Vector3f,SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Slerp(SpatialSlur.Vector3f,SpatialSlur.Vector3f,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Vector3f.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3f.Y">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3f.Z">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector3f.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:SpatialSlur.Vector3f.Unit">
            <summary>
            Returns a unit length copy of this vector.
            Returns the zero vector if this vector is zero length.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3f.Length">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3f.SquareLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3f.ManhattanLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3f.ComponentSum">
            <summary>
            Returns the sum of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3f.ComponentMean">
            <summary>
            Returns the mean of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3f.ComponentMax">
            <summary>
            Returns the largest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3f.ComponentMin">
            <summary>
            Returns the smallest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3f.As3d">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3f.As3i">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3f.As4d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.IsZero(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3f.IsUnit(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3f.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector3f.Set(System.Single)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.Set(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.ToSpherical">
            <summary>
            Converts from euclidean to spherical coordiantes.
            (x,y,z) = (radius, azimuth, polar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.ToEuclidean">
            <summary>
            Converts from spherical to euclidean coordiantes.
            (x,y,z) = (radius, azimuth, polar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.ApproxEquals(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.DistanceTo(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.SquareDistanceTo(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.ManhattanDistanceTo(SpatialSlur.Vector3f)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.Unitize">
            <summary>
            Unitizes the vector in place.
            Returns false if the vector is zero length.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3f.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3f.LerpTo(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.SlerpTo(SpatialSlur.Vector3f,System.Single)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.SlerpTo(SpatialSlur.Vector3f,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.CrossX">
            <summary>
            Returns the cross product of this vector vector with the x Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.CrossY">
            <summary>
            Returns the cross product of this vector with the Y Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.CrossZ">
            <summary>
            Returns the cross product of this vector with the Y Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3f.ToArray(System.Single[])">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.Deconstruct(System.Single@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(Rhino.Geometry.Vector3f)~SpatialSlur.Vector3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(SpatialSlur.Vector3f)~Rhino.Geometry.Vector3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(Rhino.Geometry.Point3f)~SpatialSlur.Vector3f">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(SpatialSlur.Vector3f)~Rhino.Geometry.Point3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Explicit(Rhino.Geometry.Vector3d)~SpatialSlur.Vector3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(SpatialSlur.Vector3f)~Rhino.Geometry.Vector3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Explicit(Rhino.Geometry.Point3d)~SpatialSlur.Vector3f">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Vector3f.op_Implicit(SpatialSlur.Vector3f)~Rhino.Geometry.Point3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="T:SpatialSlur.Dynamics.Body">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Dynamics.Body.Position">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Dynamics.Body.Rotation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Body.#ctor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Body.#ctor(SpatialSlur.Vector3d,SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Body.#ctor(SpatialSlur.Dynamics.BodyPosition,SpatialSlur.Dynamics.BodyRotation)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Body.#ctor(SpatialSlur.Dynamics.Body)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Body.Duplicate">
            <summary>
            Returns a deep copy of this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Dynamics.Body.Deconstruct(SpatialSlur.Dynamics.BodyPosition@,SpatialSlur.Dynamics.BodyRotation@)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="rotation"></param>
        </member>
        <member name="T:SpatialSlur.Dynamics.BodyPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Dynamics.BodyPosition.Current">
            <summary>The current position of this body</summary>
        </member>
        <member name="F:SpatialSlur.Dynamics.BodyPosition.Velocity">
            <summary>The velocity of this body</summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.#ctor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.#ctor(SpatialSlur.Dynamics.BodyPosition)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.Duplicate">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Dynamics.BodyPosition.Mass">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.AddForce(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.AddDelta(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="delta"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.Clear">
            <summary>
            Clears all deltas and forces applied to the position of this body.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyPosition.Update(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="timeStep"></param>
            <param name="damping"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.BodyRotation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Dynamics.BodyRotation.Current">
            <summary>The current rotation of this body</summary>
        </member>
        <member name="F:SpatialSlur.Dynamics.BodyRotation.Velocity">
            <summary>The rotational velocity of this body</summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.#ctor(SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.#ctor(SpatialSlur.Dynamics.BodyRotation)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.Duplicate">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Dynamics.BodyRotation.Inertia">
            <summary>
            Gets/sets the rotational mass of the body.
            Assumes the current rotation is aligned with the body's principal axes of inertia.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.AddTorque(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="torque"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.AddDelta(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="delta"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.Clear">
            <summary>
            Clears all deltas and torque applied to the rotation of this body.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.BodyRotation.Update(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="timeStep"></param>
            <param name="damping"></param>
        </member>
        <member name="T:SpatialSlur.Dynamics.ConstraintSolver">
            <summary>
            Projection based constraint solver for geometry optimization and form-finding based on method described in http://lgg.epfl.ch/publications/2012/shapeup/paper.pdf.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.#ctor(SpatialSlur.Dynamics.ConstraintSolverSettings)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolver.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolver.StepCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolver.IsConverged">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.Step(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.IConstraint},System.Boolean)">
            <summary>
            
            </summary>
            <param name="bodies"></param>
            <param name="constraints"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.ApplyConstraints(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.IConstraint})">
            <summary>
            
            </summary>
            <param name="bodies"></param>
            <param name="constraints"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.ApplyConstraintsParallel(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.IConstraint})">
            <summary>
            
            </summary>
            <param name="bodies"></param>
            <param name="constraints"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.UpdateBodies(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.ConstraintSolver.UpdateBodiesParallel(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Dynamics.ConstraintSolverSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolverSettings.LinearDamping">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolverSettings.AngularDamping">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolverSettings.LinearTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolverSettings.AngularTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.ConstraintSolverSettings.TimeStep">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.AbovePlane">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AbovePlane.#ctor(System.Int32,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.AbovePlane.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.AbovePlane.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.AbovePlane.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AbovePlane.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AbovePlane.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AbovePlane.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.AlignPair">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AlignPair.#ctor(System.Int32,System.Int32,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="target"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.AlignPair.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.AlignPair.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.AlignPair.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AlignPair.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AlignPair.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.AlignPair.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Angle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Angle.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Angle.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Angle.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Angle.Index3">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Angle.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Angle.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Angle.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Angle.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Cocircular">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Cocircular.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Cocircular.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Cocircular.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Coincident">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Coincident.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Coincident.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Coincident.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Colinear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Colinear.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Colinear.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Colinear.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Coplanar">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Coplanar.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Coplanar.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Coplanar.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Cospherical">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Cospherical.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Cospherical.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Cospherical.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.CyclicQuad">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.CyclicQuad.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.CyclicQuad.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.CyclicQuad.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.CyclicQuad.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.CyclicQuad.Index3">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.CyclicQuad.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.CyclicQuad.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.CyclicQuad.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.DihedralAngle">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.DihedralAngle.GetMinAngleDifference(System.Double,System.Double)">
            <summary>
            Assumes both angles are between 0 and 2PI
            </summary>
            <param name="a0"></param>
            <param name="a1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.DihedralAngle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="left"></param>
            <param name="right"></param>
            <param name="target"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.DihedralAngle.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.DihedralAngle.End">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.DihedralAngle.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.DihedralAngle.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.DihedralAngle.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.DihedralAngle.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.DihedralAngle.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.DihedralAngle.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Distance">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Distance.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="target"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Distance.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Distance.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Distance.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Distance.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Distance.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Distance.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.EqualizeLengths">
            <summary>
            Each successive pair of handles represents a line segment.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.EqualizeLengths.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.EqualizeLengths.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.EqualizeLengths.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <param name="bodies"></param>
            <param name="indices"></param>
            <param name="deltas"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Constraint">
            <summary>
            Contains any implementation details common to ALL constraints.
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Constraint.Weight">
            <inheritdoc/>
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.PositionGroup">
            <summary>
            Base class for a constraint that acts on the positions of a collection of bodies.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionGroup.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionGroup.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PositionGroup.Indices">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionGroup.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionGroup.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionGroup.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionGroup.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.PositionPair">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionPair.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionPair.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PositionPair.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PositionPair.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionPair.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionPair.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},System.Int32,System.Int32,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionPair.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PositionPair.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.InsideBounds">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.InsideBounds.#ctor(System.Int32,SpatialSlur.Interval3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="bounds"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.InsideBounds.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.InsideBounds.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.InsideBounds.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.InsideBounds.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.InsideBounds.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.LaplacianSmooth">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.LaplacianSmooth.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.LaplacianSmooth.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.LaplacianSmooth.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.MinimizeArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeArea.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.MinimizeArea.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.MinimizeArea.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.MinimizeArea.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeArea.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeArea.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeArea.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.MinimizeDistance">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeDistance.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.MinimizeDistance.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.MinimizeDistance.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeDistance.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeDistance.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.MinimizeDistance.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnCircle">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnCircle.#ctor(System.Int32,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <param name="radius"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnCircle.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnCircle.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnCircle.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnCircle.Radius">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnCircle.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnCircle.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnCircle.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnCurve.#ctor(System.Int32,Rhino.Geometry.Curve,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="curve"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnCurve.GetClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnExtendedMesh">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnExtendedMesh.#ctor(System.Int32,Rhino.Geometry.Mesh,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="mesh"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnExtendedMesh.GetClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnExtendedSurface">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnExtendedSurface.#ctor(System.Int32,Rhino.Geometry.Surface,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="surface"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnExtendedSurface.GetClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnLine.#ctor(System.Int32,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="start"></param>
            <param name="direction"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnLine.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnLine.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnLine.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnLine.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnLine.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnLine.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnMesh">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnMesh.#ctor(System.Int32,Rhino.Geometry.Mesh,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="mesh"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnMesh.GetClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnPlane">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPlane.#ctor(System.Int32,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnPlane.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnPlane.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnPlane.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPlane.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPlane.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPlane.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPosition.#ctor(System.Int32,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="position"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnPosition.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnPosition.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPosition.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPosition.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnPosition.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnRotation">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnRotation.#ctor(System.Int32,SpatialSlur.Quaterniond,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="target"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnRotation.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnRotation.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnRotation.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnRotation.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnRotation.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnSphere">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnSphere.#ctor(System.Int32,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="origin"></param>
            <param name="radius"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnSphere.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnSphere.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnSphere.Radius">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnSphere.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnSphere.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnSphere.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnSurface">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnSurface.#ctor(System.Int32,Rhino.Geometry.Surface,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="surface"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnSurface.GetClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OnTarget`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnTarget`1.#ctor(System.Int32,`0,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="target"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnTarget`1.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OnTarget`1.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnTarget`1.GetClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            Returns the point on the target object that is closest to the given point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnTarget`1.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnTarget`1.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OnTarget`1.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.OutsideSphere">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OutsideSphere.#ctor(System.Int32,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="origin"></param>
            <param name="radius"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OutsideSphere.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OutsideSphere.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.OutsideSphere.Radius">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OutsideSphere.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OutsideSphere.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.OutsideSphere.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.PlanarQuad">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PlanarQuad.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PlanarQuad.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PlanarQuad.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PlanarQuad.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.PlanarQuad.Index3">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PlanarQuad.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PlanarQuad.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.PlanarQuad.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.RelativeRotation">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativeRotation.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.RelativeRotation.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.RelativeRotation.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativeRotation.SetTargets(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativeRotation.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativeRotation.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativeRotation.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.RelativePosition">
            <summary>
            Constrains relative orientation between a pair of bodies.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativePosition.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.RelativePosition.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.RelativePosition.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativePosition.Set(SpatialSlur.Vector3d,SpatialSlur.Quaterniond,SpatialSlur.Vector3d,SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativePosition.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativePosition.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.RelativePosition.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.TangentialQuad">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialQuad.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.TangentialQuad.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.TangentialQuad.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.TangentialQuad.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.TangentialQuad.Index3">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialQuad.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialQuad.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialQuad.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.TangentialSmooth">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialSmooth.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialSmooth.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialSmooth.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.TangentialSmooth.GetNormal(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Vector3d@)">
            <summary>
            Calculates the normal as the sum of triangle area gradients with respect to the first body.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Translation">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Translation.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Translation.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Translation.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Translation.SetTargets(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Translation.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Translation.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Translation.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Constraints.Trapezoid">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Trapezoid.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
            <param name="weight"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Trapezoid.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Trapezoid.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Trapezoid.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Constraints.Trapezoid.Index3">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Trapezoid.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Trapezoid.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Constraints.Trapezoid.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.AreaWeight">
            <summary>
            Applies a force proportional to the area of the triangle defined by 3 particles.
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.AreaWeight.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.AreaWeight.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.AreaWeight.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.AreaWeight.Acceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.AreaWeight.MassPerArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.AreaWeight.#ctor(System.Int32,System.Int32,System.Int32,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="acceleration"></param>
            <param name="massPerArea"></param>
            <param name="strength"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.AreaWeight.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.AreaWeight.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.AreaWeight.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.FalseWeight">
            <summary>
            Applies a force proportional to the mass defined on each handle.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.FalseWeight.#ctor(System.Int32,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="acceleration"></param>
            <param name="mass"></param>
            <param name="strength"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.FalseWeight.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.FalseWeight.Acceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.FalseWeight.Mass">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.FalseWeight.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.FalseWeight.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.FalseWeight.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.ForceField">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.ForceField.#ctor(System.Int32,SpatialSlur.Fields.IField3d{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="field"></param>
            <param name="strength"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.ForceField.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.ForceField.Field">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.ForceField.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.ForceField.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.ForceField.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.Force">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.Force.Strength">
            <inheritdoc/>
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.PositionGroup">
            <summary>
            Base class for a force that acts on the positions of a collection of bodies.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.PositionGroup.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="strength"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.PositionGroup.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="strength"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.PositionGroup.Indices">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.PositionGroup.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.PositionGroup.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.PositionGroup.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.PositionGroup.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.LinearWeight">
            <summary>
            Applies a force proportional to the distance between 2 particles.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.LinearWeight.#ctor(System.Int32,System.Int32,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="acceleration"></param>
            <param name="massPerLength"></param>
            <param name="strength"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.LinearWeight.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.LinearWeight.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.LinearWeight.Acceleration">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.LinearWeight.MassPerLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.LinearWeight.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.LinearWeight.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.LinearWeight.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.Pressure">
            <summary>
            Applies a force along the normal of the triangle between 3 particles with a magnitude proportional to the area.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Pressure.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="strength"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.Pressure.Index0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.Pressure.Index1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.Pressure.Index2">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Pressure.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Pressure.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Pressure.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.SphereCollide">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.SphereCollide.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="radius"></param>
            <param name="strength"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.SphereCollide.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="radius"></param>
            <param name="strength"></param>
            <param name="parallel"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.SphereCollide.Radius">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.SphereCollide.Parallel">
            <summary>
            If true, this constraint is calculated in parallel.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.SphereCollide.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.SphereCollide.CalculateImpl(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body},SpatialSlur.Collections.ReadOnlyArrayView{System.Int32},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Dynamics.Forces.Weight">
            <summary>
            Applies a force proportional to the mass of each particle.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Weight.#ctor(System.Int32,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="acceleration"></param>
            <param name="strength"></param>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.Weight.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.Forces.Weight.Acceleration">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Weight.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Weight.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Dynamics.Forces.Weight.GetEnergy(System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Dynamics.IConstraint">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.IConstraint.Indices">
            <summary>
            Gets or sets the indices of the bodies affected by this constraint.
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.IConstraint.AffectsPosition">
            <summary>
            Returns true if this constraint affects a body's position.
            </summary>
        </member>
        <member name="P:SpatialSlur.Dynamics.IConstraint.AffectsRotation">
            <summary>
            Returns true if this constraint affects a body's rotation.
            </summary>
        </member>
        <member name="M:SpatialSlur.Dynamics.IConstraint.Calculate(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <summary>
            Calculates all forces and projections associated with this constraint.
            </summary>
            <param name="bodies"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.IConstraint.Apply(SpatialSlur.Collections.ReadOnlyArrayView{SpatialSlur.Dynamics.Body})">
            <summary>
            Applies calculated forces and projections to the affected bodies.
            </summary>
            <param name="bodies"></param>
        </member>
        <member name="M:SpatialSlur.Dynamics.IConstraint.GetEnergy(System.Double@,System.Double@)">
            <summary>
            Returns the energy that this constraint is trying to minimize.
            The constraint is satisfied when this equals zero.
            </summary>
        </member>
        <member name="T:SpatialSlur.IEnumerableExtensions">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.AreSatisfied``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="constraints"></param>
            <param name="linearTolerance"></param>
            <param name="angularTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.GetEnergySum``1(System.Collections.Generic.IEnumerable{``0},System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="constraints"></param>
            <param name="linear"></param>
            <param name="angular"></param>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.IndicesWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},``0[]@)">
            <summary>
            Moves source elements into the given array.
            This array is expanded as necessary to fit all source items.
            Returns the number of items in the source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="array"></param>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0})">
            <summary>
            Moves source elements into the given list.
            This list is expanded as necessary to fit all source items.
            Returns the number of items in the source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.ToRefList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.ToRefList``1(System.Collections.Generic.IEnumerable{``0},SpatialSlur.Collections.RefList{``0})">
            <summary>
            Moves source elements into the given list.
            This list is expanded as necessary to fit all source items.
            Returns the number of items in the source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.SelectMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="source"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.SelectMin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.SelectMin``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.SelectMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="source"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.SelectMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.SelectMax``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.WeightedSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.WeightedSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.WeightedSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.WeightedMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.WeightedMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector2d},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.WeightedMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,SpatialSlur.Vector3d},System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Normalize``1(System.Collections.Generic.IEnumerable{``0},SpatialSlur.Property{``0,System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.RemoveCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Double)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.RemoveCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},System.Collections.Generic.List{System.Int32}@,System.Double)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="indexMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.RemoveCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.RemoveCoincident(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.List{System.Int32}@,System.Double)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="indexMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Sum(System.Collections.Generic.IEnumerable{System.Double[]},System.Double[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IEnumerableExtensions.Mean(System.Collections.Generic.IEnumerable{System.Double[]},System.Double[])">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.AxisAngle3d">
            <summary>
            Axis angle representation of a 3 dimensional rotation.
            </summary>
        </member>
        <member name="F:SpatialSlur.AxisAngle3d.Identity">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.AxisAngle3d.HalfX">
            <summary>Describes a half rotation around the X axis</summary>
        </member>
        <member name="F:SpatialSlur.AxisAngle3d.HalfY">
            <summary>Describes a half rotation around the Y axis</summary>
        </member>
        <member name="F:SpatialSlur.AxisAngle3d.HalfZ">
            <summary>Describes a half rotation around the Z axis</summary>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.op_Multiply(SpatialSlur.AxisAngle3d,SpatialSlur.Vector3d)">
            <summary>
            Applies this rotation to the given vector.
            </summary>
            <param name="rotation"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.CreateFromTo(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.#ctor(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.#ctor(SpatialSlur.Vector3d)">
            <summary>
            The axis and angle of rotation are taken from the direction and length of the given vector respectively.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.#ctor(SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.#ctor(SpatialSlur.OrthoBasis3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="P:SpatialSlur.AxisAngle3d.Axis">
            <summary>
            Unit vector indicating the axis of rotation.
            </summary>
        </member>
        <member name="P:SpatialSlur.AxisAngle3d.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.AxisAngle3d.CosAngle">
            <summary>
            Returns the cached cosine of the angle
            </summary>
        </member>
        <member name="P:SpatialSlur.AxisAngle3d.SinAngle">
            <summary>
            Returns the cached sine of the angle
            </summary>
        </member>
        <member name="P:SpatialSlur.AxisAngle3d.Inverse">
            <summary>
            Returns the inverse of this rotation
            </summary>
        </member>
        <member name="P:SpatialSlur.AxisAngle3d.IsValid">
            <summary>
            Returns true if this rotation has a non-zero axis.
            </summary>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Set(SpatialSlur.Vector3d)">
            <summary>
            The axis and angle of rotation are taken from the direction and length of the given vector respectively.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Set(SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Set(SpatialSlur.OrthoBasis3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Set(SpatialSlur.OrthoBasis3d@)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Invert">
            <summary>
            Inverts this rotation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Apply(SpatialSlur.Vector3d)">
            <summary>
            Applies this rotation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.RotateAxis(SpatialSlur.AxisAngle3d)">
            <summary>
            Applies the given rotation to the axis of this rotation.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.RotateAxis(SpatialSlur.OrthoBasis3d@)">
            <summary>
            Applies the given rotation to the axis of this rotation.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.ApproxEquals(SpatialSlur.AxisAngle3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Deconstruct(SpatialSlur.Vector3d@,System.Double@)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="M:SpatialSlur.AxisAngle3d.Deconstruct(SpatialSlur.Vector3d@,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
            <param name="cosAngle"></param>
            <param name="sinAngle"></param>
        </member>
        <member name="T:SpatialSlur.ColorConversion">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ColorConversion.FromVector(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.ToVector(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SpatialSlur.ColorConversion.Normalize(System.Drawing.Color)">
            <summary>
            Components of the returned vector are between 0 and 1.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SpatialSlur.ColorConversion.LCHtoRGB(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.LABtoRGB(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.LCHtoLAB(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.LABtoXYZ(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.XYZtoRGB(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.RGBtoLCH(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.RGBtoLAB(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.RGBtoXYZ(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.XYZtoLAB(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ColorConversion.LABtoLCH(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Interop">
            <summary>
            Static methods for importing from and exporting to external formats.
            </summary>
            <summary>
            Static methods for importing from and exporting to external formats.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.SerializeBinary``1(``0,System.String)">
            <summary>
            Binary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="path"></param>
        </member>
        <member name="M:SpatialSlur.Interop.DeserializeBinary(System.String)">
            <summary>
            Binary deserialization
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interop.DeserializeBinary``1(System.String)">
            <summary>
            Binary deserialization
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interop.SerializeJson``1(``0,System.String)">
            <summary>
            Json serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="path"></param>
        </member>
        <member name="M:SpatialSlur.Interop.DeserializeJson``1(System.String)">
            <summary>
            Json deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Interop.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.SaveAsImageStack``1(SpatialSlur.Fields.GridField3d{``0},System.String,System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="path"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.SaveAsImage``1(SpatialSlur.Fields.GridField2d{``0},System.String,System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="path"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.ReadFromImageStack``1(System.Collections.Generic.IEnumerable{System.Drawing.Bitmap},SpatialSlur.Fields.GridField3d{``0},System.Func{System.Drawing.Color,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="images"></param>
            <param name="field"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.ReadFromImage``1(System.Drawing.Bitmap,SpatialSlur.Fields.GridField3d{``0},System.Int32,System.Func{System.Drawing.Color,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="layer"></param>
            <param name="mapper"></param>
            <param name="image"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.ReadFromImage``1(System.Drawing.Bitmap,SpatialSlur.Fields.GridField2d{``0},System.Func{System.Drawing.Color,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="mapper"></param>
            <param name="image"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.WriteToImage``1(SpatialSlur.Fields.GridField3d{``0},System.Int32,System.Drawing.Bitmap,System.Func{``0,System.Drawing.Color})">
            <summary>
            Writes a layer of the given field to an existing image.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="layer"></param>
            <param name="mapper"></param>
            <param name="image"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.WriteToImage``1(SpatialSlur.Fields.GridField2d{``0},System.Drawing.Bitmap,System.Func{``0,System.Drawing.Color})">
            <summary>
            Writes the given field to an existing image.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="mapper"></param>
            <param name="image"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.ReadFromImage``1(System.Drawing.Bitmap,``0[],System.Int32,System.Func{System.Drawing.Color,``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.WriteToImage``1(``0[],System.Int32,System.Drawing.Bitmap,System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Fields.PixelFormatCheck(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Interop.Meshes">
            <summary>
            Static methods for importing from and exporting to external formats.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.WriteToObj``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.String,System.Func{``0,SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
            <param name="mesh"></param>
            <param name="path"></param>
            <param name="getTexture"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.WriteToObj``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.String,System.Func{``0,SpatialSlur.Vector3d},System.Func{``0,SpatialSlur.Vector3d},System.Func{``0,SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
            <param name="mesh"></param>
            <param name="path"></param>
            <param name="getPosition"></param>
            <param name="getNormal"></param>
            <param name="getTexture"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.ReadFromObj``3(System.String,SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{``0,SpatialSlur.Vector3d})">
            <summary>
            Implementation currently ignores texture coordinates and normals.
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
            <param name="path"></param>
            <param name="mesh"></param>
            <param name="setPosition"></param>
        </member>
        <member name="T:SpatialSlur.Interop.Meshes.ObjUtil">
            <summary>
            Consts used in reading and writing .obj files
            </summary>
        </member>
        <member name="T:SpatialSlur.Interop.Meshes.HeGraphJsonBuffer`2">
            <summary>
            Json serializable representation of a halfedge graph.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.HeGraphJsonBuffer`2.WriteFrom``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Func{``0,`0},System.Func{``1,`1})">
            <summary>
            Writes the given graph to this buffer.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.HeGraphJsonBuffer`2.ReadTo``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Action{``0,`0},System.Action{``1,`1})">
            <summary>
            Reads this buffer to the given graph.
            </summary>
        </member>
        <member name="T:SpatialSlur.Interop.Meshes.HeMeshJsonBuffer`3">
            <summary>
            JSON serializable representation of a halfedge mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.HeMeshJsonBuffer`3.WriteFrom``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,`0},System.Func{``1,`1},System.Func{``2,`2})">
            <summary>
            Writes the given mesh to this buffer.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.HeMeshJsonBuffer`3.ReadTo``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{``0,`0},System.Action{``1,`1},System.Action{``2,`2})">
            <summary>
            Reads this buffer to the given mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.WriteToJson``4(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.String,System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="VA"></typeparam>
            <typeparam name="EA"></typeparam>
            <param name="graph"></param>
            <param name="path"></param>
            <param name="getVertexAttributes"></param>
            <param name="getHedgeAttributes"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.ReadFromJson``4(System.String,SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Action{``0,``2},System.Action{``1,``3})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="graph"></param>
            <param name="setVertexAttributes"></param>
            <param name="setHedgeAttributes"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.WriteToJson``6(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.String,System.Func{``0,``3},System.Func{``1,``4},System.Func{``2,``5})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="VA"></typeparam>
            <typeparam name="EA"></typeparam>
            <typeparam name="FA"></typeparam>
            <param name="mesh"></param>
            <param name="path"></param>
            <param name="getVertexAttributes"></param>
            <param name="getHedgeAttributes"></param>
            <param name="getFaceAttributes"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.ReadFromJson``6(System.String,SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{``0,``3},System.Action{``1,``4},System.Action{``2,``5})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="VA"></typeparam>
            <typeparam name="EA"></typeparam>
            <typeparam name="FA"></typeparam>
            <param name="path"></param>
            <param name="mesh"></param>
            <param name="setVertexAttributes"></param>
            <param name="setHedgeAttributes"></param>
            <param name="setFaceAttributes"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.WriteToJson(SpatialSlur.Meshes.HeGraph3d,System.String)">
            <summary>
            
            </summary>
            <param name="graph"></param>
            <param name="path"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.ReadFromJson(System.String,SpatialSlur.Meshes.HeGraph3d)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="graph"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.WriteToJson(SpatialSlur.Meshes.HeMesh3d,System.String)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="path"></param>
        </member>
        <member name="M:SpatialSlur.Interop.Meshes.ReadFromJson(System.String,SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="mesh"></param>
        </member>
        <member name="T:SpatialSlur.Utilities">
            <summary>
            Static class for stray methods that don't yet fit anywhere else (boo).
            </summary>
        </member>
        <member name="M:SpatialSlur.Utilities.Swap``1(``0@,``0@)">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Utilities.BoundsCheck(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="T:SpatialSlur.ArrayExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Clear``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ShallowCopy``1(``0[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Set``1(``0[],``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Set``1(``0[],``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Set``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Assumes the length of the array is less than or equal to the number of elements in the given sequence.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ClearRange``1(``0[],System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ClearRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetRange``1(``0[],``0,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetRange``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetRange``1(``0[],``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetRange``1(``0[],``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetRange``1(``0[],System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Assumes the specified range is less than or equal to the number of items in the given sequence.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetSelection``1(``0[],``0,System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetSelection``1(``0[],``0,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.SetSelection``1(``0[],``0[],System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.GetRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.GetRange``1(``0[],System.Int32,System.Int32,``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.GetSelection``1(``0[],System.Int32[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.GetSelection``1(``0[],System.Int32[],``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Action``1(``0[],System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Convert``2(``0[],System.Func{``0,``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Convert``2(``0[],System.Func{``0,``1},``1[],System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ActionRange``1(``0[],System.Int32,System.Int32,System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ConvertRange``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ConvertRange``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},``1[],System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ActionSelection``1(``0[],System.Int32[],System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ConvertSelection``2(``0[],System.Int32[],System.Func{``0,``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.ConvertSelection``2(``0[],System.Int32[],System.Func{``0,``1},``1[],System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.TakeRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.TakeSelection``1(``0[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.TakeEveryNth``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.TakeEveryNth``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps a pair of elements.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shuffle``1(``0[])">
            <summary>
            Shuffles an array of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shuffle``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shuffle``1(``0[],System.Random)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shuffle``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shuffle``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shuffle``1(``0[],System.Random,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shift``1(``0[],System.Int32)">
            <summary>
            Shifts an array of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Shift``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts a subset of an array of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Reverse``1(``0[])">
            <summary>
            Reverses an array of items in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Reverse``1(``0[],System.Int32,System.Int32)">
            <summary>
            Reverses the order of the items within the specified range in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Equivalent of List.FindIndex for arrays.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Equivalent of List.FindIndex for arrays.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Swim``1(``0[],System.Predicate{``0})">
            <summary>
            Moves elements for which the given predicate returns true to the front of the list.
            Returns the index after the last used element.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``1(``0[],System.Int32)">
            <summary>
            Returns the nth smallest item in linear amortized time.
            Partially sorts the array with respect to the nth item such that items to the left are less than or equal and items to the right are greater than or equal.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Partition``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``1(``0[],System.Int32,System.Comparison{``0})">
            <summary>
            Returns the nth smallest item in linear amortized time.
            Partially sorts the array with respect to the nth item such that items to the left are less than or equal and items to the right are greater than or equal.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``1(``0[],System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``1(``0[],System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``1(``0[],System.Int32,System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Partition``1(``0[],System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``2(``0[],``1[],System.Int32)">
            <summary>
            Returns the nth smallest key in linear amortized time.
            Partially sorts the keys with respect to the nth item such that items to the left are less than or equal and items to the right are greater than or equal.
            Also partially sorts an array of corresponding values.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.QuickSelect``2(``0[],``1[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Partition``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.AsView``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.AsView``1(``0[],System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.AsView``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Batch``1(``0[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Allows enumeration over indexable segments of the given list.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Batch``1(SpatialSlur.Collections.ReadOnlyArrayView{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Allows enumeration over indexable segments of the given list.
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Lerp(System.Drawing.Color[],System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Lerp(System.Double[],System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Lerp(SpatialSlur.Vector2d[],System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Lerp(SpatialSlur.Vector3d[],System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ArrayExtensions.Lerp(System.Double[][],System.Double,System.Double[],System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.ColorExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ColorExtensions.LerpTo(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="other"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.GenericExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.GenericExtensions.Yield``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.IDictionaryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IDictionaryExtensions.Set``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Assigns the contents of another dictionary to this one.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
        </member>
        <member name="T:SpatialSlur.IReadOnlyListExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.GetRange``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.GetRange``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.GetRangeImpl``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.GetSelection``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.GetSelection``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.GetSelectionImpl``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Action``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Convert``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Convert``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},System.Collections.Generic.IList{``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ActionRange``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ConvertRange``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ConvertRange``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},System.Collections.Generic.IList{``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ConvertRangeImpl``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},System.Collections.Generic.IList{``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ActionSelection``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32},System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ConvertSelection``2(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32},System.Func{``0,``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ConvertSelection``2(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32},System.Func{``0,``1},System.Collections.Generic.IList{``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.ConvertSelectionImpl``2(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32},System.Func{``0,``1},System.Collections.Generic.IList{``1},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.TakeRange``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.TakeSelection``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.TakeEveryNth``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.TakeEveryNth``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Lerp(System.Collections.Generic.IReadOnlyList{System.Drawing.Color},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Lerp(System.Collections.Generic.IReadOnlyList{System.Double},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Lerp(System.Collections.Generic.IReadOnlyList{SpatialSlur.Vector2d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Lerp(System.Collections.Generic.IReadOnlyList{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.IReadOnlyListExtensions.Lerp(System.Collections.Generic.IReadOnlyList{System.Double[]},System.Double,System.Double[])">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.ListExtensions">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.Compact``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Moves true elements to the front of the list and removes remaining elements from the list.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.Fill``1(System.Collections.Generic.List{``0})">
            <summary>
            Fills list to capacity with the default value of T.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.Fill``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Fills list to capacity with the given value of T.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.FillTo``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Fills list to the specified count with the default value of T.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.FillTo``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Fills list to the specified count with the given value of T.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.AsView``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ListExtensions.AsView``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ListExtensions.AsView``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.ListExtensions.Batch``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Allows enumeration over indexable segments of the given list.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.Batch``1(SpatialSlur.Collections.ReadOnlyListView{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Allows enumeration over indexable segments of the given list.
            </summary>
        </member>
        <member name="M:SpatialSlur.ListExtensions.Add``1(System.Collections.Generic.List{SpatialSlur.Fields.IDWObject3d{``0}},SpatialSlur.Vector3d,``0,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objects"></param>
            <param name="point"></param>
            <param name="value"></param>
            <param name="influence"></param>
        </member>
        <member name="T:SpatialSlur.RandomExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextInterval(System.Random)">
            <summary>
            
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector2d(System.Random)">
            <summary>
            returns a random 2d vector with a 0.0 to 1.0 range in each dimension
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector2d(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random vector which has components within the given interval.
            </summary>
            <param name="random"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector2d(System.Random,SpatialSlur.Intervald)">
            <summary>
            Returns a random 2d vector which has components within the given interval
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector2d(System.Random,SpatialSlur.Interval2d)">
            <summary>
            Returns a random 2d vector which has components within the given interval
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector3d(System.Random)">
            <summary>
            returns a random vector with a 0.0 to 1.0 range in each dimension.
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector3d(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random vector which has components within the given interval.
            </summary>
            <param name="random"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector3d(System.Random,SpatialSlur.Intervald)">
            <summary>
            Returns a random vector which has components within the given interval.
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextVector3d(System.Random,SpatialSlur.Interval3d)">
            <summary>
            Returns a random vector which has components within the given interval.
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextMatrix3d(System.Random,SpatialSlur.Intervald)">
            <summary>
            Returns a random matrix which has components within the given interval.
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextMatrix3d(System.Random,SpatialSlur.Intervald,SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextMatrix4d(System.Random,SpatialSlur.Intervald)">
            <summary>
            Returns a random matrix which has components within the given interval.
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextMatrix4d(System.Random,SpatialSlur.Intervald,SpatialSlur.Matrix4d@)">
            <summary>
            
            </summary>
            <param name="random"></param>
            <param name="interval"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextItem``1(System.Random,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="random"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextItem``1(System.Random,System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="random"></param>
            <param name="items"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextItem``1(System.Random,``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="random"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextItem``1(System.Random,``0[],System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="random"></param>
            <param name="items"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.Next(System.Random,System.Int32)">
            <summary>
            
            </summary>
            <param name="random"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.RandomExtensions.NextDouble(System.Random,System.Int32)">
            <summary>
            
            </summary>
            <param name="random"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Geometry">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineClosestPoints(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double@,System.Double@)">
            <summary>
            Returns parameters for the closest pair of points between lines a and b.
            Returns false if the solution is not unique i.e. the given lines are parallel.
            </summary>
            <param name="startA"></param>
            <param name="endA"></param>
            <param name="startB"></param>
            <param name="endB"></param>
            <param name="ta"></param>
            <param name="tb"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineClosestPoints2(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="startA"></param>
            <param name="directionA"></param>
            <param name="startB"></param>
            <param name="directionB"></param>
            <param name="ta"></param>
            <param name="tb"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineShortestVector(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the shortest vector from line a to line b.
            </summary>
            <param name="startA"></param>
            <param name="endA"></param>
            <param name="startB"></param>
            <param name="endB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineShortestVector2(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="startA"></param>
            <param name="directionA"></param>
            <param name="startB"></param>
            <param name="directionB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineClosestPoints(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double@,System.Double@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Geometry.SolveSymmetric(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solves the given symmetric 2x2 system via Cramer's rule
            </summary>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineIntersection(SpatialSlur.Vector2d,SpatialSlur.Vector2d,SpatialSlur.Vector2d,SpatialSlur.Vector2d,System.Double@,System.Double@)">
            <summary>
            Returns paramters for the point of intersection between lines a and b.
            Returns false if there is no solution i.e. lines are parallel.
            </summary>
            <param name="startA"></param>
            <param name="endA"></param>
            <param name="startB"></param>
            <param name="endB"></param>
            <param name="ta"></param>
            <param name="tb"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineIntersection2(SpatialSlur.Vector2d,SpatialSlur.Vector2d,SpatialSlur.Vector2d,SpatialSlur.Vector2d,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="startA"></param>
            <param name="directionA"></param>
            <param name="startB"></param>
            <param name="directionB"></param>
            <param name="ta"></param>
            <param name="tb"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.LineLineIntersection(SpatialSlur.Vector2d,SpatialSlur.Vector2d,SpatialSlur.Vector2d,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="tu"></param>
            <param name="tv"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.LineSphereIntersect(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Single,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="direction"></param>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="near"></param>
            <param name="far"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.PlanePlaneIntersect(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="originA"></param>
            <param name="normalA"></param>
            <param name="originB"></param>
            <param name="normalB"></param>
            <param name="point"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.PrincipalComponentAnalysis(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            Returns 0 if the given points are coincident, 1 if they're colinear, 2 if they're coplanar, and 3 otherwise.
            </summary>
            <param name="points"></param>
            <param name="origin"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitPlaneToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            Returns true if a unique plane was found i.e. the given points are not coincident or colinear.
            </summary>
            <param name="points"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitPlaneToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            Returns true if a unique plane was found i.e. the given points are not coincident or colinear.
            </summary>
            <param name="points"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitLineToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="direction"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitLineToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            Returns true if a unique plane was found i.e. the given points are not coincident or colinear.
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="direction"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitSphereToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d@,System.Double@)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="origin"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitCircleToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},SpatialSlur.Vector2d@,System.Double@)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="origin"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.FitCircleToPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,System.Double@)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.ReflectInPlane(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.ProjectToPlane(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.ProjectToPlaneAlong(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Projects a vector to the given plane along the given direction.
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.ProjectToPlaneAlong(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Projects a point to the given plane along the given direction.
            </summary>
            <param name="point"></param>
            <param name="direction"></param>
            <param name="origin"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.Orthonormalize(SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <summary>
            Returns false if the 2 given vectors are parallel.
            The direction of the first vector is maintained.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.GetPolygonArea(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetPolygonArea(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="unitNormal"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetPlanarQuadArea(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the area of the planar quad defined by the given points.
            If the given points are not co-planar, this method returns the area of the quad when projected onto the plane defined by the cross product of its two diagonals.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetCurvatureCenter(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the center of the circle that passes through the 3 given points.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetCurvatureVector(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetCircumcenter(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetIncenter(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetPolarAngle(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the angle of the vector in the given basis.
            Assumes the given axes are orthonormal.
            </summary>
            <param name="vector"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetMinAngleDifference(System.Double,System.Double)">
            <summary>
            Returns the signed minimum difference between the two angles.
            </summary>
            <param name="a0"></param>
            <param name="a1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetBarycentric(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d@)">
            <summary>
            Returns the barycentric coordinates for the given point with respect to triangle a, b, c
            </summary>
            <param name="point"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.IsInTriangle(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetGradient(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double,System.Double,System.Double)">
            <summary>
            Returns the gradient of the vertex values of the given triangle
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t2"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.GetAreaGradient(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the area gradient of the given trianglue with respect to p0.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetAreaGradients(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <summary>
            Returns the area gradient of the given triangle with respect to each vertex
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="g0"></param>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetAspect(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the aspect ratio of the triangle defined by 3 given points.
            This is defined as the longest edge / shortest altitude.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetAspect(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the aspect ratio of the tetrahedra defined by 4 given points.
            This is defined as the longest edge / shortest altitude.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetDihedralAngle(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the signed angle between the left and right normals.
            </summary>
            <param name="unitAxis"></param>
            <param name="leftNormal"></param>
            <param name="rightNormal"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetPlanarity(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Calculates the planarity of the given quad as the shortest distance between the 2 diagonals over the mean diagonal length.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetGradient(System.Func{SpatialSlur.Vector2d,System.Double},SpatialSlur.Vector2d,System.Double)">
            <summary>
            Returns a numerical approximation of the gradient of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetGradient(System.Func{SpatialSlur.Vector3d,System.Double},SpatialSlur.Vector3d,System.Double)">
            <summary>
            Returns a numerical approximation of the gradient of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetGradient(System.Func{SpatialSlur.Vector4d,System.Double},SpatialSlur.Vector4d,System.Double)">
            <summary>
            Returns a numerical approximation of the gradient of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetGradient(System.Func{System.Double[],System.Double},System.Double[],System.Double[],System.Double)">
            <summary>
            Returns a numerical approximation of the gradient of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="result"></param>
            <param name="epsilon"></param>
        </member>
        <member name="M:SpatialSlur.Geometry.GetJacobian(System.Func{SpatialSlur.Vector2d,SpatialSlur.Vector2d},SpatialSlur.Vector2d,System.Double)">
            <summary>
            Returns a numerical approximation of the Jacobian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetJacobian(System.Func{SpatialSlur.Vector3d,SpatialSlur.Vector3d},SpatialSlur.Vector3d,System.Double)">
            <summary>
            Returns a numerical approximation of the Jacobian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetJacobian(System.Func{SpatialSlur.Vector4d,SpatialSlur.Vector4d},SpatialSlur.Vector4d,System.Double)">
            <summary>
            Returns a numerical approximation of the Jacobian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetHessian(System.Func{SpatialSlur.Vector2d,System.Double},SpatialSlur.Vector2d,System.Double)">
            <summary>
            Returns a numerical approximation of the Hessian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetHessian(System.Func{SpatialSlur.Vector3d,System.Double},SpatialSlur.Vector3d,System.Double)">
            <summary>
            Returns a numerical approximation of the Hessian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Geometry.GetHessian(System.Func{SpatialSlur.Vector4d,System.Double},SpatialSlur.Vector4d,System.Double)">
            <summary>
            Returns a numerical approximation of the Hessian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Interval2d">
            <summary>
            Represents a double precision interval in 2 dimensions.
            </summary>
        </member>
        <member name="F:SpatialSlur.Interval2d.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Interval2d.Unit">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Interval2d.op_Implicit(SpatialSlur.Interval2d)~System.String">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.op_Addition(SpatialSlur.Interval2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.op_Subtraction(SpatialSlur.Interval2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.op_Multiply(SpatialSlur.Interval2d,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.op_Multiply(System.Double,SpatialSlur.Interval2d)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.op_Division(SpatialSlur.Interval2d,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Remap(SpatialSlur.Vector2d,SpatialSlur.Interval2d,SpatialSlur.Interval2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Interval2d.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Interval2d.Y">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(SpatialSlur.Intervald,SpatialSlur.Intervald)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="ab"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="offset"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(SpatialSlur.Vector2d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="x1"></param>
            <param name="y0"></param>
            <param name="y1"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.#ctor(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="P:SpatialSlur.Interval2d.IsIncreasing">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.IsDecreasing">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.Delta">
            <summary>
            B - A
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.Sign">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Interval2d.Mid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.Area">
            <summary>
            Returns the area of the interval.
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval2d.As3d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Interval2d.ApproxEquals(SpatialSlur.Interval2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Evaluate(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Normalize(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Clamp(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Repeat(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Contains(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.ContainsIncl(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval2d.Translate(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.Expand(System.Double)">
            <summary>
            
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.Expand(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.Include(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.Include(SpatialSlur.Interval2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.Include(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:SpatialSlur.Interval2d.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval2d.MakeIncreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval2d.MakeDecreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval2d.Deconstruct(SpatialSlur.Intervald@,SpatialSlur.Intervald@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:SpatialSlur.Interval3d">
            <summary>
            Represents a double precision interval in 3 dimensions.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Interval3d.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Interval3d.Unit">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Implicit(SpatialSlur.Interval3d)~System.String">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Addition(SpatialSlur.Interval3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Subtraction(SpatialSlur.Interval3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Multiply(SpatialSlur.Interval3d,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Multiply(System.Double,SpatialSlur.Interval3d)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Division(SpatialSlur.Interval3d,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Remap(SpatialSlur.Vector3d,SpatialSlur.Interval3d,SpatialSlur.Interval3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Interval3d.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Interval3d.Y">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Interval3d.Z">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(SpatialSlur.Intervald,SpatialSlur.Intervald,SpatialSlur.Intervald)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="ab"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="offset"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(SpatialSlur.Vector3d,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <param name="offsetZ"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="x1"></param>
            <param name="y0"></param>
            <param name="y1"></param>
            <param name="z0"></param>
            <param name="z1"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.#ctor(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="P:SpatialSlur.Interval3d.XY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.IsIncreasing">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.IsDecreasing">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.A">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.Delta">
            <summary>
            B - A
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.Sign">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Interval3d.Mid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Interval3d.Area">
            <summary>
            Returns the area of the interval.
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval3d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Interval3d.ApproxEquals(SpatialSlur.Interval3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Evaluate(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Normalize(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Clamp(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Repeat(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Contains(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.ContainsIncl(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Interval3d.Translate(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.Expand(System.Double)">
            <summary>
            
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.Expand(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.Include(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.Include(SpatialSlur.Interval3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.Include(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval3d.MakeIncreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval3d.MakeDecreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Interval3d.Deconstruct(SpatialSlur.Intervald@,SpatialSlur.Intervald@,SpatialSlur.Intervald@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Implicit(Rhino.Geometry.BoundingBox)~SpatialSlur.Interval3d">
            <summary>
            
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:SpatialSlur.Interval3d.op_Implicit(SpatialSlur.Interval3d)~Rhino.Geometry.BoundingBox">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="T:SpatialSlur.Intervald">
            <summary>
            Represents a double precision interval.
            </summary>
            <summary>
            Represents a double precision interval.
            </summary>
        </member>
        <member name="F:SpatialSlur.Intervald.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Intervald.Unit">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Implicit(SpatialSlur.Intervald)~System.String">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Addition(SpatialSlur.Intervald,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Subtraction(SpatialSlur.Intervald,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Multiply(SpatialSlur.Intervald,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Multiply(System.Double,SpatialSlur.Intervald)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Division(SpatialSlur.Intervald,System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Remap(System.Double,SpatialSlur.Intervald,SpatialSlur.Intervald)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Intervald.A">
            <summary>The start of the interval</summary>
        </member>
        <member name="F:SpatialSlur.Intervald.B">
            <summary>The end of the interval</summary>
        </member>
        <member name="M:SpatialSlur.Intervald.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="ab"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:SpatialSlur.Intervald.IsIncreasing">
            <summary>
            Returns true if A is less than B.
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervald.IsDecreasing">
            <summary>
            Returns true if A is greater than B.
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervald.IsValid">
            <summary>
            Returns true if A equals B.
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervald.Delta">
            <summary>
            B - A
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervald.Sign">
            <summary>
            Returns positive if this interval is increasing, negative if it's decreasing, and zero if it's invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Intervald.Mid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervald.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervald.Max">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervald.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Intervald.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="ab"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.ApproxEquals(SpatialSlur.Intervald,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Evaluate(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Normalize(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Clamp(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Nearest(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Ramp(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.SmoothStep(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.SmootherStep(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Repeat(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.ContainsIncl(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervald.Scale(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Translate(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Expand(System.Double)">
            <summary>
            Expands the interval on both sides by the given value
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Include(System.Double)">
            <summary>
            Expands the interval to include the given value.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Include(SpatialSlur.Intervald)">
            <summary>
            Expands this interval to include another
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.IncludeNeg(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.IncludePos(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Include(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervald.MakeIncreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervald.MakeDecreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervald.Deconstruct(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Implicit(Rhino.Geometry.Interval)~SpatialSlur.Intervald">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:SpatialSlur.Intervald.op_Implicit(SpatialSlur.Intervald)~Rhino.Geometry.Interval">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="T:SpatialSlur.Intervalf">
            <summary>
            Represents a single precision interval.
            </summary>
        </member>
        <member name="F:SpatialSlur.Intervalf.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Intervalf.Unit">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Intervalf.op_Addition(SpatialSlur.Intervalf,System.Single)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.op_Subtraction(SpatialSlur.Intervalf,System.Single)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.op_Multiply(SpatialSlur.Intervalf,System.Single)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.op_Multiply(System.Single,SpatialSlur.Intervalf)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.op_Division(SpatialSlur.Intervalf,System.Single)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Remap(System.Single,SpatialSlur.Intervalf,SpatialSlur.Intervalf)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Intervalf.A">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Intervalf.B">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Intervalf.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="ab"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:SpatialSlur.Intervalf.IsIncreasing">
            <summary>
            Returns true if A is less than B.
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervalf.IsDecreasing">
            <summary>
            Returns true if A is greater than B.
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervalf.IsValid">
            <summary>
            Returns true if A equals B.
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervalf.Delta">
            <summary>
            B - A
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervalf.Sign">
            <summary>
            Returns positive if this interval is increasing, negative if it's decreasing, and zero if it's invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Intervalf.Mid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervalf.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Intervalf.Max">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervalf.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Intervalf.Set(System.Single)">
            <summary>
            
            </summary>
            <param name="ab"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Set(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.ApproxEquals(SpatialSlur.Intervalf,System.Single)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Evaluate(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Normalize(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Clamp(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Nearest(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Ramp(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.SmoothStep(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.SmootherStep(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Repeat(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Contains(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.ContainsIncl(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Intervalf.Scale(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Translate(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Expand(System.Single)">
            <summary>
            Expands the interval on both sides by the given value
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Include(System.Single)">
            <summary>
            Expands the interval to include the given value.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Include(SpatialSlur.Intervalf)">
            <summary>
            Expands this interval to include another
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.IncludeNeg(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.IncludePos(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Include(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SpatialSlur.Intervalf.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervalf.MakeIncreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervalf.MakeDecreasing">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Intervalf.Deconstruct(System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:SpatialSlur.Matrix2d">
            <summary>
            Double precision 2x2 matrix.
            </summary>
        </member>
        <member name="T:SpatialSlur.Matrix2d.Decompose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Decompose.EigenSymmetric(SpatialSlur.Matrix2d,SpatialSlur.Matrix2d@,SpatialSlur.Vector2d@,System.Double)">
            <summary>
            Returns the eigen decomposition of the given matrix A.
            </summary>
            <param name="A"></param>
            <param name="Q"></param>
            <param name="lambda"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Matrix2d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Implicit(SpatialSlur.OrthoBasis2d)~SpatialSlur.Matrix2d">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Multiply(SpatialSlur.Matrix2d,System.Double)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Multiply(System.Double,SpatialSlur.Matrix2d)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Division(SpatialSlur.Matrix2d,System.Double)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Multiply(SpatialSlur.Matrix2d,SpatialSlur.Vector2d)">
            <summary>
            Matrix vector multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Multiply(SpatialSlur.Matrix2d,SpatialSlur.Matrix2d)">
            <summary>
            Matrix multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Addition(SpatialSlur.Matrix2d,SpatialSlur.Matrix2d)">
            <summary>
            Matrix addition
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_Subtraction(SpatialSlur.Matrix2d,SpatialSlur.Matrix2d)">
            <summary>
            Matrix subtraction
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.op_UnaryNegation(SpatialSlur.Matrix2d)">
            <summary>
            Matrix negation
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Lerp(SpatialSlur.Matrix2d,SpatialSlur.Matrix2d,System.Double)">
            <summary>
            
            </summary>
            <param name="m0"></param>
            <param name="m1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.CreateFromRows(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="row0"></param>
            <param name="row1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.CreateFromColumns(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="column0"></param>
            <param name="column1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.CreateCovariance(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <param name="vectors"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.CreateCovariance(System.Collections.Generic.IEnumerable{SpatialSlur.Vector2d},SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vectors"></param>
            <param name="mean"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.CreateJacobian(System.Func{SpatialSlur.Vector2d,SpatialSlur.Vector2d},SpatialSlur.Vector2d,System.Double)">
            <summary>
            Returns a numerical approximation of the Jacobian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.CreateHessian(System.Func{SpatialSlur.Vector2d,System.Double},SpatialSlur.Vector2d,System.Double)">
            <summary>
            Returns a numerical approximation of the Hessian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Matrix2d.M00">
            <summary>Entry at row 0 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix2d.M01">
            <summary>Entry at row 0 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix2d.M10">
            <summary>Entry at row 1 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix2d.M11">
            <summary>Entry at row 1 column 1</summary>
        </member>
        <member name="M:SpatialSlur.Matrix2d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="diagonal"></param>
        </member>
        <member name="M:SpatialSlur.Matrix2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m10"></param>
            <param name="m11"></param>
        </member>
        <member name="M:SpatialSlur.Matrix2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="column0"></param>
            <param name="column1"></param>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Column0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Column1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Row0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Row1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Transposed">
            <summary>
            Returns the transpose of this matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Inverse">
            <summary>
            Returns the indentity if this matrix cannot be inverted.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Determinant">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Trace">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Minor">
            <summary>
            Returns the matrix of minors.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Cofactor">
            <summary>
            Returns the cofactor matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Adjugate">
            <summary>
            Returns the adjugate matrix i.e. the transpose of the cofactor matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Minor00">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Minor01">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Minor10">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.Minor11">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix2d.As3d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Matrix2d.As4d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.IsSymmetric(System.Double)">
            <summary>
            
            </summary>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Scale(System.Double)">
            <summary>
            Scales this matrix in place.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Transpose">
            <summary>
            Transposes this matrix in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Invert(SpatialSlur.Matrix2d@)">
            <summary>
            Returns true on success.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Apply(SpatialSlur.Vector2d)">
            <summary>
            Applies this transformation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.Apply(SpatialSlur.Matrix2d)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.ApplyTranspose(SpatialSlur.Vector2d)">
            <summary>
            Applies the transpose of this transformation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.ApplyTranspose(SpatialSlur.Matrix2d)">
            <summary>
            Applies the transpose of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.ApproxEquals(SpatialSlur.Matrix2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.SolveCharacteristic(System.Double@,System.Double@,System.Double)">
            <summary>
            Returns the roots of the characteristic polynomial of this matrix.
            These are also the eigenvalues of this matrix.
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.SolveFor(SpatialSlur.Vector2d,SpatialSlur.Vector2d@)">
            <summary>
            Solves the linear system Ax = b
            </summary>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.LerpTo(SpatialSlur.Matrix2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.ToArray">
            <summary>
            Result is given in row-major order
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix2d.ToArray(System.Double[])">
            <summary>
            Result is given in row-major order
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:SpatialSlur.Matrix3d">
            <summary>
            Double precision 3x3 matrix.
            </summary>
        </member>
        <member name="T:SpatialSlur.Matrix3d.Decompose">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.EigenSymmetric(SpatialSlur.Matrix3d,SpatialSlur.Matrix3d@,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            Returns the eigen decomposition of the given matrix A.
            Assumes A is symmetric.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.DiagonalizeJacobi(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,System.Double,System.Int32)">
            <summary>
            Performs a Jacobi diagonalization of matrix A.
            Returns true if A is successfully diagonalized within the specified number of steps.
            Also returns the concatenation of applied Jacobi rotations in V.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.JacobiRotate01(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.JacobiRotate02(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.JacobiRotate12(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.GetJacobiTerms(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.SwapColumns01(SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.SwapColumns12(SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.QR(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="Q"></param>
            <param name="R"></param>
            <param name="epsilon"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.GivensRotate10(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.GivensRotate20(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.GivensRotate21(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.GetGivensTerms(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.SingularValue(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,SpatialSlur.Vector3d@,SpatialSlur.Matrix3d@,System.Double)">
            <summary>
            Performs a singular value decomposition of the given matrix A.
            Returns the rank of A.
            Note that this implementation ensures that U and V are proper rotations (i.e. no reflections).
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.EigenSymmetricPSD(SpatialSlur.Matrix3d,SpatialSlur.Matrix3d@,SpatialSlur.Vector3d@,System.Double)">
            <summary>
            Returns the eigen decomposition of the given matrix A.
            Assumes that A is symmetric and has non-negative eigenvalues (positive semidefinite).
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Decompose.Polar(SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@,SpatialSlur.Matrix3d@)">
            <summary>
            Returns the polar decomposition of the given matrix A.
            </summary>
            <param name="A"></param>
            <param name="R"></param>
            <param name="S"></param>
        </member>
        <member name="F:SpatialSlur.Matrix3d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Implicit(SpatialSlur.OrthoBasis3d)~SpatialSlur.Matrix3d">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Implicit(SpatialSlur.Orient2d)~SpatialSlur.Matrix3d">
            <summary>
            
            </summary>
            <param name="orient"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Implicit(SpatialSlur.Transform2d)~SpatialSlur.Matrix3d">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Multiply(SpatialSlur.Matrix3d,System.Double)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Multiply(System.Double,SpatialSlur.Matrix3d)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Division(SpatialSlur.Matrix3d,System.Double)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Multiply(SpatialSlur.Matrix3d,SpatialSlur.Vector3d)">
            <summary>
            Matrix vector multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Multiply(SpatialSlur.Matrix3d,SpatialSlur.Matrix3d)">
            <summary>
            Matrix multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Addition(SpatialSlur.Matrix3d,SpatialSlur.Matrix3d)">
            <summary>
            Matrix addition
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_Subtraction(SpatialSlur.Matrix3d,SpatialSlur.Matrix3d)">
            <summary>
            Matrix subtraction
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.op_UnaryNegation(SpatialSlur.Matrix3d)">
            <summary>
            Matrix negation
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Lerp(SpatialSlur.Matrix3d,SpatialSlur.Matrix3d,System.Double)">
            <summary>
            
            </summary>
            <param name="m0"></param>
            <param name="m1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.CreateFromRows(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="row0"></param>
            <param name="row1"></param>
            <param name="row2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.CreateFromColumns(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="column0"></param>
            <param name="column1"></param>
            <param name="column2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.CreateCovariance(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.CreateCovariance(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="centroid"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.GetDeterminant(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M00">
            <summary>Entry at row 0 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M01">
            <summary>Entry at row 0 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M02">
            <summary>Entry at row 0 column 2</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M10">
            <summary>Entry at row 1 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M11">
            <summary>Entry at row 1 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M12">
            <summary>Entry at row 1 column 2</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M20">
            <summary>Entry at row 2 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M21">
            <summary>Entry at row 2 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix3d.M22">
            <summary>Entry at row 2 column 2</summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="diagonal"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.#ctor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="diagonal"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="column0"></param>
            <param name="column1"></param>
            <param name="column2"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m02"></param>
            <param name="m10"></param>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m20"></param>
            <param name="m21"></param>
            <param name="m22"></param>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Column0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Column1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Column2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Row0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Row1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Row2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Diagonal">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Transposed">
            <summary>
            Returns the transpose of this matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Inverse">
            <summary>
            Returns the inverse of this matrix.
            If not invertable, returns the identity matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Determinant">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Trace">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor">
            <summary>
            Returns the matrix of minors.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Cofactor">
            <summary>
            Returns the cofactor matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Adjugate">
            <summary>
            Returns the adjugate matrix i.e. the transpose of the cofactor matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor00">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor01">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor02">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor10">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor11">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor12">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor20">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor21">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.Minor22">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix3d.As4d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.IsSymmetric(System.Double)">
            <summary>
            
            </summary>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.OneNorm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.InfNorm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Scale(System.Double)">
            <summary>
            Scales this matrix in place.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Transpose">
            <summary>
            Transposes this matrix in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Invert(SpatialSlur.Matrix3d@)">
            <summary>
            Returns true on success.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Apply(SpatialSlur.Vector3d)">
            <summary>
            Applies this transformation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Apply(SpatialSlur.Matrix3d)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.Apply(SpatialSlur.Matrix3d@)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ApplyTranspose(SpatialSlur.Vector3d)">
            <summary>
            Applies the transpose of this transformation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ApplyTranspose(SpatialSlur.Matrix3d)">
            <summary>
            Applies the transpose of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ApplyTranspose(SpatialSlur.Matrix3d@)">
            <summary>
            Applies the transpose of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ApproxEquals(SpatialSlur.Matrix3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ApproxEquals(SpatialSlur.Matrix3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.SolveCharacteristic(System.Double@,System.Double@,System.Double@,System.Double)">
            <summary>
            Returns the roots of the characteristic polynomial of this matrix.
            These are also the eigenvalues of this matrix.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix3d.SolveFor(SpatialSlur.Vector3d,SpatialSlur.Vector3d@)">
            <summary>
            Solves the linear system Ax = b
            </summary>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.LerpTo(SpatialSlur.Matrix3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ToArray">
            <summary>
            Result is given in row-major order
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix3d.ToArray(System.Double[])">
            <summary>
            Result is given in row-major order
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:SpatialSlur.Matrix4d">
            <summary>
            Double precision 4x4 matrix.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Implicit(SpatialSlur.Orient3d)~SpatialSlur.Matrix4d">
            <summary>
            
            </summary>
            <param name="orient"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Implicit(SpatialSlur.Transform3d)~SpatialSlur.Matrix4d">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Multiply(SpatialSlur.Matrix4d,System.Double)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Multiply(System.Double,SpatialSlur.Matrix4d)">
            <summary>
            Matrix scalar multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Division(SpatialSlur.Matrix4d,System.Double)">
            <summary>
            Matrix scalar division
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Multiply(SpatialSlur.Matrix4d,SpatialSlur.Vector4d)">
            <summary>
            Matrix vector multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Multiply(SpatialSlur.Matrix4d,SpatialSlur.Matrix4d)">
            <summary>
            Matrix multiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Addition(SpatialSlur.Matrix4d,SpatialSlur.Matrix4d)">
            <summary>
            Matrix addition
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Subtraction(SpatialSlur.Matrix4d,SpatialSlur.Matrix4d)">
            <summary>
            Matrix subtraction
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_UnaryNegation(SpatialSlur.Matrix4d)">
            <summary>
            Matrix negation
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Lerp(SpatialSlur.Matrix4d,SpatialSlur.Matrix4d,System.Double)">
            <summary>
            
            </summary>
            <param name="m0"></param>
            <param name="m1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.CreateFromRows(SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="row0"></param>
            <param name="row1"></param>
            <param name="row2"></param>
            <param name="row3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.CreateFromColumns(SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="column0"></param>
            <param name="column1"></param>
            <param name="column2"></param>
            <param name="column3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.CreateJacobian(System.Func{SpatialSlur.Vector4d,SpatialSlur.Vector4d},SpatialSlur.Vector4d,System.Double)">
            <summary>
            Returns a numerical approximation of the Jacobian of the given function with respect to the given vector.
            </summary>
            <param name="function"></param>
            <param name="vector"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.GetDeterminant(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M00">
            <summary>Entry at row 0 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M01">
            <summary>Entry at row 0 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M02">
            <summary>Entry at row 0 column 2</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M03">
            <summary>Entry at row 0 column 3</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M10">
            <summary>Entry at row 1 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M11">
            <summary>Entry at row 1 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M12">
            <summary>Entry at row 1 column 2</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M13">
            <summary>Entry at row 1 column 3</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M20">
            <summary>Entry at row 2 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M21">
            <summary>Entry at row 2 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M22">
            <summary>Entry at row 2 column 2</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M23">
            <summary>Entry at row 2 column 3</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M30">
            <summary>Entry at row 3 column 0</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M31">
            <summary>Entry at row 3 column 1</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M32">
            <summary>Entry at row 3 column 2</summary>
        </member>
        <member name="F:SpatialSlur.Matrix4d.M33">
            <summary>Entry at row 3 column 3</summary>
        </member>
        <member name="M:SpatialSlur.Matrix4d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="diagonal"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m02"></param>
            <param name="m03"></param>
            <param name="m10"></param>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m20"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m30"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.#ctor(SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="column0"></param>
            <param name="column1"></param>
            <param name="column2"></param>
            <param name="column3"></param>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Column0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Column1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Column2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Column3">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Row0">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Row1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Row2">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Row3">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Transposed">
            <summary>
            Returns the transpose of this matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Determinant">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Trace">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor">
            <summary>
            Returns the matrix of minors.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Cofactor">
            <summary>
            Returns the cofactor matrix
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Adjugate">
            <summary>
            Returns the adjugate matrix i.e. the transpose of the cofactor matrix.
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor00">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor01">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor02">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor03">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor10">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor11">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor12">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor13">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor20">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor21">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor22">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor23">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor30">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor31">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor32">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Matrix4d.Minor33">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix4d.IsSymmetric(System.Double)">
            <summary>
            
            </summary>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Scale(System.Double)">
            <summary>
            Scales this matrix in place.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Transpose">
            <summary>
            Transposes this matrix in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Invert(SpatialSlur.Matrix4d@)">
            <summary>
            Returns true on success
            </summary>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Apply(SpatialSlur.Vector4d)">
            <summary>
            Applies this transformation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Apply(SpatialSlur.Matrix4d)">
            <summary>
            Applies this transformation to the given transformation in place.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.Apply(SpatialSlur.Matrix4d@)">
            <summary>
            Applies this transformation to the given transformation in place.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ApplyTranspose(SpatialSlur.Vector4d)">
            <summary>
            Applies the transpose of this transformation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ApplyTranspose(SpatialSlur.Matrix4d)">
            <summary>
            Applies the transpose of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ApplyTranspose(SpatialSlur.Matrix4d@)">
            <summary>
            Applies the transpose of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ApproxEquals(SpatialSlur.Matrix4d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ApproxEquals(SpatialSlur.Matrix4d@,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.LerpTo(SpatialSlur.Matrix4d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ToArray">
            <summary>
            Result is given in row-major order
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Matrix4d.ToArray(System.Double[])">
            <summary>
            Result is given in row-major order
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Implicit(Rhino.Geometry.Transform)~SpatialSlur.Matrix4d">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:SpatialSlur.Matrix4d.op_Implicit(SpatialSlur.Matrix4d)~Rhino.Geometry.Transform">
            <summary>
            
            </summary>
            <param name="transform"></param>
        </member>
        <member name="T:SpatialSlur.Orient2d">
            <summary>
            Represents a proper rigid transformation in 2 dimensions.
            https://en.wikipedia.org/wiki/Rigid_transformation
            </summary>
        </member>
        <member name="F:SpatialSlur.Orient2d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Orient2d.op_Implicit(SpatialSlur.OrthoBasis2d)~SpatialSlur.Orient2d">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Orient2d.op_Multiply(SpatialSlur.Orient2d,SpatialSlur.Vector2d)">
            <summary>
            Applies the given transformation to the given point.
            
            </summary>
            <param name="transform"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.op_Multiply(SpatialSlur.Orient2d,SpatialSlur.Orient2d)">
            <summary>
            Concatenates the given transformations by applying the first to the second.
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.CreateFromPoints(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
        </member>
        <member name="M:SpatialSlur.Orient2d.CreateFromTo(SpatialSlur.Orient2d,SpatialSlur.Orient2d)">
            <summary>
            Creates a relative transformation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.CreateRotationAtPoint(SpatialSlur.AxisAngle3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Orient2d.Rotation">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Orient2d.Translation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Orient2d.#ctor(SpatialSlur.OrthoBasis2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="M:SpatialSlur.Orient2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="x"></param>
        </member>
        <member name="P:SpatialSlur.Orient2d.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Orient2d.IsValid">
            <summary>
            Return false if the rotation is undefined.
            </summary>
        </member>
        <member name="P:SpatialSlur.Orient2d.As3d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.Invert">
            <summary>
            Inverts this transformation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Orient2d.Apply(SpatialSlur.Vector2d)">
            <summary>
            Applies this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.ApplyInverse(SpatialSlur.Vector2d)">
            <summary>
            Applies the inverse of this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.Apply(SpatialSlur.Orient2d)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Orient2d.ApplyInverse(SpatialSlur.Orient2d)">
            <summary>
            Applies the inverse of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Orient2d.ApproxEquals(SpatialSlur.Orient2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient2d.Deconstruct(SpatialSlur.OrthoBasis2d@,SpatialSlur.Vector2d@)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="T:SpatialSlur.Orient3d">
            <summary>
            Represents a proper rigid transformation in 3 dimensions.
            https://en.wikipedia.org/wiki/Rigid_transformation
            </summary>
        </member>
        <member name="F:SpatialSlur.Orient3d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Orient3d.op_Implicit(SpatialSlur.OrthoBasis3d)~SpatialSlur.Orient3d">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Orient3d.op_Multiply(SpatialSlur.Orient3d,SpatialSlur.Vector3d)">
            <summary>
            Applies the given transformation to the given point.
            </summary>
            <param name="transform"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.op_Multiply(SpatialSlur.Orient3d,SpatialSlur.Orient3d)">
            <summary>
            Concatenates the given transformations by applying the first to the second.
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.CreateFromPoints(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.CreateFromTo(SpatialSlur.Orient3d,SpatialSlur.Orient3d)">
            <summary>
            Creates a relative transformation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.CreateFromTo(SpatialSlur.Orient3d@,SpatialSlur.Orient3d@)">
            <summary>
            Creates a relative transformation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.CreateLookAt(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="eye"></param>
            <param name="target"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.CreateRotationAboutPoint(SpatialSlur.AxisAngle3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Orient3d.Rotation">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Orient3d.Translation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Orient3d.#ctor(SpatialSlur.OrthoBasis3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="P:SpatialSlur.Orient3d.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Orient3d.IsValid">
            <summary>
            Return false if the rotation is undefined.
            </summary>
        </member>
        <member name="M:SpatialSlur.Orient3d.Invert">
            <summary>
            Inverts this transformation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Orient3d.Apply(SpatialSlur.Vector3d)">
            <summary>
            Applies this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.ApplyInverse(SpatialSlur.Vector3d)">
            <summary>
            Applies the inverse of this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.Apply(SpatialSlur.Orient3d)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Orient3d.Apply(SpatialSlur.Orient3d@)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Orient3d.ApplyInverse(SpatialSlur.Orient3d)">
            <summary>
            Applies the inverse of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Orient3d.ApplyInverse(SpatialSlur.Orient3d@)">
            <summary>
            Applies the inverse of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Orient3d.ApproxEquals(SpatialSlur.Orient3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.ApproxEquals(SpatialSlur.Orient3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Orient3d.Deconstruct(SpatialSlur.OrthoBasis3d@,SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="T:SpatialSlur.OrthoBasis2d">
            <summary>
            Orthonormal basis representation of a 2 dimensional rotation.
            </summary>
        </member>
        <member name="F:SpatialSlur.OrthoBasis2d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.op_Multiply(SpatialSlur.OrthoBasis2d,SpatialSlur.Vector2d)">
            <summary>
            Applies the given rotation to the given vector.
            </summary>
            <param name="rotation"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.op_Multiply(SpatialSlur.OrthoBasis2d,SpatialSlur.OrthoBasis2d)">
            <summary>
            Concatenates the given transformations by applying the first to the second.
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.CreateFromTo(SpatialSlur.OrthoBasis2d,SpatialSlur.OrthoBasis2d)">
            <summary>
            Creates a relative rotation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.#ctor(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="cosAngle"></param>
            <param name="sinAngle"></param>
        </member>
        <member name="P:SpatialSlur.OrthoBasis2d.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis2d.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis2d.Inverse">
            <summary>
            Returns the inverse of this rotation
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis2d.IsValid">
            <summary>
            Returns true if this rotation has non-zero axes.
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis2d.As3d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.Invert">
            <summary>
            Inverts this rotation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.Apply(SpatialSlur.Vector2d)">
            <summary>
            Applies this rotation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.Apply(SpatialSlur.OrthoBasis2d)">
            <summary>
            Applies this rotation to the given rotation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.ApplyInverse(SpatialSlur.Vector2d)">
            <summary>
            Applies the inverse of this rotation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.ApplyInverse(SpatialSlur.OrthoBasis2d)">
            <summary>
            Applies the inverse of this rotation to the given rotation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.ApproxEquals(SpatialSlur.OrthoBasis2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis2d.Deconstruct(SpatialSlur.Vector2d@,SpatialSlur.Vector2d@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:SpatialSlur.OrthoBasis3d">
            <summary>
            Orthonormal basis representation of a 3 dimensional rotation.
            </summary>
        </member>
        <member name="F:SpatialSlur.OrthoBasis3d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.op_Multiply(SpatialSlur.OrthoBasis3d,SpatialSlur.Vector3d)">
            <summary>
            Applies the given rotation to the given vector.
            </summary>
            <param name="rotation"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.op_Multiply(SpatialSlur.OrthoBasis3d,SpatialSlur.OrthoBasis3d)">
            <summary>
            Concatenates the given transformations by applying the first to the second.
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromTo(SpatialSlur.OrthoBasis3d,SpatialSlur.OrthoBasis3d)">
            <summary>
            Creates a relative rotation from r0 to r1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromTo(SpatialSlur.OrthoBasis3d@,SpatialSlur.OrthoBasis3d@)">
            <summary>
            Creates a relative rotation from r0 to r1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromTo(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Creates the rotation between v0 and v1
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateLookAt(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            The y axis of the returned basis is aligned with the given direction.
            </summary>
            <param name="direction"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromXY(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromYX(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromYZ(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="yz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromZY(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <param name="yz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromZX(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <param name="xz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFromXZ(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="xz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.CreateFrom2d(SpatialSlur.OrthoBasis2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.#ctor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.#ctor(SpatialSlur.AxisAngle3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.#ctor(SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis3d.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis3d.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis3d.Z">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis3d.Inverse">
            <summary>
            Returns the inverse of this rotation.
            </summary>
        </member>
        <member name="P:SpatialSlur.OrthoBasis3d.IsValid">
            <summary>
            Returns true if this rotation has non-zero axes.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetXY(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns true if this basis was successfully set.
            </summary>
            <param name="x"></param>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetYX(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns true if this basis was successfully set.
            </summary>
            <param name="y"></param>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetYZ(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns true if this basis was successfully set.
            </summary>
            <param name="y"></param>
            <param name="yz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetZY(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns true if this basis was successfully set.
            </summary>
            <param name="z"></param>
            <param name="yz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetZX(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns true if this basis was successfully set.
            </summary>
            <param name="z"></param>
            <param name="xz"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetXZ(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns true if this basis was successfully set.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetOrthoXY(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Assumes the given vectors are orthonormal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetOrthoYZ(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Assumes the given vectors are orthonormal.
            </summary>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetOrthoZX(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Assumes the given vectors are orthonormal.
            </summary>
            <param name="z"></param>
            <param name="x"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Set(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Set(SpatialSlur.AxisAngle3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SetImpl(SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            Assumes the given axis is unit length.
            </summary>
            <param name="axis"></param>
            <param name="cosAngle"></param>
            <param name="sinAngle"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Set(SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SwapXY">
            <summary>
            Swaps the x and y axes.
            Also flips the z axis to preserve handedness.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SwapYZ">
            <summary>
            Swaps the y and z axes.
            Also flips the x axis to preserve handedness.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.SwapZX">
            <summary>
            Swaps the z and x axes
            Also flips the y axis to preserve handedness.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Flip">
            <summary>
            Reverses all axes.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Invert">
            <summary>
            Inverts this rotation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Apply(SpatialSlur.Vector3d)">
            <summary>
            Applies this rotation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Apply(SpatialSlur.OrthoBasis3d)">
            <summary>
            Applies this rotation to the given rotation in place.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Apply(SpatialSlur.OrthoBasis3d@)">
            <summary>
            Applies this rotation to the given rotation in place.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.ApplyInverse(SpatialSlur.Vector3d)">
            <summary>
            Applies the inverse of this rotation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.ApplyInverse(SpatialSlur.OrthoBasis3d)">
            <summary>
            Applies the inverse of this rotation to the given rotation in place.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.ApplyInverse(SpatialSlur.OrthoBasis3d@)">
            <summary>
            Applies the inverse of this rotation to the given rotation in place.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Rotate(SpatialSlur.AxisAngle3d)">
            <summary>
            Applies the given rotation to this object.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Rotate(SpatialSlur.Quaterniond)">
            <summary>
            Applies the given rotation to this object.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.ApproxEquals(SpatialSlur.OrthoBasis3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.ApproxEquals(SpatialSlur.OrthoBasis3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.OrthoBasis3d.Deconstruct(SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:SpatialSlur.Plane3d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Plane3d.CreateXY(System.Double)">
            <summary>
            
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Plane3d.CreateYZ(System.Double)">
            <summary>
            
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Plane3d.CreateZX(System.Double)">
            <summary>
            
            </summary>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Plane3d.#ctor(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="normal"></param>
            <param name="distance"></param>
        </member>
        <member name="M:SpatialSlur.Plane3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="normal"></param>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Plane3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="P:SpatialSlur.Plane3d.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Plane3d.Distance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Plane3d.IsValid">
            <summary>
            Returns true if this plane has a non-zero normal.
            </summary>
        </member>
        <member name="M:SpatialSlur.Plane3d.Set(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Plane3d.MakePassThrough(SpatialSlur.Vector3d)">
            <summary>
            Sets the distance of this plane such that it passes through the given point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Plane3d.ClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            Returns the closest point on this plane to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Plane3d.DistanceTo(SpatialSlur.Vector3d)">
            <summary>
            Returns the signed distance from this plane to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Plane3d.ProjectTo(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the projection of the given point along the given direction onto this plane.
            </summary>
            <param name="point"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Property">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Property.Create``2(System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="get"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.Create``2(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.Create``2(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.CreateGetter``2(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.CreateSetter``2(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.Create``2(System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.CreateGetter``2(System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Property.CreateSetter``2(System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Property`2">
            <summary>
            Compound delegate for getting/setting a value V via a target T.
            </summary>
        </member>
        <member name="F:SpatialSlur.Property`2.Get">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Property`2.Set">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Property`2.op_Implicit(SpatialSlur.Property{`0,`1})~System.Func{`0,`1}">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SpatialSlur.Property`2.op_Implicit(SpatialSlur.Property{`0,`1})~System.Action{`0,`1}">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SpatialSlur.Property`2.#ctor(System.Func{`0,`1},System.Action{`0,`1})">
            <summary>
            
            </summary>
            <param name="get"></param>
            <param name="set"></param>
        </member>
        <member name="T:SpatialSlur.Quaterniond">
            <summary>
            Quaternion representation of a 3 dimensional rotation.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Quaterniond.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Quaterniond.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.op_Implicit(SpatialSlur.Vector4d)~SpatialSlur.Quaterniond">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.op_Multiply(SpatialSlur.Quaterniond,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.op_Multiply(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Dot(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond)">
            <summary>
            Returns the unit quaternion dot product.
            This is the cosine of the angle between the 2 rotations.
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Lerp(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond,System.Double)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Nlerp(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond,System.Double)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Slerp(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond,System.Double)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.CreateFromTo(SpatialSlur.Quaterniond,SpatialSlur.Quaterniond)">
            <summary>
            
            </summary>
            <param name="r0"></param>
            <param name="r1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.CreateFromTo(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.CreateLookAt(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="direction"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Quaterniond.X">
            <summary>
            First imaginary component = axis.X * sin(angle/2)
            </summary>
        </member>
        <member name="F:SpatialSlur.Quaterniond.Y">
            <summary>
            Second imaginary component = axis.Y * sin(angle/2)
            </summary>
        </member>
        <member name="F:SpatialSlur.Quaterniond.Z">
            <summary>
            Third imaginary component = axis.Z * sin(angle/2)
            </summary>
        </member>
        <member name="F:SpatialSlur.Quaterniond.W">
            <summary>
            Real component = cos(angle/2)
            </summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.#ctor(SpatialSlur.Vector3d)">
            <summary>
            The axis and angle of rotation are taken from the direction and length of the given vector respectively.
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.#ctor(SpatialSlur.AxisAngle3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.#ctor(SpatialSlur.OrthoBasis3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="P:SpatialSlur.Quaterniond.SquareLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Quaterniond.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Quaterniond.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Quaterniond.Conjugate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Quaterniond.Unit">
            <summary>
            Returns a unit length copy of this quaternion.
            </summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.IsZero(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.IsUnit(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Set(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Set(SpatialSlur.AxisAngle3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.SetImpl(SpatialSlur.Vector3d,System.Double)">
            <summary>
            Assumes the given axis is unit length.
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Set(SpatialSlur.OrthoBasis3d)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Set(SpatialSlur.OrthoBasis3d@)">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Unitize">
            <summary>
            Unitizes the quaternion in place.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Invert">
            <summary>
            Inverts this quaternion in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Negate">
            <summary>
            Negates this quaternion in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Quaterniond.LerpTo(SpatialSlur.Quaterniond,System.Double)">
            <summary>
            Linear interpolation between this quaternion and another.
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.NlerpTo(SpatialSlur.Quaterniond,System.Double)">
            <summary>
            Normalized linear interpolation between this quaternion and another.
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.SlerpTo(SpatialSlur.Quaterniond,System.Double)">
            <summary>
            Spherical linear interpolation between this quaternion and another.
            Assumes both are unit quaternions.
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Apply(SpatialSlur.Vector3d)">
            <summary>
            Applies this rotation to the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Apply(SpatialSlur.Quaterniond)">
            <summary>
            Applies this rotation to the given rotation.
            Assumes both quaternions are unit length.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.ApproxEquals(SpatialSlur.Quaterniond,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.ToAxisAngle">
            <summary>
            Assumes this quaternion is unit length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.ToMatrix(SpatialSlur.Matrix3d@)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Quaterniond.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.op_Implicit(Rhino.Geometry.Quaternion)~SpatialSlur.Quaterniond">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Quaterniond.op_Implicit(SpatialSlur.Quaterniond)~Rhino.Geometry.Quaternion">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="T:SpatialSlur.SlurMath">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.SlurMath.Constantsd">
            <summary>
            Double precision mathematical constants
            </summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsd.ZeroTolerance">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsd.Pi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsd.TwoPi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsd.HalfPi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsd.InvPi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsd.Sqrt2">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.SlurMath.Constantsf">
            <summary>
            Single precision mathematical constants
            </summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsf.ZeroTolerance">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsf.Pi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsf.TwoPi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsf.HalfPi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsf.InvPi">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.SlurMath.Constantsf.Sqrt2">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.SlurMath.ApproxEquals(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ApproxEquals(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t1"></param>
            <param name="t"></param>
            <param name="t0"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t1"></param>
            <param name="t"></param>
            <param name="t0"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Normalize(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Normalize(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Remap(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Maps a number from one interval to another
            </summary>
            <param name="t"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <param name="b0"></param>
            <param name="b1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a number from one interval to another
            </summary>
            <param name="t"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <param name="b0"></param>
            <param name="b1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Saturate(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Saturate(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Clamp(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Clamp(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Clamp(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>  
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contains(System.Int32,System.Int32)">
            <summary>
            Fast containment check for array indices. 
            Assumes range is positive.
            </summary>
            <param name="i"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contains(System.Double,System.Double,System.Double)">
            <summary>
            Exclusive containment check.
            </summary>
            <param name="t"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contains(System.Single,System.Single,System.Single)">
            <summary>
            Exclusive containment check.
            </summary>
            <param name="t"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contains(System.Int32,System.Int32,System.Int32)">
            <summary>
            Exclusive containment check.
            </summary>
            <param name="t"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ContainsIncl(System.Double,System.Double,System.Double)">
            <summary>
            Inclusive containment check.
            </summary>
            <param name="t"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ContainsIncl(System.Single,System.Single,System.Single)">
            <summary>
            Inclusive containment check.
            </summary>
            <param name="t"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ContainsIncl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inclusive containment check.
            </summary>
            <param name="t"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Nearest(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Nearest(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Nearest(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.RoundToPow(System.Double,System.Double)">
            <summary>
            Rounds x to the nearest power of y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.CeilToPow(System.Double,System.Double)">
            <summary>
            Round x up to the nearest larger power of y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.FloorToPow(System.Double,System.Double)">
            <summary>
            Round x down to the nearest smaller power of y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.DivideCeil(System.Int32,System.Int32)">
            <summary>
            Assumes that divisor y is positive
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Fract(System.Double)">
            <summary>
            Returns fractional component of t.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Fract(System.Single)">
            <summary>
            Returns fractional component of t.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Fract(System.Double,System.Int32@)">
            <summary>
            Returns fractional component of t. 
            Also returns the whole component in an out parameter.
            </summary>
            <param name="x"></param>
            <param name="whole"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Fract(System.Single,System.Int32@)">
            <summary>
            Returns fractional component of t. 
            Also returns the whole component in an out parameter.
            </summary>
            <param name="x"></param>
            <param name="whole"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Repeat(System.Double,System.Double,System.Double)">
            <summary>
            Wraps t to the given interval.
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Repeat(System.Single,System.Single,System.Single)">
            <summary>
            Wraps t to the given interval.
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Repeat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps t to the given interval.
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Repeat(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Repeat(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Repeat(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.RepeatPos(System.Int32,System.Int32)">
            <summary>
            Assumes the given length is positive to save a few ticks.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPong(System.Double,System.Double,System.Double)">
            <summary>
            Bounces t back and forth within the given interval.
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPong(System.Single,System.Single,System.Single)">
            <summary>
            Bounces t back and forth within the given interval.
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPong(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bounces t back and forth within the given interval.
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPong(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPong(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPong(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PingPongPos(System.Int32,System.Int32)">
            <summary>
            Assumes the given length is positive to save a few ticks.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Step(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Step(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Ramp(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Ramp(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmoothPulse(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmoothPulse(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmootherStep(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmootherStep(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmootherPulse(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SmootherPulse(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.HermiteC1(System.Double)">
            <summary>
            Assumes t is between 0 and 1 inclusive
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.HermiteC1(System.Single)">
            <summary>
            Assumes t is between 0 and 1 inclusive
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.HermiteC2(System.Double)">
            <summary>
            Assumes t is between 0 and 1 inclusive
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.HermiteC2(System.Single)">
            <summary>
            Assumes t is between 0 and 1 inclusive
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.PowCurve(System.Double,System.Double,System.Double)">
            <summary>
            Assumes x is between 0 and 1 inclusive
            http://www.iquilezles.org/www/articles/functions/functions.htm
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contour(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contour(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contour(System.Double,System.Int32)">
            <summary>
            assumes t is between 0 and 1
            </summary>
            <param name="steps"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Contour(System.Single,System.Int32)">
            <summary>
            assumes t is between 0 and 1
            </summary>
            <param name="steps"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sqrt(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sqrt(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Floor(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Ceiling(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Round(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sin(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Cos(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Tan(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Asin(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.AsinSafe(System.Double)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.AsinSafe(System.Single)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Acos(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.AcosSafe(System.Double)">
            <summary>
            Clamps the input to a valid range (-1 to 1).
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.AcosSafe(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Atan(System.Single)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Atan2(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sec(System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sec(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Cosec(System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Cosec(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Cotan(System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Cotan(System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sigmoid(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.Sigmoid(System.Single)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ToDegrees(System.Double)">
            <summary>
            
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ToDegrees(System.Single)">
            <summary>
            
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ToRadians(System.Double)">
            <summary>
            
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.ToRadians(System.Single)">
            <summary>
            
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SolveLinear(System.Double,System.Double,System.Double@,System.Double)">
            <summary>
            Solves for the roots of ax + b = 0.
            Returns the number of solutions found (0 or 1).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="root"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double)">
            <summary>
            Solves for the roots of ax^2 + bx + c = 0.
            Returns the number of real solutions found (0, 1, or 2).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="r0"></param>
            <param name="r1"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.SlurMath.SolveCubic(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double)">
            <summary>
            Solves for the roots of ax^3 + bx^2 + cx + d = 0.
            Returns the number of real solutions found (0, 1, 2, or 3).
            </summary>
        </member>
        <member name="M:SpatialSlur.SlurMath.SolveCubic(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double)">
            <summary>
            Solves for the roots of x^3 + ax^2 + bx + c = 0.
            Returns the number of real solutions found (0, 1, 2, or 3).
            </summary>
        </member>
        <member name="T:SpatialSlur.Transform2d">
            <summary>
            Represents an angle-preserving affine transformation in 2 dimensions.
            </summary>
        </member>
        <member name="F:SpatialSlur.Transform2d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Transform2d.op_Implicit(SpatialSlur.OrthoBasis2d)~SpatialSlur.Transform2d">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Transform2d.op_Implicit(SpatialSlur.Orient2d)~SpatialSlur.Transform2d">
            <summary>
            
            </summary>
            <param name="orient"></param>
        </member>
        <member name="M:SpatialSlur.Transform2d.op_Multiply(SpatialSlur.Transform2d,SpatialSlur.Vector2d)">
            <summary>
            Applies the given transformation to the given point.
            </summary>
            <param name="transform"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.op_Multiply(SpatialSlur.Transform2d,SpatialSlur.Transform2d)">
            <summary>
            Concatenates the given transformations by applying the first to the second.
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.CreateFromTo(SpatialSlur.Transform2d,SpatialSlur.Transform2d)">
            <summary>
            Creates a relative transformation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Transform2d.Rotation">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Transform2d.Translation">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Transform2d.Scale">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Transform2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.OrthoBasis2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="M:SpatialSlur.Transform2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.Orient2d)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="orientation"></param>
        </member>
        <member name="P:SpatialSlur.Transform2d.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Transform2d.IsValid">
            <summary>
            Return false if the rotation is undefined.
            </summary>
        </member>
        <member name="P:SpatialSlur.Transform2d.As3d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.Invert">
            <summary>
            Inverts this transformation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Transform2d.Apply(SpatialSlur.Vector2d)">
            <summary>
            Applies this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.Apply(SpatialSlur.Transform2d)">
            <summary>
            Applies this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Transform2d.ApplyInverse(SpatialSlur.Vector2d)">
            <summary>
            Applies the inverse of this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.ApplyInverse(SpatialSlur.Transform2d)">
            <summary>
            Applies the inverse of this transformation to the given transformation.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Transform2d.ApproxEquals(SpatialSlur.Transform2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform2d.Deconstruct(SpatialSlur.Vector2d@,SpatialSlur.OrthoBasis2d@,SpatialSlur.Vector2d@)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="T:SpatialSlur.Transform3d">
            <summary>
            Represents an angle-preserving affine transformation in 3 dimensions.
            </summary>
        </member>
        <member name="F:SpatialSlur.Transform3d.Identity">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Transform3d.op_Implicit(SpatialSlur.OrthoBasis3d)~SpatialSlur.Transform3d">
            <summary>
            
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.op_Implicit(SpatialSlur.Orient3d)~SpatialSlur.Transform3d">
            <summary>
            
            </summary>
            <param name="orient"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.op_Multiply(SpatialSlur.Transform3d,SpatialSlur.Vector3d)">
            <summary>
            Applies the given transformation to the given point.
            </summary>
            <param name="transform"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.op_Multiply(SpatialSlur.Transform3d,SpatialSlur.Transform3d)">
            <summary>
            Concatenates the given transformations by applying the first to the second.
            </summary>
            <param name="t0"></param>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.CreateFromTo(SpatialSlur.Transform3d,SpatialSlur.Transform3d)">
            <summary>
            Creates relative transformation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.CreateFromTo(SpatialSlur.Transform3d@,SpatialSlur.Transform3d@)">
            <summary>
            Creates relative transformation from t0 to t1.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.CreateReflection(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Transform3d.Rotation">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Transform3d.Translation">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Transform3d.Scale">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Transform3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.OrthoBasis3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Orient3d)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="orientation"></param>
        </member>
        <member name="P:SpatialSlur.Transform3d.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Transform3d.IsValid">
            <summary>
            Return false if the rotation is undefined.
            </summary>
        </member>
        <member name="M:SpatialSlur.Transform3d.Invert">
            <summary>
            Inverts this transformation in place.
            </summary>
        </member>
        <member name="M:SpatialSlur.Transform3d.Apply(SpatialSlur.Vector3d)">
            <summary>
            Applies this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.Apply(SpatialSlur.Transform3d)">
            <summary>
            Applies this transformation to the given transformation in place.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.Apply(SpatialSlur.Transform3d@)">
            <summary>
            Applies this transformation to the given transformation in place.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.ApplyInverse(SpatialSlur.Vector3d)">
            <summary>
            Applies the inverse of this transformation to the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.ApplyInverse(SpatialSlur.Transform3d)">
            <summary>
            Applies the inverse of this transformation to the given transformation in place.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.ApplyInverse(SpatialSlur.Transform3d@)">
            <summary>
            Applies the inverse of this transformation to the given transformation in place.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Transform3d.ApproxEquals(SpatialSlur.Transform3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.ApproxEquals(SpatialSlur.Transform3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.ToMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Transform3d.Deconstruct(SpatialSlur.Vector3d@,SpatialSlur.OrthoBasis3d@,SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="rotation"></param>
            <param name="translation"></param>
        </member>
        <member name="T:SpatialSlur.Vector2d">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Vector2d.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector2d.UnitX">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector2d.UnitY">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(SpatialSlur.Vector2d)~System.String">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(SpatialSlur.Vector2i)~SpatialSlur.Vector2d">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Addition(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Subtraction(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_UnaryNegation(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Multiply(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Multiply(System.Double,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Multiply(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Component-wise multiplication.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Division(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Division(System.Double,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Division(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Component-wise division.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Max(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Max(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Min(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Min(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Abs(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Floor(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Ceiling(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Round(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Fract(SpatialSlur.Vector2d,SpatialSlur.Vector2i@)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="whole"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Dot(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.AbsDot(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Cross(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns the pseudo cross product calculated as the dot product between v1 and the perpendicular of v0.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Angle(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.SignedAngle(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Project(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns the projection of v0 onto v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Reject(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns the rejection of v0 onto v1.
            This is the perpendicular component of v0 with respect to v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Reflect(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns the reflection of v0 about v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.MatchProjection(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns a vector parallel to v0 whos projection onto v1 equals v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.MatchProjection(SpatialSlur.Vector2d,SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            Returns a vector parallel to v0 whose projection onto v2 equals the projection of v1 onto v2
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Lerp(SpatialSlur.Vector2d,SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Slerp(SpatialSlur.Vector2d,SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Slerp(SpatialSlur.Vector2d,SpatialSlur.Vector2d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Vector2d.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector2d.Y">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector2d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:SpatialSlur.Vector2d.Unit">
            <summary>
            Returns a unit length copy of this vector.
            Returns the zero vector if this vector is zero length.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.Length">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.SquareLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.ManhattanLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.ComponentSum">
            <summary>
            Returns the sum of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2d.ComponentMax">
            <summary>
            Returns the largest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.ComponentMin">
            <summary>
            Returns the smallest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.ComponentMean">
            <summary>
            Returns the mean of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2d.PerpCW">
            <summary>
            Returns the perpendicular vector rotated a quarter turn clockwise.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2d.PerpCCW">
            <summary>
            Returns the perpendicular vector rotated a quarter turn counter clockwise.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector2d.IsZero(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector2d.IsUnit(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2d.As2i">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.As3d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2d.As4d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector2d.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.ToPolar">
            <summary>
            Converts from euclidean to polar coordiantes
            (x,y) = (radius, theta)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.ToEuclidean">
            <summary>
            Converts from polar to euclidean coordiantes
            (x,y) = (radius, theta)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.ApproxEquals(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.DistanceTo(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.SquareDistanceTo(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.ManhattanDistanceTo(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.Unitize">
            <summary>
            Unitizes the vector in place.
            Returns false if the vector is zero length.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector2d.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector2d.LerpTo(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.SlerpTo(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.SlerpTo(SpatialSlur.Vector2d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.ToArray(System.Double[])">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.Deconstruct(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(Rhino.Geometry.Vector2d)~SpatialSlur.Vector2d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(SpatialSlur.Vector2d)~Rhino.Geometry.Vector2d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(Rhino.Geometry.Point2d)~SpatialSlur.Vector2d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(SpatialSlur.Vector2d)~Rhino.Geometry.Point2d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(Rhino.Geometry.Vector2f)~SpatialSlur.Vector2d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(SpatialSlur.Vector2d)~Rhino.Geometry.Vector2f">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Implicit(Rhino.Geometry.Point2f)~SpatialSlur.Vector2d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2d.op_Explicit(SpatialSlur.Vector2d)~Rhino.Geometry.Point2f">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Vector2i">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Vector2i.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector2i.UnitX">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector2i.UnitY">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Implicit(SpatialSlur.Vector2i)~System.String">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Equality(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Inequality(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Addition(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Subtraction(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_UnaryNegation(SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Multiply(SpatialSlur.Vector2i,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Multiply(System.Int32,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.op_Multiply(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            Component-wise multiplication.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Abs(SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Max(SpatialSlur.Vector2i,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Max(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Min(SpatialSlur.Vector2i,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Min(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Dot(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.AbsDot(SpatialSlur.Vector2i,SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Vector2i.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector2i.Y">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector2i.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:SpatialSlur.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:SpatialSlur.Vector2i.Length">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2i.SquareLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2i.ManhattanLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2i.ComponentMax">
            <summary>
            Returns the largest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2i.ComponentMin">
            <summary>
            Returns the smallest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2i.ComponentSum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2i.PerpCW">
            <summary>
            Returns the perpendicular vector rotated a quarter turn clockwise.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2i.PerpCCW">
            <summary>
            Returns the perpendicular vector rotated a quarter turn counter clockwise.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2i.IsZero">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2i.IsUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector2i.As2d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector2i.As3i">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector2i.Set(System.Int32)">
            <summary>
            
            </summary>
            <param name="xy"></param>
        </member>
        <member name="M:SpatialSlur.Vector2i.Set(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpatialSlur.Vector2i.Equals(SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector2i.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector2i.DistanceTo(SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.SquareDistanceTo(SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.ManhattanDistanceTo(SpatialSlur.Vector2i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector2i.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector2i.ToArray(System.Int32[])">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Vector2i.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Vector3d.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3d.UnitX">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3d.UnitY">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3d.UnitZ">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(SpatialSlur.Vector3d)~System.String">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(SpatialSlur.Vector3f)~SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(SpatialSlur.Vector3i)~SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Addition(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Subtraction(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_UnaryNegation(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Multiply(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Multiply(System.Double,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Multiply(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Component-wise multiplication.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Division(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Division(System.Double,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Division(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Component-wise division.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Max(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Max(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Min(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Min(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Abs(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Floor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Ceiling(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Round(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Fract(SpatialSlur.Vector3d,SpatialSlur.Vector3i@)">
             <summary>
            
             </summary>
             <param name="vector"></param>
             <param name="whole"></param>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Dot(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.AbsDot(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Cross(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.ScalarTriple(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the box product or scalar triple product of the given vectors (i.e. u x v . w)
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.VectorTriple(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the vector triple product of the given vectors (i.e. u x v x w)
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Angle(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the minimum angle between two vectors.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.SignedAngle(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the signed angle between two vectors.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Cotangent(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the cotangent of the angle between 2 vectors as per http://www.cs.columbia.edu/~keenan/Projects/Other/TriangleAreasCheatSheet.pdf.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Project(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the projection of v0 onto v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Reject(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the rejection of v0 onto v1.
            This is the perpendicular component of v0 with respect to v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Reflect(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns the reflection of v0 about v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.MatchProjection(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns a vector parallel to v0 whos projection onto v1 equals v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.MatchProjection(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Returns a vector parallel to v0 whose projection onto v2 equals the projection of v1 onto v2
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Lerp(SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Slerp(SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Slerp(SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Vector3d.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3d.Y">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3d.Z">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector3d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.#ctor(SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="z"></param>
        </member>
        <member name="P:SpatialSlur.Vector3d.XY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3d.CrossX">
            <summary>
            Returns the cross product of this vector vector with the x Axis
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.CrossY">
            <summary>
            Returns the cross product of this vector with the Y Axis
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.CrossZ">
            <summary>
            Returns the cross product of this vector with the Y Axis
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.Unit">
            <summary>
            Returns a unit length copy of this vector.
            Returns the zero vector if this vector is zero length.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.Length">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.SquareLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.ManhattanLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.ComponentSum">
            <summary>
            Returns the sum of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3d.ComponentMean">
            <summary>
            Returns the mean of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3d.ComponentMax">
            <summary>
            Returns the largest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.ComponentMin">
            <summary>
            Returns the smallest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3d.As3f">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3d.As3i">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3d.As4d">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.IsZero(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3d.IsUnit(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector3d.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.Set(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.ToSpherical">
            <summary>
            Converts from euclidean to spherical coordiantes.
            (x,y,z) = (radius, azimuth, polar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.ToEuclidean">
            <summary>
            Converts from spherical to euclidean coordiantes.
            (x,y,z) = (radius, azimuth, polar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.ApproxEquals(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.DistanceTo(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.SquareDistanceTo(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.ManhattanDistanceTo(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.Unitize">
            <summary>
            Unitizes the vector in place.
            Returns false if the vector is zero length.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3d.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3d.LerpTo(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.SlerpTo(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.SlerpTo(SpatialSlur.Vector3d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.ToArray(System.Double[])">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.Deconstruct(System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(Rhino.Geometry.Vector3d)~SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(SpatialSlur.Vector3d)~Rhino.Geometry.Vector3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(Rhino.Geometry.Point3d)~SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(SpatialSlur.Vector3d)~Rhino.Geometry.Point3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(Rhino.Geometry.Vector3f)~SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Explicit(SpatialSlur.Vector3d)~Rhino.Geometry.Vector3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Implicit(Rhino.Geometry.Point3f)~SpatialSlur.Vector3d">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Vector3d.op_Explicit(SpatialSlur.Vector3d)~Rhino.Geometry.Point3f">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="T:SpatialSlur.Vector3i">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Vector3i.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3i.UnitX">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3i.UnitY">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3i.UnitZ">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Implicit(SpatialSlur.Vector3i)~System.String">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Equality(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Inequality(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Addition(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Subtraction(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_UnaryNegation(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Multiply(SpatialSlur.Vector3i,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Multiply(System.Int32,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.op_Multiply(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            Component-wise multiplication.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Abs(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Max(SpatialSlur.Vector3i,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Max(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Min(SpatialSlur.Vector3i,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Min(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Dot(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.AbsDot(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Cross(SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.ScalarTriple(SpatialSlur.Vector3i,SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            Returns the box product or scalar triple product of the given vectors (i.e. u x v . w)
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.VectorTriple(SpatialSlur.Vector3i,SpatialSlur.Vector3i,SpatialSlur.Vector3i)">
            <summary>
            Returns the vector triple product of the given vectors (i.e. u x v x w)
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Vector3i.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3i.Y">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector3i.Z">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector3i.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:SpatialSlur.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:SpatialSlur.Vector3i.XY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3i.Length">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3i.SquareLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3i.ManhattanLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3i.ComponentMax">
            <summary>
            Returns the largest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3i.ComponentMin">
            <summary>
            Returns the smallest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3i.ComponentSum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector3i.IsZero">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3i.IsUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3i.As3d">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector3i.As3f">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3i.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector3i.Set(System.Int32)">
            <summary>
            
            </summary>
            <param name="xyz"></param>
        </member>
        <member name="M:SpatialSlur.Vector3i.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SpatialSlur.Vector3i.Equals(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector3i.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector3i.DistanceTo(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.SquareDistanceTo(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.ManhattanDistanceTo(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector3i.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector3i.ToArray(System.Int32[])">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Vector3i.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:SpatialSlur.Vector4d">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.Zero">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.UnitX">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.UnitY">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.UnitZ">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.UnitW">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Implicit(SpatialSlur.Vector4d)~System.String">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Implicit(SpatialSlur.Quaterniond)~SpatialSlur.Vector4d">
            <summary>
            
            </summary>
            <param name="quaternion"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Addition(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Subtraction(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_UnaryNegation(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Multiply(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Multiply(System.Double,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Multiply(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Component-wise multiplication.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Division(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Division(System.Double,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Division(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Component-wise division.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Max(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Max(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Min(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Min(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Abs(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Floor(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Ceiling(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Round(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Dot(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.AbsDot(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Angle(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Project(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Returns the projection of v0 onto v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Reject(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Returns the rejection of v0 onto v1.
            This is the perpendicular component of v0 with respect to v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Reflect(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Returns the reflection of v0 about v1.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.MatchProjection(SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Returns a vector parallel to v0 whos projection onto v1 equals v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.MatchProjection(SpatialSlur.Vector4d,SpatialSlur.Vector4d,SpatialSlur.Vector4d)">
            <summary>
            Returns a vector parallel to v0 whose projection onto v2 equals the projection of v1 onto v2
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Lerp(SpatialSlur.Vector4d,SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Slerp(SpatialSlur.Vector4d,SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Slerp(SpatialSlur.Vector4d,SpatialSlur.Vector4d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="F:SpatialSlur.Vector4d.X">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.Y">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.Z">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Vector4d.W">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Vector4d.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="xyzw"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.#ctor(SpatialSlur.Vector2d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.#ctor(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="w"></param>
        </member>
        <member name="P:SpatialSlur.Vector4d.XY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector4d.XYZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector4d.Unit">
            <summary>
            Returns a unit length copy of this vector.
            Returns the zero vector if this vector is zero length.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector4d.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector4d.SquareLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector4d.ManhattanLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector4d.ComponentSum">
            <summary>
            Returns the sum of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector4d.ComponentMean">
            <summary>
            Returns the mean of components.
            </summary>
        </member>
        <member name="P:SpatialSlur.Vector4d.ComponentMax">
            <summary>
            Returns the largest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Vector4d.ComponentMin">
            <summary>
            Returns the smallest component in the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.IsZero(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector4d.IsUnit(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector4d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Vector4d.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="xyzw"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.ApproxEquals(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.DistanceTo(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.SquareDistanceTo(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.ManhattanDistanceTo(SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.Unitize">
            <summary>
            Unitizes the vector in place.
            Returns false if the vector is zero length.
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector4d.Negate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Vector4d.LerpTo(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.SlerpTo(SpatialSlur.Vector4d,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.SlerpTo(SpatialSlur.Vector4d,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="angle"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.ToArray(System.Double[])">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Implicit(Rhino.Geometry.Point4d)~SpatialSlur.Vector4d">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Vector4d.op_Implicit(SpatialSlur.Vector4d)~Rhino.Geometry.Point4d">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dDouble">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dDouble.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.Factory.Create(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.Factory.Create(SpatialSlur.Fields.Grid2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.#ctor(SpatialSlur.Fields.Grid2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.ValueAtLinear(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.ValueAtLinearUnsafe(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dDouble.ValueAt(SpatialSlur.Fields.GridPoint2d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dVector2d">
             <summary>
            
             </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dVector2d.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.Factory.Create(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.Factory.Create(SpatialSlur.Fields.Grid2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.#ctor(SpatialSlur.Fields.Grid2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.ValueAtLinear(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.ValueAtLinearUnsafe(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector2d.ValueAt(SpatialSlur.Fields.GridPoint2d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dVector3d">
             <summary>
            
             </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dVector3d.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.Factory.Create(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.Factory.Create(SpatialSlur.Fields.Grid2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.#ctor(SpatialSlur.Fields.Grid2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.ValueAtLinear(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.ValueAtLinearUnsafe(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dVector3d.ValueAt(SpatialSlur.Fields.GridPoint2d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dDouble">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dDouble.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.Factory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.Factory.Create(SpatialSlur.Fields.Grid3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.#ctor(SpatialSlur.Fields.Grid3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.ValueAtLinear(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.ValueAtLinearUnsafe(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dDouble.ValueAt(SpatialSlur.Fields.GridPoint3d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dMatrix3d">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dMatrix3d.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.Factory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.Factory.Create(SpatialSlur.Fields.Grid3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.#ctor(SpatialSlur.Fields.Grid3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.ValueAtLinear(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.ValueAtLinearUnsafe(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dMatrix3d.ValueAt(SpatialSlur.Fields.GridPoint3d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dVector3d">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dVector3d.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.Factory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.Factory.Create(SpatialSlur.Fields.Grid3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.#ctor(SpatialSlur.Fields.Grid3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.ValueAtLinear(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.ValueAtLinearUnsafe(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dVector3d.ValueAt(SpatialSlur.Fields.GridPoint3d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.IDWField3dDouble">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.IDWField3dDouble.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dDouble.Factory.Create(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dDouble.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dDouble.Duplicate">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dDouble.ValueAt(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dDouble.GradientAt(SpatialSlur.Vector3d,System.Double@,System.Double@,System.Double@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.IDWField3dVector3d">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.IDWField3dVector3d.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dVector3d.Factory.Create(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dVector3d.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dVector3d.Duplicate">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dVector3d.ValueAt(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3dVector3d.GradientAt(SpatialSlur.Vector3d,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@,SpatialSlur.Vector3d@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3dDouble">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3dDouble.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dDouble.Factory.Create(SpatialSlur.Meshes.HeMesh3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dDouble.Factory.Create(SpatialSlur.Fields.MeshField3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dDouble.#ctor(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dDouble.#ctor(SpatialSlur.Fields.MeshField3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dDouble.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dDouble.ValueAt(SpatialSlur.Vector3d,SpatialSlur.Vector3i)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3dVector3d">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3dVector3d.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dVector3d.Factory.Create(SpatialSlur.Meshes.HeMesh3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dVector3d.Factory.Create(SpatialSlur.Fields.MeshField3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dVector3d.#ctor(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dVector3d.#ctor(SpatialSlur.Fields.MeshField3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dVector3d.Duplicate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dVector3d.ValueAt(SpatialSlur.Vector3d,SpatialSlur.Vector3i)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.IntegrationMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.IntegrationMode.Euler">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.IntegrationMode.RK2">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.IntegrationMode.RK4">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Fields.SampleMode">
            <summary>
            Determines how the field is sampled at a given point.
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.SampleMode.Nearest">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.SampleMode.Linear">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Fields.WrapMode">
            <summary>
            Determines what happens when a field is evaluated beyond its bounds.
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.WrapMode.Clamp">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.WrapMode.Repeat">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.WrapMode.Mirror">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetLaplacian(SpatialSlur.Fields.GridField2d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetLaplacian(SpatialSlur.Fields.GridField2d{System.Double},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetGradient(SpatialSlur.Fields.GridField2d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetGradient(SpatialSlur.Fields.GridField2d{System.Double},SpatialSlur.Vector2d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.IncrementAt(SpatialSlur.Fields.GridField2d{System.Double},SpatialSlur.Fields.GridPoint2d@,System.Double)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="amount"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.SetAt(SpatialSlur.Fields.GridField2d{System.Double},SpatialSlur.Fields.GridPoint2d@,System.Double)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetLaplacian(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetLaplacian(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},SpatialSlur.Vector2d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetDivergence(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetDivergence(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetCurl(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.GetCurl(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.IncrementAt(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},SpatialSlur.Fields.GridPoint2d@,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="amount"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dExtensions.SetAt(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},SpatialSlur.Fields.GridPoint2d@,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetLaplacian(SpatialSlur.Fields.GridField3d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetLaplacian(SpatialSlur.Fields.GridField3d{System.Double},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetGradient(SpatialSlur.Fields.GridField3d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetGradient(SpatialSlur.Fields.GridField3d{System.Double},SpatialSlur.Vector3d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.IncrementAt(SpatialSlur.Fields.GridField3d{System.Double},SpatialSlur.Fields.GridPoint3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="amount"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.SetAt(SpatialSlur.Fields.GridField3d{System.Double},SpatialSlur.Fields.GridPoint3d@,System.Double)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetLaplacian(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetLaplacian(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},SpatialSlur.Vector3d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetDivergence(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetDivergence(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetCurl(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.GetCurl(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},SpatialSlur.Vector3d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.IncrementAt(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},SpatialSlur.Fields.GridPoint3d@,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="amount"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dExtensions.SetAt(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},SpatialSlur.Fields.GridPoint3d@,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="value"></param>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dFactoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactoryExtensions.CreateFromFGA(SpatialSlur.Fields.GridField3dFactory{SpatialSlur.Vector3d},System.String)">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.ISampledField2dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField2dExtensions.Duplicate``1(SpatialSlur.Fields.ISampledField2d{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField2dExtensions.Sample``1(SpatialSlur.Fields.ISampledField2d{``0},SpatialSlur.Fields.IField2d{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="other"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField2dExtensions.Sample``2(SpatialSlur.Fields.ISampledField2d{``0},SpatialSlur.Fields.IField2d{``1},System.Func{``1,``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="field"></param>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Fields.ISampledField3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField3dExtensions.Duplicate``1(SpatialSlur.Fields.ISampledField3d{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField3dExtensions.Sample``1(SpatialSlur.Fields.ISampledField3d{``0},SpatialSlur.Fields.IField3d{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="other"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField3dExtensions.Sample``2(SpatialSlur.Fields.ISampledField3d{``0},SpatialSlur.Fields.IField3d{``1},System.Func{``1,``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="field"></param>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Fields.ISampledFieldExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Duplicate``1(SpatialSlur.Fields.ISampledField{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Clear``1(SpatialSlur.Fields.ISampledField{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Set``1(SpatialSlur.Fields.ISampledField{``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Set``1(SpatialSlur.Fields.ISampledField{``0},SpatialSlur.Fields.ISampledField{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Set``1(SpatialSlur.Fields.ISampledField{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="values"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Action``1(SpatialSlur.Fields.ISampledField{``0},System.Action{``0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Convert``2(SpatialSlur.Fields.ISampledField{``0},System.Func{``0,``1},SpatialSlur.Fields.ISampledField{``1},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="field"></param>
            <param name="converter"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Min(SpatialSlur.Fields.ISampledField{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Max(SpatialSlur.Fields.ISampledField{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Sum(SpatialSlur.Fields.ISampledField{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Mean(SpatialSlur.Fields.ISampledField{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.ApproxEquals(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Max(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Min(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Abs(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Add(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Subtract(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Multiply(SpatialSlur.Fields.ISampledField{System.Double},System.Double,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Double,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            result = f0 + f1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            result = f0 + f1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{System.Double},System.Double,SpatialSlur.Fields.ISampledField{System.Double},System.Double,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            result = f0 * t0 + f1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            result = f0 * t0 + f1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaledDelta(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Double,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            result = f0 + (f1 - f2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaledDelta(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            result = f0 + (f1 - f2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Multiply(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            Component-wise multiplication
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Divide(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            Component-wise division
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.LerpTo(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Double,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.LerpTo(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Normalize(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Intervald,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Evaluate(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Intervald,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Remap(SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Intervald,SpatialSlur.Intervald,SpatialSlur.Fields.ISampledField{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Min(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Max(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Sum(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Mean(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.ApproxEquals(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Max(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Min(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Abs(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Add(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Subtract(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Multiply(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            result = f0 + f1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            result = f0 + f1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            result = f0 * t0 + f1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            result = f0 * t0 + f1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaledDelta(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            result = f0 + (f1 - f2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaledDelta(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            result = f0 + (f1 - f2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.LerpTo(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.LerpTo(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Unitize(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Normalize(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Evaluate(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Remap(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},SpatialSlur.Interval2d,SpatialSlur.Interval2d,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector2d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Min(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Max(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Sum(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Mean(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.ApproxEquals(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Max(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Min(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Abs(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Add(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Subtract(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Multiply(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            result = f0 + f1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            result = f0 + f1 * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            result = f0 * t0 + f1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaled(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            result = f0 * t0 + f1 * t1
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaledDelta(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            result = f0 + (f1 - f2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.AddScaledDelta(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            result = f0 + (f1 - f2) * t
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.LerpTo(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Double,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.LerpTo(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{System.Double},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Unitize(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Normalize(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Evaluate(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledFieldExtensions.Remap(SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},SpatialSlur.Interval3d,SpatialSlur.Interval3d,SpatialSlur.Fields.ISampledField{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.Field2d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Field2d.Create``1(System.Func{SpatialSlur.Vector2d,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueAt"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field2d.CreateTransformed``1(SpatialSlur.Fields.IField2d{``0},SpatialSlur.Transform2d)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transform"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.Field3d">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.Create``1(System.Func{SpatialSlur.Vector3d,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueAt"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateTransformed``1(SpatialSlur.Fields.IField3d{``0},SpatialSlur.Transform3d)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transform"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateUnion(SpatialSlur.Fields.IField3d{System.Double},SpatialSlur.Fields.IField3d{System.Double})">
            <summary>
            
            </summary>
            <param name="f0"></param>
            <param name="f1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateDifference(SpatialSlur.Fields.IField3d{System.Double},SpatialSlur.Fields.IField3d{System.Double})">
            <summary>
            
            </summary>
            <param name="f0"></param>
            <param name="f1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateIntersection(SpatialSlur.Fields.IField3d{System.Double},SpatialSlur.Fields.IField3d{System.Double})">
            <summary>
            
            </summary>
            <param name="f0"></param>
            <param name="f1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreatePlane(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateSphere(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateBox(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateCapsule(SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="axis"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateGyroid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateDistanceToApprox(SpatialSlur.Fields.IField3d{System.Double},SpatialSlur.Fields.IField3d{SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
            <param name="function"></param>
            <param name="gradient"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateDistance(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateSignedDistance(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Field3d.CreateSignedPerpDistance(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="T:SpatialSlur.Fields.GeodesicDistance">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.GeodesicDistance.Eikonal3d">
            <summary>
            Eikonal equation solver for uniform grids in 3 dimensions
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.Eikonal3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.Eikonal3d.Solve(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.Eikonal3d.Solve(System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.GeodesicDistance.Eikonal2d">
            <summary>
            Eikonal equation solver for uniform grids in 2 dimensions
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.Eikonal2d.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.Eikonal2d.Solve(System.Double,System.Double,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.Eikonal2d.Solve(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.CalculateL1(SpatialSlur.Fields.Grid2d,System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the L1 (Manhattan) geodesic distance from the given sources.
            </summary>
            <param name="grid"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.CalculateL1(SpatialSlur.Fields.GridField2d{System.Double},System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the L1 (Manhattan) geodesic distance from the given sources.
            </summary>
            <param name="cost"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.CalculateL2(SpatialSlur.Fields.GridField2d{System.Double},System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the L2 (Euclidiean) geodesic distance from the given sources.
            </summary>
            <param name="cost"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.CalculateL1(SpatialSlur.Fields.Grid3d,System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the L1 (Manhattan) geodesic distance from the given sources.
            </summary>
            <param name="grid"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.CalculateL1(SpatialSlur.Fields.GridField3d{System.Double},System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the L1 (Manhattan) geodesic distance from the given sources.
            </summary>
            <param name="cost"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GeodesicDistance.CalculateL2(SpatialSlur.Fields.GridField3d{System.Double},System.Collections.Generic.IEnumerable{System.Int32},System.Double[],System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the L2 (Euclidiean) geodesic distance from the given sources.
            </summary>
            <param name="cost"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="T:SpatialSlur.Fields.Grid">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid.GetWrapFunction(SpatialSlur.Fields.WrapMode)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid.Wrap(System.Int32,System.Int32,SpatialSlur.Fields.WrapMode)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid.Clamp(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid.Repeat(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid.Mirror(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.FuncField2d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:SpatialSlur.Fields.FuncField2d`1.ValueAt">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.FuncField2d`1.#ctor(System.Func{SpatialSlur.Vector2d,`0})">
            <summary>
            
            </summary>
            <param name="valueAt"></param>
        </member>
        <member name="T:SpatialSlur.Fields.FuncField3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:SpatialSlur.Fields.FuncField3d`1.ValueAt">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.FuncField3d`1.#ctor(System.Func{SpatialSlur.Vector3d,`0})">
            <summary>
            
            </summary>
            <param name="valueAt"></param>
        </member>
        <member name="T:SpatialSlur.Fields.Grid2d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.#ctor(SpatialSlur.Fields.Grid2d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.Origin">
            <summary>
            Gets or sets the origin of the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.Scale">
            <summary>
            Gets or sets the scale of the grid in each dimension.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.ScaleX">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.ScaleY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.Bounds">
            <summary>
            Gets or sets the bounds of the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.Count">
            <summary>
            Gets the number of samples in each dimension.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.CountX">
            <summary>
            Gets the number of samples in the x direction.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.CountY">
            <summary>
            Gets the number of samples in the y direction.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.CountXY">
            <summary>
            Gets the total number of samples in the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.WrapMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.WrapModeX">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid2d.WrapModeY">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.ToWorldSpace(SpatialSlur.Vector2d)">
            <summary>
            Converts from grid space to world space.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.ToWorldSpace(System.Int32)">
            <summary>
            Converts from index to world space.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.ToGridSpace(SpatialSlur.Vector2d)">
            <summary>
            Converts from world space to grid space.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.ToGridSpace(System.Int32)">
            <summary>
            Converts from index to grid space.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.ToIndex(SpatialSlur.Vector2i)">
            <summary>
            Converts from grid space to index.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.ToIndexUnsafe(SpatialSlur.Vector2i)">
            <summary>
            Converts from grid space to index.
            Assumes the given point is within the bounds of the grid.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.Wrap(SpatialSlur.Vector2i)">
            <summary>
            Wraps the given point in grid space to the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.WrapX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.WrapY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid2d.GetBoundaryOffsets">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.Grid3d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.#ctor(SpatialSlur.Fields.Grid3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.Origin">
            <summary>
            Gets or sets the origin of the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.Scale">
            <summary>
            Gets or sets the scale of the grid in each dimension.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.ScaleX">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.ScaleY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.ScaleZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.Bounds">
            <summary>
            Gets or sets the bounds of the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.Count">
            <summary>
            Returns the number of samples in each dimension.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.CountX">
            <summary>
            Returns the number of samples in the x dimension.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.CountY">
            <summary>
            Returns the number of samples in the y dimension.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.CountZ">
            <summary>
            Returns the number of samples in the z dimension
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.CountXY">
            <summary>
            Returns the number of samples in a single layer of the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.CountXYZ">
            <summary>
            Returns the total number of samples in the grid.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.WrapMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.WrapModeX">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.WrapModeY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.Grid3d.WrapModeZ">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.ToWorldSpace(SpatialSlur.Vector3d)">
            <summary>
            Converts from grid space to world space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.ToWorldSpace(System.Int32)">
            <summary>
            Converts from index to world space.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.ToGridSpace(SpatialSlur.Vector3d)">
            <summary>
            Converts from world space to grid space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.ToGridSpace(System.Int32)">
            <summary>
            Converts from index to grid space.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.ToIndex(SpatialSlur.Vector3i)">
            <summary>
            Converts from grid space to index.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.ToIndexUnsafe(SpatialSlur.Vector3i)">
            <summary>
            Converts from grid space to index.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.Wrap(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.WrapX(System.Int32)">
            <summary>
            Applies a wrap function to the given index based on the current wrap mode.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.WrapY(System.Int32)">
            <summary>
            Applies a wrap function to the given index based on the current wrap mode.
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.WrapZ(System.Int32)">
            <summary>
            Applies a wrap function to the given index based on the current wrap mode.
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Grid3d.GetBoundaryOffsets">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridField2d.Double">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridField2d.Vector2d">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridField2d.Vector3d">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.op_Implicit(SpatialSlur.Fields.GridField2d{`0})~`0[]">
            <summary>
            
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.#ctor(SpatialSlur.Fields.Grid2d)">
            <summary>
            
            </summary>
            <param name="grid"></param>
        </member>
        <member name="P:SpatialSlur.Fields.GridField2d`1.Values">
            <summary>
            Returns a reference to the backing array of grid values.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.GridField2d`1.SampleMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.GridField2d`1.Item(SpatialSlur.Vector2i)">
            <summary>
            Gets or sets the value at the give point in grid space.
            Note that this performs bounds checks for each dimension.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.Duplicate(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAt(SpatialSlur.Vector2i)">
            <summary>
            Returns the value at the given point in grid space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAtUnsafe(SpatialSlur.Vector2i)">
            <summary>
            Returns the value at the given point in grid space.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAt(SpatialSlur.Vector2d)">
            <inheritdoc />
            <summary>
            Returns the value at the given point in world space using the current sample mode.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAtUnsafe(SpatialSlur.Vector2d)">
            <summary>
            Returns the value at the given point in world space based on the current sample mode.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAtNearest(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAtNearestUnsafe(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAtLinear(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAtLinearUnsafe(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.ValueAt(SpatialSlur.Fields.GridPoint2d@)">
            <summary>
            Returns the value at the given grid point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.GridPointAt(SpatialSlur.Vector2d)">
            <summary>
            Returns a grid point at the given point in world space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.GridPointAt(SpatialSlur.Vector2d,SpatialSlur.Fields.GridPoint2d@)">
            <summary>
            Returns a grid point at the given point in world space.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.GridPointAt(SpatialSlur.Vector2i,SpatialSlur.Fields.GridPoint2d@)">
            <summary>
            Returns a grid point at the given point in grid space
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.GridPointAtUnsafe(SpatialSlur.Vector2d)">
            <summary>
            Returns a grid point at the given point in world space.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.GridPointAtUnsafe(SpatialSlur.Vector2d,SpatialSlur.Fields.GridPoint2d@)">
            <summary>
            Returns a grid point at the given point in world space.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.GridPointAtUnsafe(SpatialSlur.Vector2i,SpatialSlur.Fields.GridPoint2d@)">
            <summary>
            Returns a grid point at the given point in grid space.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundary(`0)">
            <summary>
            Sets all values along the boundary of the field to a given constant
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundaryX(`0)">
            <summary>
            Sets all values along the X boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundaryY(`0)">
            <summary>
            Sets all values along the Y boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundaryX0(`0)">
            <summary>
            Sets all values along the lower X boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundaryX1(`0)">
            <summary>
            Sets all values along the upper X boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundaryY0(`0)">
            <summary>
            Sets all values along the lower Y boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SetBoundaryY1(`0)">
            <summary>
            Sets all values along the upper Y boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SampleInWorldSpace(System.Func{SpatialSlur.Vector2d,`0},System.Boolean)">
            <summary>
            Sets this field to some function of its world space coordinates.
            </summary>
            <param name="func"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SampleInGridSpace(System.Func{SpatialSlur.Vector2i,`0},System.Boolean)">
            <summary>
            Sets this field to some function of its grid space coordinates.
            </summary>
            <param name="func"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.SampleInUnitSpace(System.Func{SpatialSlur.Vector2d,`0},System.Boolean)">
            <summary>
            Sets this field to some function of its unit space coordinates (0-1).
            </summary>
            <param name="func"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.Sample(SpatialSlur.Fields.GridField2d{`0},System.Boolean)">
            <summary>
            Sets this field to the values of another.
            </summary>
            <param name="other"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2d`1.Sample``1(SpatialSlur.Fields.GridField2d{``0},System.Func{``0,`0},System.Boolean)">
            <summary>
            Sets this field to the values of another.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridField3d.Double">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridField3d.Vector3d">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridField3d.Matrix3d">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.op_Implicit(SpatialSlur.Fields.GridField3d{`0})~`0[]">
            <summary>
            
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.#ctor(SpatialSlur.Fields.Grid3d)">
            <summary>
            
            </summary>
            <param name="grid"></param>
        </member>
        <member name="P:SpatialSlur.Fields.GridField3d`1.Values">
            <inheritdoc />
        </member>
        <member name="P:SpatialSlur.Fields.GridField3d`1.SampleMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.GridField3d`1.Item(SpatialSlur.Vector3i)">
            <summary>
            Gets or sets the value at the give point in grid space.
            Note that this performs bounds checks for each dimension.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.Duplicate(System.Boolean)">
            <summary>
            Returns a deep copy of this field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAt(SpatialSlur.Vector3i)">
            <summary>
            Returns the value at the given point in grid space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAtUnsafe(SpatialSlur.Vector3i)">
            <summary>
            Returns the value at the given point in grid space.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAt(SpatialSlur.Vector3d)">
            <summary>
            Returns the value at the given point in world space based on the current sample mode.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAtUnsafe(SpatialSlur.Vector3d)">
            <summary>
            Returns the value at the given point in world space based on the current sample mode.
            Assumes the given point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAtNearest(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAtNearestUnsafe(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAtLinear(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAtLinearUnsafe(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.ValueAt(SpatialSlur.Fields.GridPoint3d@)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridPointAt(SpatialSlur.Vector3d)">
            <summary>
            Returns a grid point at the given point in world space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridPointAt(SpatialSlur.Vector3d,SpatialSlur.Fields.GridPoint3d@)">
            <summary>
            Returns a grid point at the given point in world space.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridPointAt(SpatialSlur.Vector3i,SpatialSlur.Fields.GridPoint3d@)">
            <summary>
            Returns a grid point at the given point in grid space.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridPointAtUnsafe(SpatialSlur.Vector3d)">
            <summary>
            Returns a grid point at the given point in world space.
            Assumes the point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridPointAtUnsafe(SpatialSlur.Vector3d,SpatialSlur.Fields.GridPoint3d@)">
            <summary>
            Returns a grid point at the given point in world space.
            Assumes the point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridPointAtUnsafe(SpatialSlur.Vector3i,SpatialSlur.Fields.GridPoint3d@)">
            <summary>
            Returns a grid point at the given point in grid space.
            Assumes the point is within the bounds of the grid.
            </summary>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundary(`0)">
            <summary>
            Sets all values along the boundary of the field to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryXY(`0)">
            <summary>
            Sets all values along the XY boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryXZ(`0)">
            <summary>
            Sets all values along the XZ boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryYZ(`0)">
            <summary>
            Sets all values along the YZ boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryXY0(`0)">
            <summary>
            Sets all values along the lower XY boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryXY1(`0)">
            <summary>
            Sets all values along the upper XY boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryXZ0(`0)">
            <summary>
            Sets all values along the lower YZ boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryXZ1(`0)">
            <summary>
            Sets all values along the upper XZ boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryYZ0(`0)">
            <summary>
            Sets all values along the lower YZ boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.SetBoundaryYZ1(`0)">
            <summary>
            Sets all values along the upper YZ boundary to a given constant.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.WorldSpaceFunction(System.Func{SpatialSlur.Vector3d,`0},System.Boolean)">
            <summary>
            Sets this field to some function of its world space coordinates.
            </summary>
            <param name="func"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.GridSpaceFunction(System.Func{SpatialSlur.Vector3i,`0},System.Boolean)">
            <summary>
            Sets this field to some function of its grid space coordinates.
            </summary>
            <param name="func"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.UnitSpaceFunction(System.Func{SpatialSlur.Vector3d,`0},System.Boolean)">
            <summary>
            Sets this field to some function of its unit space coordinates (0-1).
            </summary>
            <param name="func"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.Sample(SpatialSlur.Fields.GridField3d{`0},System.Boolean)">
            <summary>
            Sets this field to the values of another.
            </summary>
            <param name="other"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3d`1.Sample``1(SpatialSlur.Fields.GridField3d{``0},System.Func{``0,`0},System.Boolean)">
            <summary>
            Sets this field to the values of another.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Fields.GridPoint2d">
            <summary>
            Barycentric representation of position in a two-dimensional grid.
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Weight0">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Index0">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Weight1">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Index1">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Weight2">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Index2">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Weight3">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint2d.Index3">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridPoint2d.SetWeights(SpatialSlur.Vector2d)">
            <summary>
            Assumes components of the given point are between 0 and 1 inclusive.
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:SpatialSlur.Fields.GridPoint3d">
            <summary>
            Barycentric representation of position in a three-dimensional grid.
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight0">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index0">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight1">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index1">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight2">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index2">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight3">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index3">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight4">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index4">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight5">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index5">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight6">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index6">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Weight7">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.GridPoint3d.Index7">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridPoint3d.SetWeights(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:SpatialSlur.Fields.IDWConstant3d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWConstant3d.Create``1(System.Double,``0,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="distance"></param>
            <param name="value"></param>
            <param name="influence"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWConstant3d.Create``1(SpatialSlur.Fields.IDWConstant3d{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWConstant3d.Create``2(SpatialSlur.Fields.IDWConstant3d{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IDWConstant3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SpatialSlur.Fields.IDWConstant3d`1.Distance">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWConstant3d`1.DistanceTo(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWConstant3d`1.Duplicate">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWConstant3d`1.Convert``1(System.Func{`0,``0})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.IDWField3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.IDWField3d.Double">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.IDWField3d.Vector3d">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Fields.IDWField3d`1">
            <summary>
            Field type that uses inverse distance weighting to interpolate between known spatial values.
            https://en.wikipedia.org/wiki/Inverse_distance_weighting
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3d`1.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.IDWField3d`1.Objects">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.IDWField3d`1.Power">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.IDWField3d`1.Epsilon">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3d`1.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3d`1.ValueAt(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWField3d`1.GradientAt(SpatialSlur.Vector3d,`0@,`0@,`0@)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.IDWMesh3d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWMesh3d.Create``1(Rhino.Geometry.Mesh,``0,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mesh"></param>
            <param name="value"></param>
            <param name="influence"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWMesh3d.Create``1(SpatialSlur.Fields.IDWMesh3d{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWMesh3d.Create``2(SpatialSlur.Fields.IDWMesh3d{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IDWMesh3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SpatialSlur.Fields.IDWMesh3d`1.Mesh">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWMesh3d`1.DistanceTo(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWMesh3d`1.Duplicate">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWMesh3d`1.Convert``1(System.Func{`0,``0})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.IDWPoint3d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWPoint3d.Create``1(SpatialSlur.Vector3d,``0,System.Double)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="point"></param>
            <param name="value"></param>
            <param name="influence"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWPoint3d.Create``1(SpatialSlur.Fields.IDWPoint3d{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWPoint3d.Create``2(SpatialSlur.Fields.IDWPoint3d{``1},System.Func{``1,``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IDWPoint3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SpatialSlur.Fields.IDWPoint3d`1.Point">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWPoint3d`1.DistanceTo(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWPoint3d`1.Duplicate">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.IDWPoint3d`1.Convert``1(System.Func{`0,``0})">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Fields.ImplicitSurfaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.Gyroid(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.Gyroid(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.Diamond(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.Diamond(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.Neovius(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.Neovius(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.IWP(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.IWP(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.HybridPW(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ImplicitSurfaces.HybridPW(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.GridField2dFactory`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.Create(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.Create(System.Int32,System.Int32,SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="origin"></param>
            <param name="scale"></param>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.Create(System.Int32,System.Int32,SpatialSlur.Interval2d)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.Create(SpatialSlur.Fields.Grid2d)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.Create``1(SpatialSlur.Fields.GridField2d{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.CreateCopy(SpatialSlur.Fields.GridField2d{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.CreateCopy``1(SpatialSlur.Fields.GridField2d{``0},System.Func{``0,`0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField2dFactory`1.CreateFromImage(System.Drawing.Bitmap,System.Func{System.Drawing.Color,`0})">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.GridField3dFactory`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.Create(System.Int32,System.Int32,System.Int32,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="origin"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.Create(System.Int32,System.Int32,System.Int32,SpatialSlur.Interval3d)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.Create(SpatialSlur.Fields.Grid3d)">
            <summary>
            
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.Create``1(SpatialSlur.Fields.GridField3d{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.CreateCopy(SpatialSlur.Fields.GridField3d{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.CreateCopy``1(SpatialSlur.Fields.GridField3d{``0},System.Func{``0,`0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.GridField3dFactory`1.CreateFromImageStack(System.Collections.Generic.IList{System.Drawing.Bitmap},System.Func{System.Drawing.Color,`0})">
            <summary>
            
            </summary>
            <param name="images"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IDWFieldFactory`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWFieldFactory`1.Create(System.Double,System.Double)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWFieldFactory`1.CreateCopy(SpatialSlur.Fields.IDWField3d{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWFieldFactory`1.CreateCopy``1(SpatialSlur.Fields.IDWField3d{``0},System.Func{``0,`0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IDWObject3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.IDWObject3d`1.DistanceTo(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Fields.IDWObject3d`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.IDWObject3d`1.Influence">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IDWObject3d`1.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.IDWObject3d`1.Convert``1(System.Func{`0,``0})">
            <summary>
            
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3dFactory`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dFactory`1.Create(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dFactory`1.Create(SpatialSlur.Fields.MeshField3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dFactory`1.CreateCopy(SpatialSlur.Fields.MeshField3d{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3dFactory`1.CreateCopy``1(SpatialSlur.Fields.MeshField3d{``0},System.Func{``0,`0},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="other"></param>
            <param name="converter"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.ISampledField`1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.ISampledField`1.Values">
            <summary>
            Returns the field's array of sample values.
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.ISampledField`1.Count">
            <summary>
            Returns the number of samples in the field.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField`1.Duplicate(System.Boolean)">
            <summary>
            Returns a copy of this field.
            Note that that value array of the returned field is a deep copy but other fields may be shallow depending on the implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.ISampledField2d`1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.ISampledField2d`1.Points">
            <summary>
            Returns all sample points used by this field.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField2d`1.PointAt(System.Int32)">
            <summary>
            Returns the sample point at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField2d`1.Duplicate(System.Boolean)">
            <summary>
            Returns a copy of this field.
            Note that that sample value array of the returned field is a deep copy but other fields may be shallow depending on the implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.ISampledField3d`1">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.ISampledField3d`1.Points">
            <summary>
            Returns all sample points used by this field.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField3d`1.PointAt(System.Int32)">
            <summary>
            Returns the sample point at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.ISampledField3d`1.Duplicate(System.Boolean)">
            <summary>
            Returns a copy of this field.
            Note that that sample value array of the returned field is a deep copy but other fields may be shallow depending on the implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IField2d`1">
            <summary>
            Interface for a spatially varying function in 2 dimensions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.IField2d`1.ValueAt(SpatialSlur.Vector2d)">
            <summary>
            Returns the value at the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IField3d`1">
            <summary>
            Interface for a spatially varying function in 3 dimensions.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.IField3d`1.ValueAt(SpatialSlur.Vector3d)">
            <summary>
            Returns the value at the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.IGradient2d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.IGradient2d`1.GradientAt(SpatialSlur.Vector2d,`0@,`0@)">
            <summary>
            Returns the the gradient at the given point.
            </summary>
            <param name="point"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="T:SpatialSlur.Fields.IGradient3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.IGradient3d`1.GradientAt(SpatialSlur.Vector3d,`0@,`0@,`0@)">
            <summary>
            Returns the the gradient at the given point.
            </summary>
            <param name="point"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.MeshField3d.Double">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Fields.MeshField3d.Vector3d">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d.#ctor(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d.#ctor(SpatialSlur.Fields.MeshField3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SpatialSlur.Fields.MeshField3d.Mesh">
            <summary>
            Returns the mesh referenced by this field.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d.RebuildQueryMesh">
            <summary>
            This must be called after making changes to the referenced mesh
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d.ClosestMeshPoint(SpatialSlur.Vector3d)">
            <summary>
            Returns the closest mesh point
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:SpatialSlur.Fields.MeshField3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.op_Implicit(SpatialSlur.Fields.MeshField3d{`0})~SpatialSlur.Collections.ArrayView{`0}">
            <summary>
            
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.#ctor(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.#ctor(SpatialSlur.Fields.MeshField3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SpatialSlur.Fields.MeshField3d`1.Values">
            <inheritdoc />
        </member>
        <member name="P:SpatialSlur.Fields.MeshField3d`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.Duplicate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.Duplicate(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.ValueAt(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.ValueAt(Rhino.Geometry.MeshPoint)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.ValueAt(SpatialSlur.Vector3d,SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.EnsureCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.MeshField3d`1.TrimExcess">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.Noise">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.Noise.Perlin">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.SetPermutation(System.Int32)">
            <summary>
            Sets the permutation table.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.ValueAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.ValueAt(System.Double,System.Double)">
            <summary>
            Returns the noise value at the given coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.ToIndex(System.Int32,System.Int32)">
            <summary>
            Returns the gradient table index for the given coordinates.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GradDot(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.VectorAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.VectorAt(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GetX(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GetY(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GradientAt(SpatialSlur.Vector2d)">
            <summary>
            Returns the gradient of noise values.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GradientAt(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.CurlAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.CurlAt(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.ValueAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.ValueAt(System.Double,System.Double,System.Double)">
            <summary>
            Returns the noise value at the given coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.ToIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the gradient table index for the given coordinates.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GradDot(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.VectorAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.VectorAt(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GetX(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GetY(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GetZ(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GradientAt(SpatialSlur.Vector3d)">
            <summary>
            Returns the gradient of noise values.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.GradientAt(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.CurlAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Perlin.CurlAt(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.Noise.Simplex">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.#cctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.SetPermutation(System.Int32)">
            <summary>
            Sets the permutation table.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.ValueAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.ValueAt(System.Double,System.Double)">
            <summary>
            Returns the noise value at the given coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetNoise(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.ToIndex(System.Int32,System.Int32)">
            <summary>
            Returns the gradient table index for the given coordinates.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GradDot(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.VectorAt(SpatialSlur.Vector2d)">
            <summary>
            Returns a vector composed of offset noise values.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.VectorAt(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetX(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetY(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GradientAt(SpatialSlur.Vector2d)">
            <summary>
            Returns the gradient of noise values.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GradientAt(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.CurlAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.CurlAt(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.ValueAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.ValueAt(System.Double,System.Double,System.Double)">
            <summary>
            Returns the noise value at the given coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetNoise(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.ToIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the gradient table index for the given coordinates.
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GradDot(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.VectorAt(SpatialSlur.Vector3d)">
            <summary>
            Returns a vector composed of offset noise values.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.VectorAt(System.Double,System.Double,System.Double)">
            <summary>
            Returns a vector composed of offset noise values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetX(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetY(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GetZ(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GradientAt(SpatialSlur.Vector3d)">
            <summary>
            Returns the gradient of noise values.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.GradientAt(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.CurlAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Noise.Simplex.CurlAt(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.PerlinNoise2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.PerlinNoise2d.Translation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.PerlinNoise2d.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.ToNoiseSpace(SpatialSlur.Vector2d@)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.ValueAt(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.VectorAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.GradientAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise2d.CurlAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.PerlinNoise3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.PerlinNoise3d.Translation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.PerlinNoise3d.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.ToNoiseSpace(SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.ValueAt(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.VectorAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.GradientAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.PerlinNoise3d.CurlAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.SimplexNoise2d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.SimplexNoise2d.Translation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.#ctor(SpatialSlur.Vector2d,SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.SimplexNoise2d.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.ToNoiseSpace(SpatialSlur.Vector2d@)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.ValueAt(SpatialSlur.Vector2d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.VectorAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.GradientAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise2d.CurlAt(SpatialSlur.Vector2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.SimplexNoise3d">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Fields.SimplexNoise3d.Translation">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.#ctor(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.SimplexNoise3d.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.ToNoiseSpace(SpatialSlur.Vector3d@)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.ValueAt(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.VectorAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.GradientAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.SimplexNoise3d.CurlAt(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.Streamline">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFrom(SpatialSlur.Fields.IField2d{SpatialSlur.Vector2d},SpatialSlur.Vector2d,System.Double,SpatialSlur.Fields.IntegrationMode)">
            <summary>
            Returns a streamline through the given vector field starting at the given point.
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="stepSize"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFromEuler(SpatialSlur.Fields.IField2d{SpatialSlur.Vector2d},SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFromRK2(SpatialSlur.Fields.IField2d{SpatialSlur.Vector2d},SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFromRK4(SpatialSlur.Fields.IField2d{SpatialSlur.Vector2d},SpatialSlur.Vector2d,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFrom(SpatialSlur.Fields.IField3d{SpatialSlur.Vector3d},SpatialSlur.Vector3d,System.Double,SpatialSlur.Fields.IntegrationMode)">
            <summary>
            Returns a streamline through the given vector field starting at the given point.
            </summary>
            <param name="field"></param>
            <param name="point"></param>
            <param name="stepSize"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFromEuler(SpatialSlur.Fields.IField3d{SpatialSlur.Vector3d},SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFromRK2(SpatialSlur.Fields.IField3d{SpatialSlur.Vector3d},SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Streamline.IntegrateFromRK4(SpatialSlur.Fields.IField3d{SpatialSlur.Vector3d},SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Convolve(SpatialSlur.Fields.GridField2d{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.ValueTuple{SpatialSlur.Vector2i,System.Double}},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="kernel"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Convolve(SpatialSlur.Fields.GridField2d{SpatialSlur.Vector2d},SpatialSlur.Collections.ReadOnlyArrayView{System.ValueTuple{SpatialSlur.Vector2i,System.Double}},SpatialSlur.Vector2d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="kernel"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Convolve(SpatialSlur.Fields.GridField3d{System.Double},SpatialSlur.Collections.ReadOnlyArrayView{System.ValueTuple{SpatialSlur.Vector3i,System.Double}},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="kernel"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Convolve(SpatialSlur.Fields.GridField3d{SpatialSlur.Vector3d},SpatialSlur.Collections.ReadOnlyArrayView{System.ValueTuple{SpatialSlur.Vector3i,System.Double}},SpatialSlur.Vector3d[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="kernel"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Diffuse(SpatialSlur.Fields.GridField2d{System.Double},System.Double[],System.Double,System.Boolean)">
            <summary>
            Adds the Laplacian of the field to the deltas array.
            </summary>
            <param name="field"></param>
            <param name="deltas"></param>
            <param name="rate"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Diffuse(SpatialSlur.Fields.GridField3d{System.Double},System.Double[],System.Double,System.Boolean)">
            <summary>
            Adds the Laplacian of the field to the deltas array.
            </summary>
            <param name="field"></param>
            <param name="deltas"></param>
            <param name="rate"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.ErodeThermal(SpatialSlur.Fields.GridField2d{System.Double},System.Double[],System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="deltas"></param>
            <param name="slope"></param>
            <param name="rate"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.ErodeThermal(SpatialSlur.Fields.GridField3d{System.Double},System.Double[],System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="deltas"></param>
            <param name="slope"></param>
            <param name="rate"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.Filter.Bifurcate(SpatialSlur.Fields.ISampledField{System.Double},System.Double[],System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="deltas"></param>
            <param name="thresh"></param>
            <param name="rate"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Fields.DistanceFunctions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceFunctions.Sphere(SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceFunctions.Box(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceFunctions.Capsule(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="start"></param>
            <param name="axis"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceFunctions.Union(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="d0"></param>
            <param name="d1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceFunctions.Difference(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="d0"></param>
            <param name="d1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceFunctions.Intersection(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="d0"></param>
            <param name="d1"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Fields.DistanceTransform">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.DistanceTransform.View">
            <summary>
            Static creation methods for generic type inference
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.View.Create``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.View.Create``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Fields.DistanceTransform.View`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.View`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="start"></param>
            <param name="stride"></param>
        </member>
        <member name="P:SpatialSlur.Fields.DistanceTransform.View`1.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.DistanceTransform.View`1.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.DistanceTransform.View`1.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Fields.DistanceTransform.View`1.Item(System.Int32)">
            <summary>
            Note that this does not perform an additional bounds check.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2Sqr(SpatialSlur.Fields.DistanceTransform.View{System.Double},SpatialSlur.Fields.DistanceTransform.View{System.ValueTuple{System.Int32,System.Double}},System.Double,System.Int32,SpatialSlur.Fields.DistanceTransform.View{System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.EnsureCapacity``1(``0[]@,System.Int32)">
            <summary>
            Re-allocates the source array if its length is less than the given minimum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="min"></param>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2(SpatialSlur.Fields.GridField2d{System.Double},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2Sqr(SpatialSlur.Fields.GridField2d{System.Double},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2SqrParallel(SpatialSlur.Fields.GridField2d{System.Double},System.Double[])">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2(SpatialSlur.Fields.GridField3d{System.Double},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2Sqr(SpatialSlur.Fields.GridField3d{System.Double},System.Double[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Fields.DistanceTransform.CalculateL2SqrParallel(SpatialSlur.Fields.GridField3d{System.Double},System.Double[])">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.MeshFieldExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{System.Double},SpatialSlur.Collections.ArrayView{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{System.Double},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="getWeight"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{System.Double},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double},SpatialSlur.Collections.ArrayView{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="getWeight"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetGradient(SpatialSlur.Fields.MeshField3d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetGradient(SpatialSlur.Fields.MeshField3d{System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetGradient(SpatialSlur.Fields.MeshField3d{System.Double},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="getWeight"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetGradient(SpatialSlur.Fields.MeshField3d{System.Double},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="getWeight"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{SpatialSlur.Vector3d},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{SpatialSlur.Vector3d},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="getWeight"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshFieldExtensions.GetLaplacian(SpatialSlur.Fields.MeshField3d{SpatialSlur.Vector3d},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double},SpatialSlur.Collections.ArrayView{SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="getWeight"></param>
            <param name="result"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.ArrayViewExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.ArrayViewExtensions.Get``1(SpatialSlur.Collections.ArrayView{``0},System.Int32)">
            <summary>
            Workaround for lack of support for ref returns in Grasshopper script components
            </summary>
            <typeparam name="T"></typeparam>
            <param name="view"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.ArrayViewExtensions.Set``1(SpatialSlur.Collections.ArrayView{``0},System.Int32,``0)">
            <summary>
            Workaround for lack of support for ref returns in Grasshopper script components
            </summary>
            <typeparam name="T"></typeparam>
            <param name="view"></param>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.PriorityQueueExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.PriorityQueueExtensions.GetMin``2(SpatialSlur.Collections.PriorityQueue{``0,``1},``0@,``1@)">
            <summary>
            Workaround for lack of support for ValueTuple in Grasshopper script components
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.PriorityQueueExtensions.RemoveMin``2(SpatialSlur.Collections.PriorityQueue{``0,``1},``0@,``1@)">
            <summary>
            Workaround for lack of support for ValueTuple in Grasshopper script components
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.Isosurface">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Rhino.Isosurface.MarchingCubes">
             <summary>
            
             </summary>
        </member>
        <member name="F:SpatialSlur.Rhino.Isosurface.MarchingCubes._edgeIndices">
            <summary>
            Vertices belonging to each edge (12 x 2)
            </summary>
        </member>
        <member name="F:SpatialSlur.Rhino.Isosurface.MarchingCubes._corners">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Rhino.Isosurface.MarchingCubes._edgeTable">
            <summary>
            Intersecting edges for each case
            </summary>
        </member>
        <member name="F:SpatialSlur.Rhino.Isosurface.MarchingCubes._triTable">
            <summary>
            Face topology for each case
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(SpatialSlur.Fields.GridField3d{System.Double},System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="field"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Double[],SpatialSlur.Fields.Grid3d,System.Double)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="grid"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Double[],SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="origin"></param>
            <param name="scale"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Double[],System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(SpatialSlur.Fields.GridField3d{System.Double},SpatialSlur.Vector3d[],System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="field"></param>
            <param name="normals"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Double[],SpatialSlur.Vector3d[],SpatialSlur.Fields.Grid3d,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="normals"></param>
            <param name="grid"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Double[],SpatialSlur.Vector3d[],SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="normals"></param>
            <param name="origin"></param>
            <param name="scale"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Double[],SpatialSlur.Vector3d[],System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="normals"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Collections.Generic.IReadOnlyList{System.Double[]},SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="origin"></param>
            <param name="scale"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(System.Collections.Generic.IReadOnlyList{System.Double[]},System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="values"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(SpatialSlur.Vector3d[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="points"></param>
            <param name="values"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.Evaluate(SpatialSlur.Vector3d[],SpatialSlur.Vector3d[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an isosurface mesh at the given threshold.
            </summary>
            <param name="points"></param>
            <param name="normals"></param>
            <param name="values"></param>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="countZ"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.GetTransform(SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.GetIndexOffsets(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countXY"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.ExpandIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="countX"></param>
            <param name="countXY"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.AppendVoxelMesh(Rhino.Geometry.Mesh,System.Double[],SpatialSlur.Vector3d,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="values"></param>
            <param name="offset"></param>
            <param name="caseIndex"></param>
            <param name="threshold"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.AppendVoxelMesh(Rhino.Geometry.Mesh,System.ValueTuple{SpatialSlur.Vector3d,System.Double}[],SpatialSlur.Vector3d,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="voxel"></param>
            <param name="offset"></param>
            <param name="caseIndex"></param>
            <param name="threshold"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.AppendVoxelMesh(Rhino.Geometry.Mesh,System.ValueTuple{SpatialSlur.Vector3d,System.Double}[],System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="voxel"></param>
            <param name="caseIndex"></param>
            <param name="threshold"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.Isosurface.MarchingCubes.AppendVoxelMesh(Rhino.Geometry.Mesh,System.ValueTuple{SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double}[],System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="voxel"></param>
            <param name="caseIndex"></param>
            <param name="threshold"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.BoundingBoxExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.BoundingBoxExtensions.ToInterval2d(Rhino.Geometry.BoundingBox)">
            <summary>
            
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.BoundingBoxExtensions.ToInterval3d(Rhino.Geometry.BoundingBox)">
            <summary>
            
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.GridField2dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.GridField2dExtensions.ToMesh``1(SpatialSlur.Fields.GridField2d{``0},System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="getColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.GridField2dExtensions.ToMesh``1(SpatialSlur.Fields.GridField2d{``0},System.Func{``0,System.Drawing.Color},System.Func{``0,System.Double})">
            <summary>
            Converts the field to a colored heightfield mesh.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="getColor"></param>
            <param name="getHeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.GridField2dExtensions.ToPolySoup(SpatialSlur.Fields.Grid2d,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.GridField2dExtensions.ToPolySoup``1(SpatialSlur.Fields.GridField2d{``0},System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="getColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.GridField2dExtensions.ToPolySoup``1(SpatialSlur.Fields.GridField2d{``0},System.Func{``0,System.Drawing.Color},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="getColor"></param>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.GridField3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.GridField3dExtensions.ToPolySoup(SpatialSlur.Fields.Grid3d,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.HeGraphFactoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.HeGraphFactoryExtensions.CreateFromLineSegments``3(SpatialSlur.Meshes.Impl.HeGraphFactory{``0,``1,``2},System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Double,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="lines"></param>
            <param name="tolerance"></param>
            <param name="allowMultiEdges"></param>
            <param name="allowLoops"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeGraphFactoryExtensions.CreateFromLineSegments``3(SpatialSlur.Meshes.Impl.HeGraphFactory{``0,``1,``2},System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Action{``1,SpatialSlur.Vector3d},System.Double,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="G"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="factory"></param>
            <param name="lines"></param>
            <param name="setPosition"></param>
            <param name="tolerance"></param>
            <param name="allowMultiEdges"></param>
            <param name="allowLoops"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeGraphFactoryExtensions.CreateFromVertexTopology``3(SpatialSlur.Meshes.Impl.HeGraphFactory{``0,``1,``2},Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <typeparam name="G"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="factory"></param>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeGraphFactoryExtensions.CreateFromVertexTopology``3(SpatialSlur.Meshes.Impl.HeGraphFactory{``0,``1,``2},Rhino.Geometry.Mesh,System.Action{``1,Rhino.Geometry.Point3f},System.Action{``1,Rhino.Geometry.Vector3f},System.Action{``1,Rhino.Geometry.Point2f},System.Action{``1,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="G"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="factory"></param>
            <param name="mesh"></param>
            <param name="setPosition"></param>
            <param name="setNormal"></param>
            <param name="setTexture"></param>
            <param name="setColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeGraphFactoryExtensions.CreateFromFaceTopology``3(SpatialSlur.Meshes.Impl.HeGraphFactory{``0,``1,``2},Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <typeparam name="G"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="factory"></param>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeGraphFactoryExtensions.CreateFromFaceTopology``3(SpatialSlur.Meshes.Impl.HeGraphFactory{``0,``1,``2},Rhino.Geometry.Mesh,System.Action{``1,Rhino.Geometry.Point3f},System.Action{``1,Rhino.Geometry.Vector3f},System.Action{``1,Rhino.Geometry.Point2f},System.Action{``1,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="G"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="factory"></param>
            <param name="mesh"></param>
            <param name="setPosition"></param>
            <param name="setNormal"></param>
            <param name="setTexture"></param>
            <param name="setColor"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.HeMeshExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshExtensions.ToMesh``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="quadrangulator"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshExtensions.ToMesh``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,Rhino.Geometry.Point3f},System.Func{``0,Rhino.Geometry.Vector3f},System.Func{``0,Rhino.Geometry.Point2f},System.Func{``0,System.Drawing.Color},SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="quadrangulator"></param>
            <param name="getPosition"></param>
            <param name="getNormal"></param>
            <param name="getTexture"></param>
            <param name="getColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshExtensions.ToPolySoup``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``2,System.Drawing.Color},SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="getColor"></param>
            <param name="quadrangulator"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshExtensions.ToPolySoup``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,Rhino.Geometry.Point3f},System.Func{``2,System.Drawing.Color},SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="getColor"></param>
            <param name="quadrangulator"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.HeMeshFactoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshFactoryExtensions.CreateFromMesh``4(SpatialSlur.Meshes.Impl.HeMeshFactory{``0,``1,``2,``3},Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="factory"></param>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshFactoryExtensions.CreateFromMesh``4(SpatialSlur.Meshes.Impl.HeMeshFactory{``0,``1,``2,``3},Rhino.Geometry.Mesh,System.Action{``1,Rhino.Geometry.Point3f},System.Action{``1,Rhino.Geometry.Vector3f},System.Action{``1,Rhino.Geometry.Point2f},System.Action{``1,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="factory"></param>
            <param name="mesh"></param>
            <param name="setPosition"></param>
            <param name="setNormal"></param>
            <param name="setTexture"></param>
            <param name="setColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshFactoryExtensions.CreateFromPolylines``4(SpatialSlur.Meshes.Impl.HeMeshFactory{``0,``1,``2,``3},System.Collections.Generic.IEnumerable{Rhino.Geometry.Polyline},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="factory"></param>
            <param name="polylines"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeMeshFactoryExtensions.CreateFromPolylines``4(SpatialSlur.Meshes.Impl.HeMeshFactory{``0,``1,``2,``3},System.Collections.Generic.IEnumerable{Rhino.Geometry.Polyline},System.Action{``1,SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
            <typeparam name="M"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="factory"></param>
            <param name="polylines"></param>
            <param name="setPosition"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.QuadStripExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.QuadStripExtensions.ToMesh``3(SpatialSlur.Meshes.QuadStrip{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="strip"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.QuadStripExtensions.ToMesh``3(SpatialSlur.Meshes.QuadStrip{``0,``1,``2},System.Func{``0,Rhino.Geometry.Point3f},System.Func{``0,Rhino.Geometry.Vector3f},System.Func{``0,Rhino.Geometry.Point2f},System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="strip"></param>
            <param name="getPosition"></param>
            <param name="getNormal"></param>
            <param name="getTexture"></param>
            <param name="getColor"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.ISampledField3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.ISampledField3dExtensions.ToPointCloud``1(SpatialSlur.Fields.ISampledField3d{``0},System.Func{``0,System.Drawing.Color},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="getColor"></param>
            <param name="parallel"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.HeNodeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.ToLine``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.ToLine``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="hedge"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.ToPolyline``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.ToPolyline``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.ToPolyline``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``1,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.GetCircumcircle``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the circumcircle of a triangular face.
            Assumes the face is triangular.
            http://mathworld.wolfram.com/Incenter.html
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.GetCircumcircle``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the circumcircle of a triangular face.
            Assumes the face is triangular.
            http://mathworld.wolfram.com/Incenter.html
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.GetIncircle``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the incircle of a triangular face.
            Assumes face is triangular.
            http://mathworld.wolfram.com/Incenter.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.HeNodeExtensions.GetIncircle``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the incircle of a triangular face.
            Assumes face is triangular.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.HeStructureExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.HeStructureExtensions.Transform``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="xform"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.HeStructureExtensions.SpaceMorph``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},Rhino.Geometry.SpaceMorph,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="xmorph"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.Interval2dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.Interval2dExtensions.ToBoundingBox(SpatialSlur.Interval2d)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.Interval3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.Interval3dExtensions.ToBoundingBox(SpatialSlur.Interval3d)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.LineExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.LineExtensions.ToInterval3d(Rhino.Geometry.Line)">
            <summary>
            
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.MeshExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.ToHeGraph(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.ToHeMesh(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.ToPolySoup(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.ColorVertices(Rhino.Geometry.Mesh,System.Func{System.Int32,System.Drawing.Color},System.Boolean)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="getColor"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.ColorFaces``1(Rhino.Geometry.Mesh,System.Func{System.Int32,System.Drawing.Color},System.Boolean)">
            <summary>
            Assumes the mesh is polygon soup (i.e. vertices aren't shared between faces).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mesh"></param>
            <param name="getColor"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.IsoTrim(Rhino.Geometry.Mesh,System.Collections.Generic.IReadOnlyList{System.Double},SpatialSlur.Intervald)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="vertexValues"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.GetLaplacianMatrix(Rhino.Geometry.Mesh,System.Double[])">
            <summary>
            Returns the entries of the cotangent-weighted Laplacian matrix in row-major order.
            Based on symmetric derivation of the Laplace-Beltrami operator detailed in http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/Vallet08.pdf.
            Assumes triangle mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.MeshExtensions.GetLaplacianMatrix(Rhino.Geometry.Mesh,System.Double[],System.Double[])">
            <summary>
            Returns the entries of the cotangent-weighted Laplacian matrix in row-major order.
            Based on symmetric derivation of the Laplace-Beltrami operator detailed in http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/Vallet08.pdf.
            Also returns the barycentric dual area of each vertex.
            Assumes triangle mesh.
            </summary>
            <param name="mesh"></param>
            <param name="entriesOut"></param>
            <param name="areasOut"></param>
        </member>
        <member name="T:SpatialSlur.Rhino.Orient3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.Orient3dExtensions.ToPlane(SpatialSlur.Orient3d)">
            <summary>
            
            </summary>
            <param name="orient"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.PlaneExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.PlaneExtensions.ToTransform(Rhino.Geometry.Plane)">
            <summary>
            Returns the transformation matrix defined by this plane.
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.PlaneExtensions.ToTransformInverse(Rhino.Geometry.Plane)">
            <summary>
            Returns the inverse of the transformation matrix defined by this plane.
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.PlaneExtensions.ToOrient3d(Rhino.Geometry.Plane)">
            <summary>
            
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.Point3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.Point3dExtensions.LerpTo(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.Point3dExtensions.SquareDistanceTo(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.TransformExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.TransformExtensions.Apply(Rhino.Geometry.Transform,SpatialSlur.Vector4d)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.TransformExtensions.Apply(Rhino.Geometry.Transform,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.TransformExtensions.ApplyToPoint(Rhino.Geometry.Transform,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.Vector3dExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.Vector3dExtensions.LerpTo(SpatialSlur.Vector3d,SpatialSlur.Vector3d,System.Double)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.RhinoFactory">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Rhino.RhinoFactory.Mesh">
            <summary>
            Static creation methods for meshes.
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateExtrusion(Rhino.Geometry.Polyline,Rhino.Geometry.Vector3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateExtrusionOpen(Rhino.Geometry.Polyline,Rhino.Geometry.Vector3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateExtrusionClosed(Rhino.Geometry.Polyline,Rhino.Geometry.Vector3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateLoft(Rhino.Geometry.Polyline,Rhino.Geometry.Polyline)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateLoftOpen(Rhino.Geometry.Polyline,Rhino.Geometry.Polyline)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateLoftClosed(Rhino.Geometry.Polyline,Rhino.Geometry.Polyline)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateLoft(System.Collections.Generic.IList{Rhino.Geometry.Polyline})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateLoftOpen(System.Collections.Generic.IList{Rhino.Geometry.Polyline})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateLoftClosed(System.Collections.Generic.IList{Rhino.Geometry.Polyline})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreatePolySoup(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreatePolySoup``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,Rhino.Geometry.Point3f},System.Func{``2,System.Drawing.Color},SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="getColor"></param>
            <param name="quadrangulator"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateFromHeMesh``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,Rhino.Geometry.Point3f},System.Func{``0,Rhino.Geometry.Vector3f},System.Func{``0,Rhino.Geometry.Point2f},System.Func{``0,System.Drawing.Color},SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="quadrangulator"></param>
            <param name="getNormal"></param>
            <param name="getTexture"></param>
            <param name="getColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateFromQuadStrip``3(SpatialSlur.Meshes.QuadStrip{``0,``1,``2},System.Func{``0,Rhino.Geometry.Point3f},System.Func{``0,Rhino.Geometry.Vector3f},System.Func{``0,Rhino.Geometry.Point2f},System.Func{``0,System.Drawing.Color})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="strip"></param>
            <param name="getPosition"></param>
            <param name="getNormal"></param>
            <param name="getTexture"></param>
            <param name="getColor"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Mesh.CreateIsoTrim(Rhino.Geometry.Mesh,System.Collections.Generic.IReadOnlyList{System.Double},SpatialSlur.Intervald)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="vertexValues"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Rhino.RhinoFactory.NurbsSurface">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.CreateFromQuadMesh(SpatialSlur.Meshes.HeMesh3d,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="degreeU"></param>
            <param name="degreeV"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.IsQuadMesh(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.IsSingular(SpatialSlur.Meshes.HeMesh3d.Vertex)">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.GetVertexLabels(SpatialSlur.Meshes.HeMesh3d,System.Collections.Generic.List{SpatialSlur.Meshes.HeMesh3d.Vertex})">
            <summary>
            Labels vertices as 0 = interior, 1 = seam, 2 = corner
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.TagSeams(SpatialSlur.Meshes.HeMesh3d,System.Collections.Generic.List{SpatialSlur.Meshes.HeMesh3d.Vertex})">
            <summary>
            Tags seam edges by marching outwards from corner vertices
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.GetPatchSurfaces(SpatialSlur.Meshes.HeMesh3d,System.Collections.Generic.List{SpatialSlur.Meshes.HeMesh3d.Vertex},System.Int32[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.GetPatchDimensions(SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Int32[],System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.NurbsSurface.GetPatchHedges(SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Rhino.RhinoFactory.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Transform.CreateFromPlane(Rhino.Geometry.Plane)">
            <summary>
            
            </summary>
            <param name="plane"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Transform.CreateInverseFromPlane(Rhino.Geometry.Plane)">
            <summary>
            
            </summary>
            <param name="plane"></param>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Transform.CreateProperRigid(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="xAxis"></param>
            <param name="xyVector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Transform.CreateProperRigidInverse(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="xAxis"></param>
            <param name="xyVector"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Transform.Create(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="basisX"></param>
            <param name="basisY"></param>
            <param name="basisZ"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Rhino.RhinoFactory.Transform.CreateOrthoInverse(SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d,SpatialSlur.Vector3d)">
            <summary>
            Assumes the given axes are orthonormal.
            </summary>
            <param name="origin"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Enums.HalfedgePolarity">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.Enums.HalfedgePolarity.POSITIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.Enums.HalfedgePolarity.NEGATIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.Enums.HalfedgePolarity.UNSET">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.Halfedge_AAG`1">
            <summary>
            
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge_AAG`1.Polarity">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.Halfedge`1">
            <summary>
            
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.CreateEdgeProperty``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.CreateEdgeProperty``1(SpatialSlur.Collections.ArrayView{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.CreateEdgeProperty``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.Polarity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.Twin">
            <summary>
            Returns the oppositely oriented halfedge in the pair.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.Previous">
            <summary>
            Returns the previous halfedge around the face or loop.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.Next">
            <summary>
            Returns the next halfedge around the face or loop.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.Edge">
            <summary>
            Returns the edge that this halfedge belongs to.
            Note that edges are implicitly represented via their first halfedge.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.EdgeIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.PreviousAtStart">
            <summary>
            Returns the previous halfedge at the start vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.NextAtStart">
            <summary>
            Returns the next halfedge at the start vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.PreviousAtEnd">
            <summary>
            Returns the previous halfedge at the end vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.NextAtEnd">
            <summary>
            Returns the next halfedge at the end vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.Circulate">
            <summary>
            Forward circulates through all halfedges in the loop.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.CirculateStart">
            <summary>
            Forward circulates through all outgoing halfedges at the start vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.CirculateEnd">
            <summary>
            Forward circulates through all incoming halfedges at the end vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsUnused">
            <summary>
            Returns true if this element is not being used by the halfedge structure.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsFirstInEdge">
            <summary>
            Returns true if this halfedge is the first in its edge.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsAtDegree1">
            <summary>
            Returns true if this halfedge starts at a degree 1 vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsAtDegree2">
            <summary>
            Returns true if this halfedge starts at a degree 2 vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsAtDegree3">
            <summary>
            Returns true if this halfedge starts at a degree 3 vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsInDegree1">
            <summary>
            Returns true if this halfedge is in a 1-sided loop.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsInDegree2">
            <summary>
            Returns true if this halfedge is in a 2-sided loop.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Halfedge`1.IsInDegree3">
            <summary>
            Returns true if this halfedge is in a 3-sided loop.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.MakeUnused">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.UnusedCheck">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.Count">
            <summary>
            Returns the number of halfedges in the loop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.CountAtStart">
            <summary>
            Returns the number of edges at the start vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.GetPrevious(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.GetNext(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.GetPreviousAtStart(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.GetNextAtStart(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.GetPreviousAtEnd(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.GetNextAtEnd(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.IsInDegree(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.IsAtDegree(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Halfedge`1.MakeConsecutive(`0)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeGraph`2">
            <summary>
            
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeGraph`2.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.Vertex.Insert(`1)">
            <summary>
            Inserts the given halfedge at this vertex
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.Vertex.InsertAll(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.Vertex.SortOutgoingHalfedges``1(System.Func{`1,``0})">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
            <param name="getKey"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeGraph`2.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.Halfedge.Bypass">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.CheckTopology(SpatialSlur.Meshes.Impl.HeGraph{`0,`1})">
            <summary>
            Throws an exception if the topology of the given mesh is not valid.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.Compact">
            <summary>
            Removes all unused elements from the graph.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.TrimExcess">
            <summary>
            Shrinks the capacity of each element list to twice its count.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.Append``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Action{`0,``0},System.Action{`1,``1})">
            <summary>
            Appends a deep copy of the given graph to this graph.
            Allows projection of element data to a different form.
            </summary>
            <typeparam name="UE"></typeparam>
            <typeparam name="UV"></typeparam>
            <param name="other"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.AppendVertexTopology``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`0,``0},System.Action{`1,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.AppendFaceTopology``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`0,``2},System.Action{`1,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setHedge"></param>
            <param name="setVertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.GetHalfedgeLoops">
            <summary>
            Returns the first halfedge from each loop in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.AddEdge(`0,`0)">
            <summary>
            Adds a new edge between the given vertices.
            Returns the first halfedge in the pair.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds a new edge between nodes at the given indices.
            Returns the first halfedge in the pair.
            </summary>
            <param name="vi0"></param>
            <param name="vi1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.AddEdgeImpl(`0,`0)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.RemoveEdge(`1)">
            <summary>
            Removes the given edge from the mesh.
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.RemoveEdgeImpl(`1)">
            <summary>
            Removes the given edge from the mesh.
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.CollapseEdge(`1)">
            <summary>
            Collapses the given halfedge by merging the vertices at either end.
            The start vertex of the given halfedge is removed.
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.CollapseEdgeImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.SplitEdge(`1)">
            <summary>
            Splits the given edge creating a new vertex and halfedge pair.
            Returns the new halfedge which starts from the new vertex.
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.SplitEdgeImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.SplitEdgeImpl(`1,`0)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.DivideEdge(`1,System.Int32)">
            <summary>
            Inserts the specified number of vertices along the given edge.
            </summary>
            <param name="hedge"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.DivideEdgeImpl(`1,System.Int32)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.ZipEdges(`1,`1)">
            <summary>
            Returns the new halfedge starting at the new vertex.
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.ZipEdgesImpl(`1,`1)">
            <summary>
            
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.RemoveLoops(System.Boolean)">
            <summary>
            Removes all edges which start and end at the same vertex.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.RemoveMultiEdges">
            <summary>
            Removes all duplicate edges in the mesh.
            An edge is considered a duplicate if it connects a pair of already connected vertices.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.DetachHalfedge(`1)">
            <summary>
            Detaches the given halfedge from its start vertex.
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.DetachHalfedgeImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.AddVertices(System.Int32)">
            <summary>
            Removes the given vertex along with all incident edges.
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.RemoveVertex(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.RemoveVertexImpl(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.MergeVertices(`0,`0)">
            <summary>
            Transfers halfedges from the first to the second given vertex.
            The first vertex is flagged as unused.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.MergeVerticesImpl(`0,`0)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.MergeVertices(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transfers halfedges leaving each vertex to the first vertex in the collection.
            All vertices except the first are flagged as unused.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.ExpandVertex(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.SplitVertex(`1,`1)">
            <summary>
            Splits a vertex in 2 connected by a new edge.
            Returns the new halfedge leaving the new vertex on success and null on failure.
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.SplitVertexImpl(`1,`1)">
            <summary>
            
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.DetachVertex(`0)">
            <summary>
            Detaches all outgoing halfedges from the given vertex
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.DetachVertexImpl(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraph`2.SortOutgoingHalfedges``1(System.Func{`1,``0},System.Boolean)">
            <summary>
            Sorts the outgoing halfedges around each vertex.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="getKey"></param>
            <param name="parallel"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeGraphFactory`3">
            <summary>
            
            </summary>
            <typeparam name="TG"></typeparam>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.Create(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateCopy``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Action{`1,``0},System.Action{`2,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <param name="graph"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateConnectedComponents``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Action{`1,``0},System.Action{`2,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <param name="graph"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateConnectedComponents``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Int32[]@,System.Int32[]@,System.Action{`1,``0},System.Action{`2,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <param name="graph"></param>
            <param name="componentIndices"></param>
            <param name="edgeIndices"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateConnectedComponents``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},SpatialSlur.Property{``1,System.Int32},SpatialSlur.Property{``1,System.Int32},System.Action{`1,``0},System.Action{`2,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <param name="graph"></param>
            <param name="componentIndex"></param>
            <param name="edgeIndex"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateFromLineSegments(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Action{`1,SpatialSlur.Vector3d},System.Double,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="setPosition"></param>
            <param name="tolerance"></param>
            <param name="allowMultiEdges"></param>
            <param name="allowLoops"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateFromVertexTopology``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`1,``0},System.Action{`2,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateFromFaceTopology``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`1,``2},System.Action{`2,``1})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setHedge"></param>
            <param name="setVertex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeGraphFactory`3.CreateFromJson(System.String,System.Action{`1,System.Object[]},System.Action{`2,System.Object[]})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="setVertexAttributes"></param>
            <param name="setHedgeAttributes"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeMesh`3">
            <summary>
            
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeMesh`3.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeMesh`3.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.Halfedge.Bypass">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeMesh`3.Face">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CheckTopology(SpatialSlur.Meshes.Impl.HeMesh{`0,`1,`2})">
            <summary>
            Throws an exception if the topology of the given mesh is not valid.
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="F:SpatialSlur.Meshes.Impl.HeMesh`3._addFaceBuffer">
            <summary>Used when adding a new face to the mesh to avoid repeated allocation</summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeMesh`3.IsClosed">
            <summary>
            Returns true if all halfedges have a face.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeMesh`3.EulerNumber">
            <summary>
            Returns the Euler number of the mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.Compact">
            <summary>
            Removes all unused elements from the mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.TrimExcess">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CountHoles">
            <summary>
            Returns the number of holes in the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.GetHoles">
            <summary>
            Returns the first halfedge from each hole in the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CountBoundaryVertices">
            <summary>
            Returns the number of boundary vertices in the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.GetBoundaryVertices">
            <summary>
            Returns each boundary vertex in the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CountNonManifoldVertices">
            <summary>
            Returns the number of vertices with multiple incident boundary edges.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.GetNonManifoldVertices">
            <summary>
            Returns each non-manifold vertex in the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.Append``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`0,``0},System.Action{`1,``1},System.Action{`2,``2})">
            <summary>
            Appends a deep copy of the given mesh to this mesh.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="other"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AppendDual``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`0,``2},System.Action{`1,``1},System.Action{`2,``0})">
            <summary>
            Appends the dual of the given mesh to this mesh.
            Note this method preserves indexical correspondance between primal and dual elements.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="other"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddEdge(`0,`0)">
            <summary>
            Creates a new pair of halfedges between the given vertices and add them to the list.
            Returns the halfedge starting from v0.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.RemoveEdge(`1)">
            <summary>
            Detatches the given edge and flags it for removal.
            Note that this method does not update face->halfedge refs
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitEdge(`1)">
            <summary>
            Splits the given edge creating a new vertex and halfedge pair.
            Returns the new halfedge which starts at the new vertex.
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitEdgeImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitEdgeImpl(`1,`0)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DivideEdge(`1,System.Int32)">
            <summary>
            Inserts the specified number of vertices along the given edge.
            </summary>
            <param name="hedge"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DivideEdgeImpl(`1,System.Int32)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitEdgeFace(`1)">
            <summary>
            Splits an edge by adding a new vertex in the middle. 
            Faces adjacent to the given edge are also split at the new vertex.
            Returns the new halfedge outgoing from the new vertex or null on failure.
            Assumes triangle mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitEdgeFaceImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CollapseEdge(`1)">
            <summary>
            Collapses the given halfedge by merging the vertices at either end.
            If successful, the start vertex of the given halfedge is removed.
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CollapseEdgeImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CanCollapse(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CleanupDegree2Face(`1)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CleanupDegree2Hole(`1)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.CleanupDegree1Hole(`1)">
             <summary>
            
             </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SpinEdge(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SpinEdgeImpl(`1)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachEdge(`1)">
            <summary>
            Returns the new halfedge with the same orientation as the given one.
            The given halfedge will have a null face reference after this operation.
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachEdgeImpl(`1)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachEdgeInterior(`1)">
            <summary>
            Assumes both start and end vertices are interior.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachEdgeBoundary(`1)">
            <summary>
            Assumes both start and end vertices are on the mesh boundary.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachEdgeAtStart(`1)">
            <summary>
            Assumes vertex at the start of the given halfedge is on the boundary.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachEdgeAtEnd(`1)">
            <summary>
            Assumes vertex at the end of the given halfedge is on the boundary.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddVertices(System.Int32)">
            <summary>
            
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.RemoveVertex(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.RemoveVertexImpl(`0)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeVertices(`0,`0)">
            <summary>
            Merges a pair of boundary vertices.
            The first vertex is flagged as unused.
            Note that this method may produce non-manifold vertices.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeVerticesImpl(`0,`0)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.DetachVertex(`1,`1)">
            <summary>
            
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitVertex(`1,`1)">
            <summary>
            Splits a vertex in 2 connected by a new edge.
            Returns the new halfedge leaving the new vertex on success and null on failure.
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitVertexImpl(`1,`1)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.ChamferVertex(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.ChamferVertexImpl(`0)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vi0"></param>
            <param name="vi1"></param>
            <param name="vi2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vi0"></param>
            <param name="vi1"></param>
            <param name="vi2"></param>
            <param name="vi3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds a new face to the mesh.
            </summary>
            <param name="vertexIndices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(`0,`0,`0)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(`0,`0,`0,`0)">
            <summary>
            
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a new face to the mesh.
            </summary>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFace(System.Collections.Generic.List{System.ValueTuple{`0,`1}})">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.AddFaceImpl(System.Collections.Generic.List{System.ValueTuple{`0,`1}})">
            <summary>
            Assumes the given elements are valid for this operation.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.RemoveFace(`2)">
            <summary>
            Removes a face from the mesh as well as any invalid elements created in the process.
            Returns true on success.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.RemoveFaceImpl(`2)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeFaces(`1)">
            <summary>
            Removes a halfedge pair, merging their two adajcent faces.
            The face of the given halfedge is removed.
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeFacesImpl(`1)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeFaceToFace(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeFaceToHole(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.MergeHoleToFace(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.FillHole(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.FillHoleImpl(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitFace(`1,`1)">
            <summary>
            Splits a face by creating a new halfedge pair between the start vertices of the given halfedges.
            Returns the new halfedge that shares a start vertex with he0.
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.SplitFaceImpl(`1,`1)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.PokeFace(`2)">
            <summary>
            
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.PokeFaceImpl(`2)">
            <summary>
            
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.PokeFaceImpl(`1,`0)">
            <summary>
            Assumes the given elements are valid for the operation.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadPokeFace(`2)">
            <summary>
            
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadPokeFaceImpl(`2)">
            <summary>
            
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadPokeFace(`1)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadPokeFaceImpl(`1)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadPokeFaceImpl(`1,`0)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="center"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadSplitFace(`1,`0)">
            <summary>
            This method assumes an even number of halfedges in the face loop and that the given vertex is unused.
            </summary>
            <param name="first"></param>
            <param name="center"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.ReverseFaces">
            <summary>
            Reverses the winding direction of all faces in the mesh
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.OrientFacesToMin``1(System.Func{`1,``0},System.Boolean)">
            <summary>
            Orients each face such that the first halfedge returns the minimum value for the given function.
            </summary>
            <param name="getValue"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.OrientFacesToBoundary(System.Boolean)">
            <summary>
            
            </summary>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.TriangulateFaces(SpatialSlur.Meshes.IFaceTriangulator)">
            <summary>
            
            </summary>
            <param name="triangulator"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.TriangulateFaces(SpatialSlur.Meshes.IFaceTriangulator,System.Func{`2,`1})">
            <summary>
            
            </summary>
            <param name="triangulator"></param>
            <param name="getStart"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadrangulateFaces(SpatialSlur.Meshes.IFaceQuadrangulator)">
            <summary>
            
            </summary>
            <param name="quadrangulator"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.QuadrangulateFaces(SpatialSlur.Meshes.IFaceQuadrangulator,System.Func{`2,`1})">
            <summary>
            
            </summary>
            <param name="quadrangulator"></param>
            <param name="getStart"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.GetFacesOrientedQuad(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flip"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.GetFacesOrientedQuad(`2,System.Boolean)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="flip"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.GetFacesOrientedQuad(System.Collections.Generic.Stack{`1},System.Int32)">
            <summary>
            
            </summary>
            <param name="stack"></param>
            <param name="currTag"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.UnifyFaceOrientationQuad(System.Boolean)">
            <summary>
            Sets the first halfedge in each face to create consistent orientation where possible.
            Assumes quadrilateral faces.
            http://page.math.tu-berlin.de/~bobenko/MinimalCircle/minsurftalk.pdf
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMesh`3.UnifyFaceOrientationQuad(`2,System.Boolean)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="flip"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeMeshFactory`4">
            <summary>
            
            </summary>
            <typeparam name="TM"></typeparam>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateCopy``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`1,``0},System.Action{`2,``1},System.Action{`3,``2})">
            <summary>
            Action delegates specify how attributes of original elements are mapped to attributes of copied elements.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateDual``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`1,``2},System.Action{`2,``1},System.Action{`3,``0})">
            <summary>
            Returns the dual of the given mesh.
            Action delegates specify how attributes of primal elements are mapped to attributes of dual elements.
            Note this method preserves indexical correspondance between primal and dual elements.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateConnectedComponents``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Action{`1,``0},System.Action{`2,``1},System.Action{`3,``2})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateConnectedComponents``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Int32[]@,System.Int32[]@,System.Action{`1,``0},System.Action{`2,``1},System.Action{`3,``2})">
            <summary>
            
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="componentIndices"></param>
            <param name="edgeIndices"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateConnectedComponents``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``1,System.Int32},SpatialSlur.Property{``1,System.Int32},System.Action{`1,``0},System.Action{`2,``1},System.Action{`3,``2})">
            <summary>
            Action delegates specify how attributes of parent elements are mapped to attributes of component elements.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="componentIndex"></param>
            <param name="edgeIndex"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <param name="setFace"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateFromGraph``2(SpatialSlur.Meshes.Impl.HeGraph{``0,``1},System.Action{`1,``0},System.Action{`2,``1})">
            <summary>
            Assumes the halfedges of the given graph are correctly sorted around each vertex.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <param name="graph"></param>
            <param name="setVertex"></param>
            <param name="setHedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateFromPolygons``1(System.Collections.Generic.IEnumerable{``0},System.Action{`1,SpatialSlur.Vector3d},System.Double)">
            <summary>
            Creates a new mesh from polygon soup.
            Note that this method assumes consistent faces windings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="polygons"></param>
            <param name="setPosition"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateFromFaceVertexData``1(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.IEnumerable{``0},System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            Creates a new mesh from face-vertex information.
            Note that this method assumes consistent faces windings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vertices"></param>
            <param name="faces"></param>
            <param name="setPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateFromObj(System.String,System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="setPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateFromJson(System.String,System.Action{`1,System.Object[]},System.Action{`2,System.Object[]},System.Action{`3,System.Object[]})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="setVertexAttributes"></param>
            <param name="setHedgeAttributes"></param>
            <param name="setFaceAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateTetrahedron(System.Action{`1,SpatialSlur.Vector3d},System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateTetrahedron">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateGrid(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="countX"></param>
            <param name="countY"></param>
            <param name="wrapX"></param>
            <param name="wrapY"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateWeave``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double},System.Func{``1,SpatialSlur.Vector3d},System.Func{``2,SpatialSlur.Vector3d},System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            If using external buffers to store vertex attributes, the number of vertices in the resulting mesh equals 8 times the number of edges in the given mesh.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="getScale"></param>
            <param name="getNormal"></param>
            <param name="getCenter"></param>
            <param name="setPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateWeaveGeometry``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},`0,System.Func{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double},System.Func{``1,SpatialSlur.Vector3d},System.Func{``2,SpatialSlur.Vector3d},System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateWeaveTopology``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},`0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateBevelledDual``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Func{``0,System.Double},System.Func{``2,SpatialSlur.Vector3d},System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            If using external buffers to store vertex attributes, the number of vertices in the resulting mesh equals the number of halfedges in the given mesh.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="getScale"></param>
            <param name="getCenter"></param>
            <param name="setPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeMeshFactory`4.CreateFramedDual``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Func{``0,System.Double},System.Func{``2,SpatialSlur.Vector3d},System.Action{`1,SpatialSlur.Vector3d})">
            <summary>
            If using external buffers to store vertex attributes, the number of vertices in the resulting mesh the equals the sum of the number of vertices and halfedges in the given mesh.
            </summary>
            <typeparam name="UV"></typeparam>
            <typeparam name="UE"></typeparam>
            <typeparam name="UF"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="getScale"></param>
            <param name="getCenter"></param>
            <param name="setPosition"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`2">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`2.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Halfedge.Start">
            <summary>
            Returns the vertex at the start of this halfedge.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Halfedge.End">
            <summary>
            Returns the vertex at the end of this halfedge.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Halfedge.IsFirstAtStart">
            <summary>
            Returns true if this halfedge is the first at its start vertex.
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.OutgoingHalfedges">
            <summary>
            Circulates through all halfedges starting at this vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.IncomingHalfedges">
            <summary>
            Circulates through all halfedges ending at this vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.ConnectedVertices">
            <summary>
            Circulates through all vertices connected to this vertex.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.IsDegree1">
            <summary>
            Returns true if this vertex has 1 outgoing halfedge.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.IsDegree2">
            <summary>
            Returns true if the vertex has 2 outgoing halfedges.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.IsDegree3">
            <summary>
            Returns true if the vertex has 3 outgoing halfedges.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.GetDegree">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.IsDegree(System.Int32)">
            <summary>
            Returns true if the number of edges at this vertex is equal to the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.IsConnectedTo(`0)">
            <summary>
            Returns true if this vertex is connected to the given vertex.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Vertex.FindHalfedgeTo(`0)">
            <summary>
            Returns a halfedge from this vertex to another or null if none exists.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`2.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Edge.CreateProperty``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Edge.CreateProperty``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Vertices">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Halfedges">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`2.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.NewVertex">
            <summary>
            Significantly faster than using a new() constraint on the type parameter
            https://blogs.msdn.microsoft.com/seteplia/2017/02/01/dissecting-the-new-constraint-in-c-a-perfect-example-of-a-leaky-abstraction/
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.NewHalfedge">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Owns(`0)">
            <summary>
            Returns true if the given vertex belongs to this mesh.
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.Owns(`1)">
            <summary>
            Returns true if the given halfedge belongs to this mesh.
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.AddVertex">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`2.AddEdge">
            <summary>
            Creates a new pair of halfedges and adds them to the list.
            Returns the first halfedge in the pair.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`3">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.Face">
            <summary>
            Returns the face adjacent to this halfedge.
            If this halfedge is adjacent to a hole, null is returned.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.IsFirstInFace">
            <summary>
            Returns true if this halfedge is the first in its face.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.IsBoundary">
            <summary>
            Returns true if this halfedge or its twin is adjacent to a hole.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.IsHole">
            <summary>
            Returns true if this halfedge is adjacent to a hole.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.IsManifold">
            <summary>
            Returns true if the halfedge and its twin have different faces.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.IsBridge">
            <summary>
            Returns true this halfedge spans between non-consecutive boundary vertices.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.NextBoundary">
            <summary>
            Returns the next boundary halfedge encountered when circulating the loop of this halfedge.
            If no such halfedge is found, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.NextBoundaryAtStart">
            <summary>
            Returns the next faceless halfedge encountered when circulating around the start vertex of this halfedge.
            If no such halfedge is found, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.NextBoundaryAtEnd">
            <summary>
            Returns the next faceless halfedge encountered when circulating around the end vertex of this halfedge.
            If no such halfedge is found, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Halfedge.MakeFirstInFace">
            <summary>
            Sets this halfedge to be the first in its face.
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`3.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Vertex.SurroundingFaces">
            <summary>
            Circulates through all faces surrounding this vertex.
            Note that if multiple outgoing halfedges lie on the same face, that face will be returned multiple times.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Vertex.IsBoundary">
            <summary>
            Returns true if this vertex is on the mesh boundary.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Vertex.IsManifold">
            <summary>
            Returns false if the vertex has more than one boundary edge (i.e. bowtie condition).
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Vertex.IsCorner">
            <summary>
            Return true if this vertex is degree 2 and on the mesh boundary. 
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Vertex.SetFirstToBoundary">
            <summary>
            Sets the first halfedge of this vertex to the first boundary halfedge encountered during circulation.
            Returns true if a boundary halfedge was found.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`3.Face">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.Halfedges">
            <summary>
            Circulates through all halfedges in this face.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.Vertices">
            <summary>
            Circulates through all vertices in this face.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.AdjacentFaces">
            <summary>
            Circulates through all faces adjacent to this face.
            Note that if multiple edges are shared with an adjacent face, then that face will be returned multiple times.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.IsDegree1">
            <summary>
            Returns true if this face has 1 edge.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.IsDegree2">
            <summary>
            Returns true if this face has 2 edges.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.IsDegree3">
            <summary>
            Returns true if this face has 3 edges.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Face.IsBoundary">
            <summary>
            Returns true if the face has one or more boundary edges.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Face.GetDegree">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Face.IsDegree(System.Int32)">
            <summary>
            Returns true if the number of edges in this face it equal to the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Face.SetFirstToBoundary">
            <summary>
            Sets the first halfedge in this face to the first boundary halfedge encountered during circulation.
            Returns true if a boundary halfedge was found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Face.FindHalfedge(`2)">
            <summary>
            Returns the first halfedge between this face and another or null if none exists.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Face.CountBoundaryEdges">
            <summary>
            Returns the number of boundary edges in this face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Face.CountBoundaryVertices">
            <summary>
            Returns the number of boundary vertices in this face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`3.Faces">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.NewFace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.Owns(`2)">
            <summary>
            Returns true if the given face belongs to this mesh.
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`3.AddFace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="VG"></typeparam>
            <typeparam name="EG"></typeparam>
            <typeparam name="FG"></typeparam>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge.Adjacent">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge.Bundle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge.PreviousInBundle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge.NextInBundle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge.IsFirstInBundle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Halfedge.CirculateBundle">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Vertex.Cluster">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6.Face">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Face.Twin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Face.Cell">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6.Cluster">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6.Bundle">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.HeStructure`6.Cell">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
            <param name="clusterCapacity"></param>
            <param name="bundleCapacity"></param>
            <param name="cellCapacity"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Clusters">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Bundles">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.HeStructure`6.Cells">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.NewCluster">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.NewBundle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.NewCell">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.AddCluster">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.AddBundle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.HeStructure`6.AddCell">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.Node">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node.op_Implicit(SpatialSlur.Meshes.Impl.Node)~System.Int32">
            <summary>
            Implicitly converts an element to its index for convenience.
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Node.Index">
            <summary>
            Returns the position of this element within the corresponding element list.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Node.Tag">
            <summary>
            General purpose tag used internally for topological searches and validation.
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.Node`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node`1.CreateProperty``1(``0[])">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node`1.CreateProperty``1(SpatialSlur.Collections.ArrayView{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node`1.CreateProperty``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Node`1.Self">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Impl.Node`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="E"></typeparam>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Node`2.First">
            <summary>
            Returns the first halfedge at this node.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.Impl.Node`2.IsUnused">
            <summary>
            Returns true if this element is not being used by the halfedge structure i.e. its first halfedge is null.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node`2.MakeUnused">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Impl.Node`2.UnusedCheck">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.TriMesh`2">
            <summary>
            Simple face-vertex representation of a triangle mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.#ctor(SpatialSlur.Meshes.TriMesh{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.Positions">
            <summary>
            Returns the array of vertex positions
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.Normals">
            <summary>
            Returns the array of vertex normals or null.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.Tangents">
            <summary>
            Returns the array of vertex tangents or null.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.TextureCoords">
            <summary>
            Returns the array of vertex texture coordinates or null.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.Faces">
            <summary>
            Returns the array of faces.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.HasNormals">
            <summary>
            Gets or sets whether or not this mesh stores normals.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.HasTangents">
            <summary>
            Gets or sets whether or not this mesh stores tangents.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.HasTextureCoords">
            <summary>
            Gets or sets whether or not this mesh stores texture coordinates.
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.VertexCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.VertexCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.FaceCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.TriMesh`2.FaceCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.InitOptional``1(``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.ClearVertices">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.ClearFaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.AddVertex(`0,`0,`0,`1)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="normal"></param>
            <param name="tangent"></param>
            <param name="textureCoord"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.AddFace(SpatialSlur.Vector3i)">
            <summary>
            
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.Append(SpatialSlur.Meshes.TriMesh{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.AppendVertices(SpatialSlur.Meshes.TriMesh{`0,`1})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.AppendFaces(SpatialSlur.Meshes.TriMesh{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.ExpandVertexCapacity(System.Int32)">
            <summary>
            Assumes that the new capacity is larger than the current.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh`2.ExpandFaceCapacity(System.Int32)">
            <summary>
            Assumes that the new capacity is larger than the current.
            </summary>
            <param name="newCapacity"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.Delegates">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Delegates.Position3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:SpatialSlur.Meshes.Delegates.Position3d`1.Get">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.Delegates.Position3d`1.Set">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Delegates.Normal3d`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:SpatialSlur.Meshes.Delegates.Normal3d`1.Get">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.Delegates.Normal3d`1.Set">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.TriMesh3d">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh3d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh3d.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCount"></param>
            <param name="faceCount"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.TriMesh3d.#ctor(SpatialSlur.Meshes.TriMesh3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.EdgeListView`1">
            <summary>
            Provides an alternate view of the halfedge list which only considers the first halfedge in each pair.
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.#ctor(SpatialSlur.Meshes.HalfedgeList{`0})">
            <summary>
            
            </summary>
            <param name="halfedges"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.EdgeListView`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.EdgeListView`1.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.EdgeListView`1.Item(System.Int32)">
            <summary>
            Returns the first halfedge of the edge at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.CountUnused">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.CompactAttributes``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <typeparam name="A"></typeparam>
            <param name="attributes"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.SwimAttributes``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <typeparam name="A"></typeparam>
            <param name="attributes"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.Owns(`0)">
            <summary>
            Returns true if the given edge belongs to this mesh.
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.OwnsCheck(`0)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.Action(System.Action{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetDistinct(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedges"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetDistinctImpl(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedges"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetUnion(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedgesA"></param>
            <param name="hedgesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetDifference(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedgesA"></param>
            <param name="hedgesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetDifferenceImpl(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedgesA"></param>
            <param name="hedgesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetIntersection(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedgesA"></param>
            <param name="hedgesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.GetIntersectionImpl(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="hedgesA"></param>
            <param name="hedgesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.EdgeListView`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Reorders edges based on the given key.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="getKey"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.SmoothBoundaryType">
            <summary>
            Enum of boundary types for smoothing.
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.SmoothBoundaryType.Fixed">
            <summary>All boundary vertices are fixed.</summary>
        </member>
        <member name="F:SpatialSlur.Meshes.SmoothBoundaryType.CornerFixed">
            <summary>Only degree 2 boundary vertices are fixed.</summary>
        </member>
        <member name="F:SpatialSlur.Meshes.SmoothBoundaryType.Free">
            <summary>Boundary vertices are free.</summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HalfedgeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.NearestMin``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.NearestMax``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.WalkToMin``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.WalkToMax``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetConnected``2(``1)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetLength``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge)">
            <summary>
            Returns the Euclidean length of the halfedge.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetLength``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the Euclidean length of the halfedge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetAngle``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge)">
            <summary>
            Returns the angle between this halfedge and the previous at its start vertex.
            Result is between 0 and Pi.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetAngle``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the angle between this halfedge and its previous at its start vertex.
            Result is between 0 and Pi.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetCotangent``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge)">
            <summary>
            Calculates the cotangent of the angle opposite this halfedge.
            Assumes the halfedge is in a triangular face.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetCotangent``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Calculates the cotangent of the angle opposite this halfedge.
            Assumes the halfedge is in a triangular face.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetEdgeCotanWeight``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Calculates the cotangent weight for the given edge.
            Assumes adjacent faces are triangular.
            </summary>
            <param name="hedge"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge)">
            <summary>
            Calculates the halfedge normal as the cross product of the previous halfedge and this one.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Calculates the halfedge normal as the cross product of the previous halfedge and this one.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetFrame``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetEdgeNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge)">
            <summary>
            Calculates the unit length area-weighted edge normal.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetEdgeNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Calculates the unit length area-weighted edge normal.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetArea``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge)">
            <summary>
            Returns the area of the given halfedge as per V in https://www.cs.cmu.edu/~kmcrane/Projects/Other/TriangleAreasCheatSheet.pdf
            Assumes the halfedge is in a triangular face.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetArea``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the area of the given halfedge as per V in https://www.cs.cmu.edu/~kmcrane/Projects/Other/TriangleAreasCheatSheet.pdf
            Assumes the halfedge is in a triangular face.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetEdgeArea``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge)">
            <summary>
            Returns the area of the given halfedge as per D in https://www.cs.cmu.edu/~kmcrane/Projects/Other/TriangleAreasCheatSheet.pdf
            Assumes adjacent faces are triangular.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetEdgeArea``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the area of the given halfedge as per D in https://www.cs.cmu.edu/~kmcrane/Projects/Other/TriangleAreasCheatSheet.pdf
            Assumes adjacent faces are triangular.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetDihedralAngle``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``2,SpatialSlur.Vector3d})">
            <summary>
            Calcuated as the signed angle between adjacent face normals where convex is positive.
            Assumes the given face normals are unitized.
            </summary>>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeExtensions.GetDihedralAngle``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Halfedge,System.Func{``0,SpatialSlur.Vector3d},System.Func{``2,SpatialSlur.Vector3d})">
            <summary>
            Calcuated as the signed angle between adjacent face normals where convex is positive.
            Assumes the given face normals are unitized.
            </summary>>
        </member>
        <member name="T:SpatialSlur.Meshes.FaceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.NearestMin``4(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.NearestMax``4(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.WalkToMin``4(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.WalkToMax``4(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``2,``3})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetArea``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetArea``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the area of this face.
            Note that this method assumes the face is planar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the unitized sum of halfedge normals in the face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the unitized sum of area-weighted halfedge normals in the face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``1,SpatialSlur.Vector3d})">
            <summary>
            Returns the unitized sum of custom-weighted halfedge normals in the face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetBarycenter``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the average position of vertices in the face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetBarycenter``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the average position of vertices in the face.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetCircumcenter``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the circumcenter of the face.
            Assumes face is triangular.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetCircumcenter``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the circumcenter of the face.
            Assumes face is triangular.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetIncenter``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the circumcenter of the face.
            Assumes face is triangular.
            http://mathworld.wolfram.com/Incenter.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetIncenter``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the circumcenter of the face.
            Assumes face is triangular.
            http://mathworld.wolfram.com/Incenter.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetPlanarity``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face)">
            <summary>
            Returns the planar deviation of this face
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceExtensions.GetPlanarity``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Face,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the planar deviation of this face.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="face"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HeStructureExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.Transform``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},SpatialSlur.Transform3d,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="transform"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetConnectedComponents``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1})">
            <summary>
            Returns the first halfedge from each connected component in the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgesBreadthFirst``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns edges in breadth-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgesDepthFirst``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns edges in depth-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgesBestFirst``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``2},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns edges in best-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="getKey"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVerticesBreadthFirst``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns vertices in breadth-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVerticesBreadthFirst2``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns vertices in breadth-first order via the traversed halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVerticesDepthFirst``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns vertices in depth-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVerticesDepthFirst2``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns vertices in depth-first order via the traversed halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVerticesBestFirst``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``2},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns vertices in best-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="getKey"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVerticesBestFirst2``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``1,``2},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns vertices in best-first order via the traversed halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="getKey"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeLengthSum``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeLengthSum``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeComponentIndices``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Action{``1,System.Int32})">
            <summary>
            Returns the connected component index of each edge in the mesh.
            Also returns the number of connected components.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeDepths``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``1},SpatialSlur.Collections.ArrayView{System.Int32},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeDepths``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``1},SpatialSlur.Property{``1,System.Int32},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Calculates the minimum topological depth of each edge from a collection of sources.
            Note that corresponding get/set delegates must read/write to the same location.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexMorseSmaleLabels``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Func{``0,System.Double},System.Action{``0,System.Int32},System.Boolean)">
            <summary>
            Calculates the morse smale classification for each vertex (0 = normal, 1 = minima, 2 = maxima, 3 = saddle).
            Assumes halfedges are radially sorted around the given vertices (note that this will always be the case with HeMesh types).
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexDepths``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},SpatialSlur.Collections.ArrayView{System.Int32},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexDepths``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},SpatialSlur.Property{``0,System.Int32},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculates the minimum topological depth of each vertex from a collection of sources.
            Note that corresponding get/set delegates must read/write to the same location.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexDistances``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``1,System.Double},SpatialSlur.Collections.ArrayView{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="sources"></param>
            <param name="getLength"></param>
            <param name="result"></param>
            <param name="bestFirst"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexDistances``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``1,System.Double},SpatialSlur.Property{``0,System.Double},System.Boolean)">
            <summary>
            Calculates the minimum topological distance to each vertex from a collection of sources.
            Note that corresponding get/set delegates must read/write to the same location.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexDistancesBreadthFirst``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``1,System.Double},SpatialSlur.Property{``0,System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexDistancesBestFirst``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``1,System.Double},SpatialSlur.Property{``0,System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.UnifyVertexNormals``2(SpatialSlur.Meshes.Impl.HeStructure{``0,``1},SpatialSlur.Property{``0,SpatialSlur.Vector3d},``0)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="graph"></param>
            <param name="normal"></param>
            <param name="start"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFacesBreadthFirst``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Returns faces in breadth-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFacesBreadthFirst2``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Returns faces in breadth-first order via the traversed halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFacesDepthFirst``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Returns faces in depth-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFacesDepthFirst2``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Returns faces in depth-first order via the traversed halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFacesBestFirst``4(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Func{``2,``3},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Returns faces in best-first order.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="getKey"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFacesBestFirst2``4(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Func{``1,``3},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Returns faces in best-first order via the traversed halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="getKey"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetCornerHalfedges``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Double)">
            <summary>
            Returns all halfedges whose angle to its previous exceeds the given tolerance.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <param name="angleTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeDepths``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``1},SpatialSlur.Collections.ArrayView{System.Int32},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetEdgeDepths``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``1},SpatialSlur.Property{``1,System.Int32},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Calculates the minimum topological depth of each edge from a collection of sources.
            Note that corresponding get/set delegates must read/write to the same location.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexAreasBarycentric``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Action{``0,System.Double})">
            <summary>
            Calculates the barycentric dual area around each vertex.
            Assumes triangular faces.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexAreasBarycentric``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Action{``0,System.Double})">
            <summary>
            Calculates the barycentric dual area around each vertex.
            Assumes triangular faces.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexAreasCircumcentric``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Action{``0,System.Double})">
            <summary>
            Calculates the circumcentric dual area around each vertex.
            Assumes triangular faces.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexAreasCircumcentric``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Action{``0,System.Double})">
            <summary>
            Calculates the circumcentric dual area around each vertex.
            Assumes triangular faces.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexAreasMixed``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Action{``0,System.Double})">
            <summary>
            Calculates the mixed dual area around each vertex.
            Assumes triangular faces.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetVertexAreasMixed``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d},System.Action{``0,System.Double})">
            <summary>
            Calculates the mixed dual area around each vertex.
            Assumes triangular faces.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceAreaSum``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2})">
            <summary>
            Returns the total surface area of the mesh.
            Note that the area calculation assumes planar faces.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceAreaSum``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the total surface area of the mesh.
            Note that the area calculation assumes planar faces.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="getPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceDepths``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},SpatialSlur.Collections.ArrayView{System.Int32},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="result"></param>
            <param name="exclude"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceDepths``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},SpatialSlur.Property{``2,System.Int32},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Calculates the minimum topological depth of all faces connected to a set of sources.
            Note that corresponding get/set delegates must read/write to the same location.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceDistances``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Func{``1,System.Double},SpatialSlur.Collections.ArrayView{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="getLength"></param>
            <param name="result"></param>
            <param name="bestFirst"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceDistances``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Func{``1,System.Double},SpatialSlur.Property{``2,System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="sources"></param>
            <param name="getLength"></param>
            <param name="distance"></param>
            <param name="bestFirst"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceDistancesBreadthFirst``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Func{``1,System.Double},SpatialSlur.Property{``2,System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.GetFaceDistancesBestFirst``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},System.Collections.Generic.IEnumerable{``2},System.Func{``1,System.Double},SpatialSlur.Property{``2,System.Double})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeStructureExtensions.UnifyVertexNormals``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d},``0)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="normal"></param>
            <param name="start"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.VertexExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.NearestMin``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Vertex,System.Func{``0,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.NearestMax``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Vertex,System.Func{``0,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.WalkToMin``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Vertex,System.Func{``0,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.WalkToMax``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1}.Vertex,System.Func{``0,``2})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex)">
            <summary>
            Returns the unitized sum of area-weighted halfedge normals around the vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Returns the unitized sum of area-weighted halfedge normals around the vertex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetNormal``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getPosition"></param>
            <param name="getWeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector2d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,System.Double},System.Func{``1,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getValue"></param>
            <param name="getWeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector2d},System.Func{``1,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getValue"></param>
            <param name="getWeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetLaplacian``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getValue"></param>
            <param name="getWeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetAngleDefect``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex)">
            <summary>
            Calculates the angle defect at the given vertex.
            This is also a measure of discrete Gaussian curvature over the area of the given vertex.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetAngleDefect``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Calculates the angle defect at the given vertex.
            This is also a measure of discrete Gaussian curvature over the area of the given vertex.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetMeanCurvature``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``1,System.Double})">
            <summary>
            Calculates the discrete mean curvature over the area of the given vertex.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getWeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetMeanCurvature``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double})">
            <summary>
            Calculates the discrete mean curvature over the area of the given vertex.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="vertex"></param>
            <param name="getPosition"></param>
            <param name="getWeight"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetCirclePackingRadius``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``0,SpatialSlur.Vector3d})">
            <summary>
            Calculates the circle packing radii for the given vertex.
            Assumes the mesh is a circle packing (CP) mesh as defined in http://www.geometrie.tuwien.ac.at/hoebinger/mhoebinger_files/circlepackings.pdf
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.VertexExtensions.GetCirclePackingRadius``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2}.Vertex,System.Func{``1,System.Double})">
            <summary>
            Calculates the circle packing radii for the given vertex.
            Assumes the mesh is a circle packing (CP) mesh as defined in http://www.geometrie.tuwien.ac.at/hoebinger/mhoebinger_files/circlepackings.pdf
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.FaceQuadrangulator">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.FaceQuadrangulator.Fan">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceQuadrangulator.Fan.GetQuads``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2}.Halfedge)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.FaceQuadrangulator.Fan.Quadrangulate``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.FaceQuadrangulator.Strip">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceQuadrangulator.Strip.GetQuads``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2}.Halfedge)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.FaceQuadrangulator.Strip.Quadrangulate``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.FaceQuadrangulator.CreateFan">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceQuadrangulator.CreateStrip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.FaceTriangulator">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.FaceTriangulator.Fan">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceTriangulator.Fan.GetTriangles``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2}.Halfedge)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.FaceTriangulator.Fan.Triangulate``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.FaceTriangulator.Strip">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceTriangulator.Strip.GetTriangles``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2}.Halfedge)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.FaceTriangulator.Strip.Triangulate``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.FaceTriangulator.CreateFan">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.FaceTriangulator.CreateStrip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HalfedgeList`1">
            <summary>
            
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.CountUnused">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.Swim">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.SwimAttributes``1(System.Collections.Generic.IList{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.SwimAttributes``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Reorders halfedge pairs based on the given key.
            Note that the key is taken from the first halfedge in each pair.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="getKey"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HalfedgeList`1.Action(System.Action{`0},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph">
            <summary>
            Empty topology-only implementation
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph.Vertex">
            <summary>
            Default empty vertex
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph.Halfedge">
            <summary>
            Default empty halfedge
            </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.HeGraph.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="halfedgeCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.#ctor(SpatialSlur.Meshes.HeGraph)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.Append(SpatialSlur.Meshes.HeGraph)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.SplitDisjoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.SplitDisjoint(System.Int32[]@,System.Int32[]@)">
            <summary>
            
            </summary>
            <param name="componentIndices"></param>
            <param name="edgeIndices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph.SplitDisjoint(SpatialSlur.Property{SpatialSlur.Meshes.HeGraph.Halfedge,System.Int32},SpatialSlur.Property{SpatialSlur.Meshes.HeGraph.Halfedge,System.Int32})">
            <summary>
            
            </summary>
            <param name="componentIndex"></param>
            <param name="edgeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph3d">
            <summary>
            Implementation with double precision vertex attributes commonly used in 3d applications
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph3d.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.HeGraph3d.Vertex.Position">
            <inheritdoc />
        </member>
        <member name="P:SpatialSlur.Meshes.HeGraph3d.Vertex.Normal">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph3d.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.HeGraph3d.Halfedge.Normal">
            <inheritdoc />
        </member>
        <member name="F:SpatialSlur.Meshes.HeGraph3d.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Set(SpatialSlur.Meshes.HeGraph3d.Vertex,SpatialSlur.Meshes.HeGraph3d.Vertex)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Set(SpatialSlur.Meshes.HeGraph3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Vertex)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Set(SpatialSlur.Meshes.HeGraph3d.Halfedge,SpatialSlur.Meshes.HeGraph3d.Halfedge)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Set(SpatialSlur.Meshes.HeGraph3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Halfedge)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Set(SpatialSlur.Meshes.HeGraph3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Face)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Set(SpatialSlur.Meshes.HeMesh3d.Face,SpatialSlur.Meshes.HeGraph3d.Vertex)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.#ctor(SpatialSlur.Meshes.HeGraph3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.Append(SpatialSlur.Meshes.HeGraph3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.SplitDisjoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.SplitDisjoint(System.Int32[]@,System.Int32[]@)">
            <summary>
            
            </summary>
            <param name="componentIndices"></param>
            <param name="edgeIndices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.SplitDisjoint(SpatialSlur.Property{SpatialSlur.Meshes.HeGraph3d.Halfedge,System.Int32},SpatialSlur.Property{SpatialSlur.Meshes.HeGraph3d.Halfedge,System.Int32})">
            <summary>
            
            </summary>
            <param name="componentIndex"></param>
            <param name="edgeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.AppendVertexTopology(SpatialSlur.Meshes.Impl.HeMesh{SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Face})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3d.AppendFaceTopology(SpatialSlur.Meshes.Impl.HeMesh{SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Face})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraph3dFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3dFactory.Create(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3dFactory.CreateFromLineSegments(System.Collections.Generic.IReadOnlyList{SpatialSlur.Vector3d},System.Double,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="endPoints"></param>
            <param name="tolerance"></param>
            <param name="allowMultiEdges"></param>
            <param name="allowLoops"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3dFactory.CreateFromVertexTopology(SpatialSlur.Meshes.Impl.HeMesh{SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Face})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3dFactory.CreateFromFaceTopology(SpatialSlur.Meshes.Impl.HeMesh{SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Face})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraph3dFactory.CreateFromJson(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HeGraphFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeGraphFactory.Create(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh">
            <summary>
            Empty topology-only implementation
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh.Face">
             <summary>
            
             </summary>
        </member>
        <member name="F:SpatialSlur.Meshes.HeMesh.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.#ctor(SpatialSlur.Meshes.HeMesh)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.NewFace">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.Append(SpatialSlur.Meshes.HeMesh)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.GetDual">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.AppendDual(SpatialSlur.Meshes.HeMesh)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.SplitDisjoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.SplitDisjoint(System.Int32[]@,System.Int32[]@)">
            <summary>
            
            </summary>
            <param name="componentIndices"></param>
            <param name="edgeIndices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh.SplitDisjoint(SpatialSlur.Property{SpatialSlur.Meshes.HeMesh.Halfedge,System.Int32},SpatialSlur.Property{SpatialSlur.Meshes.HeMesh.Halfedge,System.Int32})">
            <summary>
            
            </summary>
            <param name="componentIndex"></param>
            <param name="edgeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh3d">
            <summary>
            Implementation with double precision vertex attributes commonly used in 3d applications
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh3d.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.HeMesh3d.Vertex.Position">
            <inheritdoc />
        </member>
        <member name="P:SpatialSlur.Meshes.HeMesh3d.Vertex.Normal">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh3d.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.HeMesh3d.Halfedge.Normal">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh3d.Face">
             <summary>
            
             </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.HeMesh3d.Face.Normal">
            <inheritdoc />
        </member>
        <member name="F:SpatialSlur.Meshes.HeMesh3d.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.Set(SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Vertex)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.Set(SpatialSlur.Meshes.HeMesh3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Halfedge)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.Set(SpatialSlur.Meshes.HeMesh3d.Face,SpatialSlur.Meshes.HeMesh3d.Face)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.Set(SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Meshes.HeMesh3d.Face)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.Set(SpatialSlur.Meshes.HeMesh3d.Face,SpatialSlur.Meshes.HeMesh3d.Vertex)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.#ctor(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.NewFace">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.ToString">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.Append(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.GetDual">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.AppendDual(SpatialSlur.Meshes.HeMesh3d)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.SplitDisjoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.SplitDisjoint(System.Int32[]@,System.Int32[]@)">
            <summary>
            
            </summary>
            <param name="componentIndices"></param>
            <param name="edgeIndices"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3d.SplitDisjoint(SpatialSlur.Property{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Int32},SpatialSlur.Property{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Int32})">
            <summary>
            
            </summary>
            <param name="componentIndex"></param>
            <param name="edgeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMesh3dFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3dFactory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3dFactory.CreateFromFaceVertexData``1(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3dFactory.CreateFromPolygons``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3dFactory.CreateFromOBJ(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMesh3dFactory.CreateFromJson(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMeshFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshFactory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Meshes.HeMeshUnroller">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.DetachFaceCycles(SpatialSlur.Meshes.HeMesh3d,SpatialSlur.Meshes.HeMesh3d.Face)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="start"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.DetachFaceCycles``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``2,System.Action{``1,``1})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="start"></param>
            <param name="setEdge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Unroll(SpatialSlur.Meshes.HeMesh3d,SpatialSlur.Meshes.HeMesh3d.Face,System.Action{SpatialSlur.Meshes.HeMesh3d.Vertex,SpatialSlur.Vector3d},System.Func{SpatialSlur.Meshes.HeMesh3d.Halfedge,System.Double})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="start"></param>
            <param name="setUnrolledPosition"></param>
            <param name="getUnrollFactor"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Unroll``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``2,System.Action{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="start"></param>
            <param name="setUnrolledPosition"></param>
            <param name="getUnrollFactor"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Unroll``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``2,System.Func{``0,SpatialSlur.Vector3d},System.Action{``0,SpatialSlur.Vector3d},System.Func{``1,System.Double})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="start"></param>
            <param name="getPosition"></param>
            <param name="setUnrolledPosition"></param>
            <param name="getUnrollFactor"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Set(SpatialSlur.Meshes.HeMesh3d.Halfedge,SpatialSlur.Meshes.HeMesh3d.Halfedge)">
            <summary>
            
            </summary>
            <param name="he0"></param>
            <param name="he1"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.HeMeshUnroller.Impl`3">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Impl`3.DetachFaceCycles(SpatialSlur.Meshes.Impl.HeMesh{`0,`1,`2},`2,System.Action{`1,`1})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="start"></param>
            <param name="setEdge"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Impl`3.Unroll(SpatialSlur.Meshes.Impl.HeMesh{`0,`1,`2},`2,System.Func{`0,SpatialSlur.Vector3d},System.Action{`0,SpatialSlur.Vector3d},System.Func{`1,System.Double})">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="start"></param>
            <param name="getPosition"></param>
            <param name="setUnrolledPosition"></param>
            <param name="getUnrollFactor"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Impl`3.GetHalfedgeTransform(`1,System.Func{`0,SpatialSlur.Vector3d},System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.HeMeshUnroller.Impl`3.GetHalfedgeTransform(`1,System.Func{`0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Selection">
            <summary>
            Static methods for selecting groups of elements from halfedge structures.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetQuadStrips``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},System.Boolean)">
            <summary>
            Returns all quad strips in the given mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetQuadStrips``3(SpatialSlur.Meshes.Impl.HeStructure{``0,``1,``2},``2,System.Boolean)">
            <summary>
            Returns all quad strips in the given mesh.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetQuadStrips``3(System.Collections.Generic.Stack{``1},System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetQuadStrip``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <summary>
            Returns a quad strip that includes the given halfedge.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetQuadStrip``3(``1,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetEdgeLoop``3(``1)">
            <summary>
            Returns the edge loop that includes the given halfedge
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetEdgeLoopBoundary``3(``1)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Selection.GetEdgeLoopInterior``3(``1)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Meshes.Subdivision">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.TriSplit``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.Loop``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.QuadSplit``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            Applies a single iteration of Catmull-Clark subdivision to the given mesh.
            If using pre-allocated external buffers to store vertex attributes, the number of vertices after subdivision equals the sum of the number of vertices, edges, and faces in the initial mesh.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.QuadSplitGeometry``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.QuadSplitTopology``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2})">
             <summary>
            
             </summary>
             <typeparam name="V"></typeparam>
             <typeparam name="E"></typeparam>
             <typeparam name="F"></typeparam>
             <param name="mesh"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.CatmullClark``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d},SpatialSlur.Meshes.SmoothBoundaryType)">
            <summary>
            Applies a single iteration of Catmull-Clark subdivision to the given mesh.
            If using external buffers to store vertex attributes, the number of vertices after subdivision equals the sum of the number of vertices, edges, and faces in the initial mesh.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
            <param name="boundaryType"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.CatmullClarkGeometry``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d},SpatialSlur.Meshes.SmoothBoundaryType)">
            <summary>
            
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
            <param name="boundaryType"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.CatmullClarkSmooth``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d},SpatialSlur.Meshes.SmoothBoundaryType)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.CatmullClarkSmoothFixed``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.CatmullClarkSmoothCornerFixed``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.CatmullClarkSmoothFree``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.Subdivision.Diagonalize``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Property{``0,SpatialSlur.Vector3d},System.Boolean)">
            <summary>
            If using pre-allocated external buffers to store vertex attributes, the number of vertices after subdivision equals the sum of the number of vertices and faces in the initial mesh.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="position"></param>
            <param name="skipBoundary"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.IFaceQuadrangulator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.IFaceQuadrangulator.GetQuads``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2}.Halfedge)">
            <summary>
            Iterates through each quad in the face of the given halfedge.
            The last 2 vertices from each quad must not belong to the previously returned quad.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.IFaceQuadrangulator.Quadrangulate``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <summary>
            Splits the face of the given halfedge into quads.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="start"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.IFaceTriangulator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.IFaceTriangulator.GetTriangles``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2}.Halfedge)">
            <summary>
            Iterates through each triangle in the face of the given halfedge.
            The last vertex from each triangle must not belong to the previously returned triangle.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.IFaceTriangulator.Triangulate``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},``1)">
            <summary>
            Splits the face of the given halfedge into triangles.
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="E"></typeparam>
            <typeparam name="F"></typeparam>
            <param name="mesh"></param>
            <param name="start"></param>
        </member>
        <member name="T:SpatialSlur.Meshes.INormal3d">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.INormal3d.Normal">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Meshes.IPosition3d">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.IPosition3d.Position">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Meshes.GraphSearch">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.GraphSearch.NearestMin``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getConnected"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.GraphSearch.NearestMax``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getConnected"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.GraphSearch.WalkToMin``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getConnected"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.GraphSearch.WalkToMax``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="start"></param>
            <param name="getConnected"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.NodeList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.op_Implicit(SpatialSlur.Meshes.NodeList{`0})~SpatialSlur.Collections.ReadOnlyArrayView{`0}">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.NodeList`1.NextTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.NodeList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.NodeList`1.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Meshes.NodeList`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.ResetTags">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.AsView">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.AsReadOnlyView">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.Add(`0)">
            <summary>
            Adds the given node to the list.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.TrimExcess">
            <summary>
            Reduces the capacity to twice the count.
            If the capacity is already less than twice the count, then this function does nothing.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.CountUnused">
            <summary>
            Returns the number of unused nodes in the list.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.Compact">
            <summary>
            Removes all unused nodes in the list and re-indexes the remaining.
            Does not change the capacity of the list.
            If the list has any associated attributes, be sure to compact those first.
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.Swim">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.CompactAttributes``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes all attributes corresponding with unused nodes.
            </summary>
            <typeparam name="A"></typeparam>
            <param name="attributes"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.SwimAttributes``1(System.Collections.Generic.IList{``0})">
            <summary>
            Moves attributes corresponding with used nodes to the front of the given list.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.SwimAttributes``1(``0[])">
            <summary>
            Moves attributes corresponding with used nodes to the front of the given array.
            </summary>
            <param name="attributes"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Reorders the nodes in the list based on the given key.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="getKey"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.Owns(`0)">
            <summary>
            Returns true if the given node belongs to this list.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.OwnsCheck(`0)">
            <summary>
            Throws an exception for nodes that don't belong to this list.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.OwnsCheck(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.Action(System.Action{`0},System.Boolean)">
            <summary>
            Performs the given action on all nodes in the list.
            Note that unused nodes are skipped.
            </summary>
            <param name="action"></param>
            <param name="parallel"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetDistinct(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns unique nodes from the given collection (no duplicates).
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetDistinctImpl(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetUnion(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
            <summary>
            
            </summary>
            <param name="nodesA"></param>
            <param name="nodesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetDifference(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
            <summary>
            
            </summary>
            <param name="nodesA"></param>
            <param name="nodesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetDifferenceImpl(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
            <summary>
            
            </summary>
            <param name="nodesA"></param>
            <param name="nodesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetIntersection(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
            <summary>
            
            </summary>
            <param name="nodesA"></param>
            <param name="nodesB"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`1.GetIntersectionImpl(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
            <summary>
            
            </summary>
            <param name="nodesA"></param>
            <param name="nodesB"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Meshes.NodeList`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.CountUnused">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.Swim">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.SwimAttributes``1(System.Collections.Generic.IList{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.SwimAttributes``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:SpatialSlur.Meshes.NodeList`2.Action(System.Action{`0},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:SpatialSlur.Meshes.QuadStrip`3">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.#ctor(`1,`1)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="P:SpatialSlur.Meshes.QuadStrip`3.IsPeriodic">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.GetEnumerator">
            <summary>
            
            /// </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.SkipFirst(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.SkipLast(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.SkipFirstAndLast(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="firstCount"></param>
            <param name="lastCount"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.ShiftSeam(System.Int32)">
            <summary>
            Return false if the strip is not periodic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.NextInStrip(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.PrevInStrip(`1)">
            <summary>
            
            </summary>
            <param name="hedge"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Meshes.QuadStrip`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.AssemblyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.AssemblyInfo.VersionNumber">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.Solver">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.Create``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Tools.ISurfaceFeature,System.Collections.Generic.IEnumerable{SpatialSlur.Tools.IFeature},SpatialSlur.Tools.DynamicRemesher.Settings)">
            <summary>
            
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
            <param name="mesh"></param>
            <param name="target"></param>
            <param name="features"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.#ctor(SpatialSlur.Tools.DynamicRemesher.HeMesh,SpatialSlur.Tools.ISurfaceFeature,System.Collections.Generic.IEnumerable{SpatialSlur.Tools.IFeature},SpatialSlur.Tools.DynamicRemesher.Settings)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="target"></param>
            <param name="features"></param>
            <param name="settings"></param>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.InitFeatures(System.Collections.Generic.IEnumerable{SpatialSlur.Tools.IFeature})">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.FixVertices">
             <summary>
            
             </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Solver.Mesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Solver.Target">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Solver.Features">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Solver.LengthField">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Solver.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Solver.StepCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.Step">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.CalculateProjections">
            <summary>
            Calculates all projections applied to mesh vertices.
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.UniformSmooth(System.Double)">
             <summary>
            
             </summary>
             <param name="weight"></param>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.TangentialSmooth(System.Double)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.PullToFeatures(System.Double)">
             <summary>
            
             </summary>
             <param name="weight"></param>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.UpdateVertices(System.Double,System.Double)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.Refine">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.SplitEdges">
            <summary>
            Splits long edges
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.CollapseEdges">
            <summary>
            Collapses short edges
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.TryCollapse(SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge,SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge,System.Double,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.SpinEdges">
            <summary>
            Attempts to equalize the valence of vertices by spinning interior edges
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.UpdateTargetLengths(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.Solver.UpdateTargetLengths(SpatialSlur.Fields.IField3d{System.Double},System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.LengthRange">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.LengthTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.FeatureWeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.FeatureTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.TimeStep">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.Settings.RefineFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.HeMesh">
            <summary>
            Contains HeMesh element classes used in dynamic remeshing
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.Position">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.Velocity">
            <summary></summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.FeatureIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.IsFeature">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.IsFixed">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.Fix">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.Vertex.Unfix">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge.TargetLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge.FeatureIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge.IsFeature">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.DynamicRemesher.HeMesh.Halfedge.CanCollapse">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.HeMesh.Face">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Tools.DynamicRemesher.HeMesh.Face.Stamp">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Tools.DynamicRemesher.HeMesh.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.#ctor(SpatialSlur.Tools.DynamicRemesher.HeMesh)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMesh.NewFace">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.DynamicRemesher.HeMeshFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.DynamicRemesher.HeMeshFactory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.CurveFeature">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.CurveFeature.#ctor(Rhino.Geometry.Curve)">
            <summary>
            
            </summary>
            <param name="curve"></param>
        </member>
        <member name="P:SpatialSlur.Tools.CurveFeature.Rank">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.CurveFeature.ClosestPoint(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.ExtendedMeshFeature">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.ExtendedMeshFeature.#ctor(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="P:SpatialSlur.Tools.ExtendedMeshFeature.Rank">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.ExtendedMeshFeature.ClosestPoint(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.IFeature">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.IFeature.Rank">
            <summary>
            Determines priority during assignment
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.IFeature.ClosestPoint(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:SpatialSlur.Tools.ISurfaceFeature">
            <summary>
            Strongly typed interface for a subset of IFeatures
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.MeshFeature">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.MeshFeature.#ctor(Rhino.Geometry.Mesh)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="P:SpatialSlur.Tools.MeshFeature.Rank">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.MeshFeature.ClosestPoint(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.PointCloudFeature">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.PointCloudFeature.#ctor(Rhino.Geometry.PointCloud)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.PointCloudFeature.Rank">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.PointCloudFeature.ClosestPoint(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.PointFeature">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.PointFeature.#ctor(SpatialSlur.Vector3d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:SpatialSlur.Tools.PointFeature.Rank">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.PointFeature.ClosestPoint(SpatialSlur.Vector3d)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.Solver">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.Create``3(SpatialSlur.Meshes.Impl.HeMesh{``0,``1,``2},SpatialSlur.Tools.ISurfaceFeature,System.Collections.Generic.IEnumerable{SpatialSlur.Tools.IFeature},SpatialSlur.Tools.LoopGrower.Settings)">
            <summary>
            
            </summary>
            <typeparam name="TV"></typeparam>
            <typeparam name="TE"></typeparam>
            <typeparam name="TF"></typeparam>
            <param name="mesh"></param>
            <param name="target"></param>
            <param name="features"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.#ctor(SpatialSlur.Tools.LoopGrower.HeMesh,SpatialSlur.Tools.ISurfaceFeature,System.Collections.Generic.IEnumerable{SpatialSlur.Tools.IFeature},SpatialSlur.Tools.LoopGrower.Settings)">
            <summary>
            
            </summary>
            <param name="mesh"></param>
            <param name="target"></param>
            <param name="features"></param>
            <param name="settings"></param>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.InitFeatures(System.Collections.Generic.IEnumerable{SpatialSlur.Tools.IFeature})">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.Mesh">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.Target">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.Features">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.GrowthField">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.DirectionField">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Solver.StepCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.Step">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.CalculateProjections">
            <summary>
            Calculates all projections applies to mesh vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.LaplacianFair(System.Double)">
            <summary>
            
            </summary>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.SphereCollideParallel(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="radius"></param>
            <param name="weight"></param>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.PullToFeatures(System.Double)">
             <summary>
            
             </summary>
             <param name="weight"></param>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.UpdateGrid(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.UpdateVertices">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.ProjectToFeatures">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.Refine">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.SplitEdges(System.Int32)">
            <summary>
            Splits long edges
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.GetSplitFeature(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fi0"></param>
            <param name="fi1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.Solver.UpdateGrowthRate">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.SmoothWeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.CollideRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.Alignment">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.FeatureTolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.TimeStep">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.CollideFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.Settings.RefineFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.HeMesh">
            <summary>
            Contains HeMesh element classes used in dynamic remeshing
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.HeMesh.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Tools.LoopGrower.HeMesh.Vertex.Position">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Tools.LoopGrower.HeMesh.Vertex.Velocity">
            <summary></summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.HeMesh.Vertex.FeatureIndex">
            <summary></summary>
        </member>
        <member name="P:SpatialSlur.Tools.LoopGrower.HeMesh.Vertex.GrowthRate">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.HeMesh.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.HeMesh.Face">
             <summary>
            
             </summary>
        </member>
        <member name="F:SpatialSlur.Tools.LoopGrower.HeMesh.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMesh.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMesh.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
            <param name="faceCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMesh.#ctor(SpatialSlur.Tools.LoopGrower.HeMesh)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMesh.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMesh.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMesh.NewFace">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.LoopGrower.HeMeshFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.LoopGrower.HeMeshFactory.Create(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder.Solver">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.CreateFromPoints(System.Collections.Generic.IEnumerable{SpatialSlur.Vector3d},SpatialSlur.Tools.SteinerFinder.Settings)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.#ctor(SpatialSlur.Tools.SteinerFinder.HeGraph,SpatialSlur.Tools.SteinerFinder.Settings)">
            <summary>
            
            </summary>
            <param name="graph"></param>
            <param name="settings"></param>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Solver.Graph">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Solver.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Solver.StepCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Solver.IsConverged">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.Step">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.CalculateForces">
            <summary>
            Calculates all forces applied to graph vertices.
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.ApplyConstantTension">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.UpdateVertices">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.Refine">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.CollapseEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.ZipEdges">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.FindZipPair(SpatialSlur.Tools.SteinerFinder.HeGraph.Vertex,SpatialSlur.Tools.SteinerFinder.HeGraph.Halfedge@,SpatialSlur.Tools.SteinerFinder.HeGraph.Halfedge@)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
            <param name="he0"></param>
            <param name="he1"></param>
            <returns></returns>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.Solver.UpdateAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Settings.MinLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Settings.TimeStep">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Settings.Damping">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Settings.Tolerance">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Settings.ToleranceSqr">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.Settings.RefineFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder.HeGraph">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder.HeGraph.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Tools.SteinerFinder.HeGraph.Vertex.Position">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Tools.SteinerFinder.HeGraph.Vertex.Velocity">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Tools.SteinerFinder.HeGraph.Vertex.ForceSum">
            <summary></summary>
        </member>
        <member name="F:SpatialSlur.Tools.SteinerFinder.HeGraph.Vertex.IsTerminal">
            <summary></summary>
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder.HeGraph.Halfedge">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.HeGraph.Halfedge.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:SpatialSlur.Tools.SteinerFinder.HeGraph.Halfedge.Tangent">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpatialSlur.Tools.SteinerFinder.HeGraph.Factory">
            <summary></summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.HeGraph.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.HeGraph.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vertexCapacity"></param>
            <param name="hedgeCapacity"></param>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.HeGraph.#ctor(SpatialSlur.Tools.SteinerFinder.HeGraph)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.HeGraph.NewVertex">
            <inheritdoc />
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.HeGraph.NewHalfedge">
            <inheritdoc />
        </member>
        <member name="T:SpatialSlur.Tools.SteinerFinder.HeGraphFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:SpatialSlur.Tools.SteinerFinder.HeGraphFactory.Create(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
    </members>
</doc>
